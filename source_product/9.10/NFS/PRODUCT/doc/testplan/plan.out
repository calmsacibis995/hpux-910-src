






9                                 SSSSYYYYSSSSTTTTEEEEMMMM TTTTEEEESSSSTTTT PPPPLLLLAAAANNNN
9                            NNNNEEEETTTTWWWWOOOORRRRKKKK FFFFIIIILLLLEEEE SSSSYYYYSSSSTTTTEEEEMMMM ((((NNNNFFFFSSSS))))










                            CCCCOOOOLLLLOOOORRRRAAAADDDDOOOO NNNNEEEETTTTWWWWOOOORRRRKKKKSSSS DDDDIIIIVVVVIIIISSSSIIIIOOOONNNN
                                   January 1987






                                      Author
                                 Steve Booth, CND
                                 Fort Collins  CO

                            HPUX mail: hpfcla!s_booth
                                 Telnet 229-3223







       The Transformers project at CND  is  responsible  for  insuring  the
       quality  of Hewlett Packard's port of SUN Microsystem's Network File
       System (NFS) to its Model 9000 computers.

       This document defines the tests which are  necessary  to  meet  HP's
       quality goals for the NFS product.














       HP Internal Use Only           - 1 -                         2/11/88







       NFS System Test Plan                                  Identification



       1.  PPPPrrrroooojjjjeeeecccctttt IIIIddddeeeennnnttttiiiiffffiiiiccccaaaattttiiiioooonnnn


            Project Names  : NerFS         - NFS code group
                             traNsFormerS  - NFS testing group


       1.1  PPPPeeeerrrrssssoooonnnnnnnneeeellll

            Project Managers : Jeff Lindberg   (CND, Nerfs)
                               Bill Mowson     (CND, Transformers)

            Project Engineers:
                Nerfs:
                    John Dilley
                    Dave Erickson
                    George Feinberg
                    Cristina Mahon
                    Mike Shipley
                    Darren Smith

                Transformers:
                    Steve Booth
                    Jeff Elison
                    Jim Hunter
                    Dan Simula
                    Jason Zions


       1.2  RRRReeeellllaaaatttteeeedddd PPPPrrrroooojjjjeeeeccccttttssss

           SMELTER, ARPA/Berkeley/NFT cross-testing
                   - Chris Fugitt  (CND)
           PEKING,  300 port of 800 networking kernel code
                   - Dean Thompson (CND)



















       HP Internal Use Only           - 2 -                         2/11/88







       NFS System Test Plan                                         History



       2.  RRRReeeevvvviiiissssiiiioooonnnn HHHHiiiissssttttoooorrrryyyy

       First Version.....................................January, 1987
       Second Version....................................June, 1987
           Generalizations for use by the 800 NFS project

















































       HP Internal Use Only           - 3 -                         2/11/88







       NFS System Test Plan                                         Preface



       3.  PPPPrrrreeeeffffaaaacccceeee


       _N_e_t_w_o_r_k _F_i_l_e _S_y_s_t_e_m (NFS) refers to the  HP  implementation  of  SUN
       Corporation's  NFS,  and  is  a  mechanism  for sharing file systems
       (ultimately files) in a heterogeneous environment.

       For a detailed description of HP's NFS offering on  its  Model  9000
       machines, including MUST, WANT, and NON- objectives, see the _P_R_O_D_U_C_T
       _R_E_Q_U_I_R_E_M_E_N_T_S _D_O_C_U_M_E_N_T, _S_3_0_0/_S_8_0_0 _N_F_S _P_R_O_J_E_C_T [1].

       The tests described in this document derive largely from the Product
       Requirements  Document (PRD), and form the official NFS testplan for
       ALL HP Model 9000 computers.

       Various appendices  may  be  added  to  this  document  to  describe
       timeline-related  testing  activities specific to one or more of the
       Model 9000 computers.  The intent is that  this  will  be  a  living
       document,  and that project-specific appendices will be removed once
       they have outlived their usefulness.


































       HP Internal Use Only           - 4 -                         2/11/88







       NFS System Test Plan                                     Terminology



       4.  TTTTeeeerrrrmmmmiiiinnnnoooollllooooggggyyyy


       Several phrases which may be used within  this  document  require  a
       clear and concise definition.  These key phrases and a first pass at
       their definitions are as follows.


       4.1  SSSSeeeerrrriiiieeeessss 3333xxxx0000



          Level A Quality System  - characterized by:
                - No "mainline" functionality system code panics
                - No more than 5 known "corner case" function system code panics
                - No more than 5 known weight 8 or above code defects
                - final "phase 1" NFS commands (from ISO/SSO) in place

          Level B Quality System  - characterized by:
                - No more than 2 known "corner case" function system code panics
                - No more than 5 known weight 6 or above code defects
                - 50% of final NFS commands (from ISO/SSO) in place
                - 80% of SUN NFS performance demonstratable (330-330)

          Level C Quality System  - characterized by:
                - No unresolved defects of weight 6 or above
                  (if SUNs exhibit the same defect then it may be resolvable as a
                   no fix)
                - No system crashes (panics) in the last 5 working days
                - Has passed all available NFS functional tests
                - All final NFS commands (from ISO/SSO) in place
                - 75% of SUN NFS performance demonstratable (330-330)






















       HP Internal Use Only           - 5 -                         2/11/88







       NFS System Test Plan                                     Terminology




          Level 1 System Stress  - characterized by being able to execute:
                - 5 concurrent file copies thru NFS
                - 2 concurrent NFS functional tests
                - 3 concurrent Quick Regression tests

          Level 2 System Stress  - characterized by being able to execute:
                - 10 concurrent file copies thru NFS
                - 3 concurrent NFS functional tests
                - 1 NFS functional test with 50% CPU loading
                - 3 Node testing with slow (310 and 320) servers

          Level 3 System Stress  - characterized by being able to execute:
                - 10 concurrent file copies thru NFS
                - 5 concurrent NFS functional tests
                - 2 NFS functional test with 80% CPU loading
                - 4 Node testing with slow (310 and 320) servers
                - 3 Node testing with all nodes both as NFS requesters and servers
                - Mounts of at least 4 remote file system simultaneously



       4.2  SSSSeeeerrrriiiieeeessss 8888xxxx0000


       TO BE DECIDED




























       HP Internal Use Only           - 6 -                         2/11/88







       NFS System Test Plan                                      Objectives



       5.  OOOObbbbjjjjeeeeccccttttiiiivvvveeeessss


       While the main objective of any testing effort is to isolate as many
       defects   as   possible   prior   to  product  shipment,  there  are
       nevertheless those _k_e_y items that distinguish themselves  enough  to
       warrant explicit mention. For this project, those items are:


          o+ there will be at least one test case for each MUST objective in
            the PRD

          o+ testing will be completed in time to meet the customer shipment
            schedule outlined in the PRD

          o+ NFS scaffold tests should easily port to the IND scaffold; good
            documentation should be provided to insure this



       5.1  NNNNoooonnnn----OOOObbbbjjjjeeeeccccttttiiiivvvveeeessss aaaannnndddd KKKKnnnnoooowwwwnnnn RRRRiiiisssskkkkssss


       This test plan  will  specifically  exclude  testing  in  the  areas
       discussed  under  the 'Non-Objectives' section of the PRD, except as
       necessary to meet other goals.  Of  note  is  that  the  Series  8x0
       machines will support full distributed HP-UX (DUX), while series 3x0
       machines will support a well-defined "discless node" subset of DUX.

       The HPUX/discless group will test all NFS/discless interactions  not
       addressed by the connectivity tests [5].

       Certification  of  HP-NFS  through  a  VAX4.x  gateway  is  not   an
       objective.

       Because of the schedule associated with this project, it is  not  an
       objective  to produce generalized scaffold scripts for future use by
       other projects.  It is  a  high  want,  however,  and  work  on  the
       scaffold  is  being  shared  when possible among the related project
       groups.

       The quality of HP's NFS code will be at least as good as SUN's.   It
       is not an objective to meet the traditional FURPS quality goals.











       HP Internal Use Only           - 7 -                         2/11/88







       NFS System Test Plan                                     Assumptions



       6.  AAAAssssssssuuuummmmppppttttiiiioooonnnnssss


       The following are assumed for the NFS testing environment:

          o+ Kernel networking support: UDP, IP, Ethernet/IEEE 802.3 drivers

          o+ Yellow Pages commands and libraries in APPENDIX 1 of the PRD

          o+ NFS user commands in APPENDIX 3 of the PRD

          o+ NFS libraries and system calls listed in APPENDIX 4 of the PRD

          o+ modified HP-UX/networking commands as in APPENDICES 5 and 6  of
            the PRD

          o+ a version of the HP scaffold, tailored for  HP-UX  and  similar
            operating systems [2]

       For the environment in which the NFS product is  targeted,  most  of
       the gateway machines (currently) are SUN workstations.  Testing will
       therefore be skewed in that direction.

       The entire NFS test suite will be compilable/runnable from  both  HP
       Series 3xx and SUN Microsystems workstations.

       Certification of the  Vectra  and  VAX  NFS  offerings  may  require
       testing environments other than the scaffold.

       It is envisioned that in the future the HP Series 800 will be  added
       to the NFS certification matrix, and therefore tests will be written
       with as few system dependencies as possible.






















       HP Internal Use Only           - 8 -                         2/11/88







       NFS System Test Plan                               Strategy Overview



       7.  SSSSttttrrrraaaatttteeeeggggyyyy OOOOvvvveeeerrrrvvvviiiieeeewwww



       7.1  NNNNFFFFSSSS TTTTeeeesssstttt EEEEnnnnvvvviiiirrrroooonnnnmmmmeeeennnntttt


       The test suite will exist in a self-contained subdirectory  under  a
       version  of  the HP test scaffold. The scaffold structure to be used
       is described in [2], and derives from inputs by lab engineers having
       experience with earlier scaffolds.

       Tests will in general be designed to run concurrently.

       It's subdirectories will nominally be as follows:

         ----------------------nfs----------------------
         |  |      |    |    |   |     |    |     |    |
         | conn    |  xserv  | errors  | recovery |  stress
         |         |         |         |          |
       func       use       rel      perf      security

       where

          func      - functionality
          conn      - connectivity
          use       - usability  (probably 99% interactive testing)
          xserv     - cross-services
          rel       - reliability
          errors    - error conditions
          perf      - performance

       The organization and content of the  subdirectories  is  subject  to
       change   as  the  test  group  gains  experience  with  the  testing
       environment.  Any changes will be reflected in this document.


       7.2  OOOOnnnneeee PPPPrrrrooooggggrrrraaaammmm ---- MMMMaaaannnnyyyy TTTTeeeessssttttssss


       For programs and/or scripts  which  contain  many  subtests,  it  is
       assumed that a passed/failed statement is generated (sent to stdout)
       for each  _s_u_b_t_e_s_t.   For  consistency  (in  isolating  errors),  the
       keywords _p_a_s_s_e_d and _f_a_i_l_e_d will be used.










       HP Internal Use Only           - 9 -                         2/11/88







       NFS System Test Plan                               Strategy Overview



       7.3  MMMMaaaacccchhhhiiiinnnneeee DDDDeeeeppppeeeennnnddddeeeennnntttt CCCCooooddddeeee


       The following #ifdef statements  may  be  used,  IIIIFFFFFFFF  necessary,  to
       isolate machine dependent code:


               #ifdef hpux         /* HP UNIX */
               #ifdef hp9000s200   /* HP Series 200/300 */
               #ifdef hp9000s800   /* HP Series 800 */
               #ifdef sun          /* Sun Microsystems workstations */
               #ifdef BSD4_2       /* UNIX 4.2bsd running on VAX */
               #ifdef BSD4_3       /* UNIX 4.3bsd running on VAX */
                                   /* NOTE: BSD4_3 is defined in the */
                                   /* include file <sys/param.h> */

               WARNING: #ifdef hp9000s300 DOES NOT WORK




       7.4  GGGGrrrraaaapppphhhhiiiicccc NNNNoooottttaaaattttiiiioooonnnn


       Graphically  depicted  testing  scenarios  will  use  the  following
       shorthand notations:

                       Mnt     --  mount
                       Exp     --  export
                       Rcv     --  recv data
                       Snd     --  send data
                       Rcv/Ver --  receive and verify data

                       Opn     --  open system call
                       Clo     --  close system call
                       Rd      --  read system call
                       Wri     --  write system call
                       Ioc     --  ioctl system call
                       Sel     --  Select system call
                       other system calls may be added


       The use  of  low-resolution  graphics  to  describe  difficult  test
       configurations is encouraged.










       HP Internal Use Only           - 10 -                        2/11/88







       NFS System Test Plan                               Strategy Overview



       7.5  TTTTeeeesssstttt NNNNuuuummmmbbbbeeeerrrriiiinnnngggg CCCCoooonnnnvvvveeeennnnttttiiiioooonnnn


       The chapter/sub-chapter ID string generated by this nroff source for
       the  table  of contents (TOC) will be the unique identifier for each
       test scenario.  For instance, if Chapter 5 describes NFS  functional
       testing,  and  its  first  subchapter describes symbolic link tests,
       then the nroff entry

               ._H _2 "_S_y_m_b_o_l_i_c _L_i_n_k _T_e_s_t_s"

       will generate the TOC-entry ID of 5555....1111.  Subchapters under  "Symbolic
       Link Tests" will use the nroff directive

               .H 3 "test description"

       and each subchapter will describe one symbolic link test.  The  TOC-
       entry IDs for these subchapters will be in the format 5555....1111....[[[[1111........nnnn]]]].

       The level of subchapters (e.g. the depth of subchapters) will not be
       limited  to three (as in the above example), but will be dictated by
       need and determined by the  engineer(s)  responsible  for  the  test
       chapters.


       7.6  MMMMaaaappppppppiiiinnnngggg TTTTeeeesssstttt NNNNuuuummmmbbbbeeeerrrrssss iiiinnnnttttoooo tttthhhheeee NNNNFFFFSSSS SSSSuuuubbbbttttrrrreeeeeeee


       The current scaffold guideline discourages the  use  of  numbers  as
       directory  names.   A  subdirectory  tree  named  nnnnffffssss////5555////1111  (from the
       example in the previous paragraph) will therefore not be  used,  but
       will  be mapped to an alphabetic equivalent (e.g. nnnnffffssss////ffffuuuunnnncccc////ssssyyyymmmmllllnnnn) to
       fulfill the spirit of the guidelines.

       The level and structure of subchapters (in a test chapter) will  map
       into  an  equivalent level and structure of subdirectories under the
       nfs subdirectory.

       Tests  in  the  lowest-level  directories  will  share   a   common,
       meaningful  name  prefix;  the  test  number (last number in the TOC
       string) will be the name suffix.  This will assure unique test names
       as  well  as provide an index into the testplan document.  Using the
       symbolic link example, and assuming there are 5 symbolic link tests,
       a graph of the symbolic link subtree might be:










       HP Internal Use Only           - 11 -                        2/11/88







       NFS System Test Plan                               Strategy Overview




                   nfs
                    |
               -----------
               |
             func
              |
            ---------
                  |
                symln
                  |
        -----------------------------
        |      |       |        |||||
       prog prog.fu prog.st symln.{01-05}





       7.7  TTTTeeeesssstttt PPPPaaaacccckkkkaaaaggggeeeessss


       The NFS tests can be considered a test package which will  become  a
       portion of a much larger scaffold environment encompassing tests for
       HP's Network Services (NS), ARPA/Berkeley Services and sockets,  and
       the relationships among them (cross-services).

       HP will certify its NFS product against an NFS test  suite  supplied
       by SUN Microsystems.


       7.8  RRRReeeessssoooouuuurrrrcccceeeessss NNNNeeeeeeeeddddeeeedddd ffffoooorrrr tttthhhheeee 3333xxxx0000 pppprrrroooodddduuuucccctttt


       The following software and hardware will be required to complete the
       testing efforts outlined in this testplan:


          o+ 1 - series 310 HP-UX computer w/7914 (or equivalent) disc,  NFS
            code

          o+ 1 - series 320 HP-UX computer w/7914 (or equivalent) disc,  NFS
            code

          o+ 2 - series 330 HP-UX computers w/7914 (or equivalent) disc, NFS
            code

          o+ 1 - series 350 HP-UX computer w/7914 (or equivalent) disc,  NFS
            and gateway code





       HP Internal Use Only           - 12 -                        2/11/88







       NFS System Test Plan                               Strategy Overview



          o+ 2 - SUN workstations with NFS/YP software, extra disc space,  2
            network I/O cards, gateway software

          o+ 1 - VECTRA, equipped with SUN's PC-NFS (client only)

          o+ 1 - VAX/VMS equipped with Wollongong's NFS server

          o+ 1 - McBridge gateway box from RND

          o+ 1 diskless node, HPUX diskless server system

          o+ 1 - each, on a temporary basis: 7935, 7937 and 9122 discs


       7.9  RRRReeeessssoooouuuurrrrcccceeeessss NNNNeeeeeeeeddddeeeedddd ffffoooorrrr tttthhhheeee 8888xxxx0000 pppprrrroooodddduuuucccctttt


       TO BE DECIDED.




































       HP Internal Use Only           - 13 -                        2/11/88







       NFS System Test Plan                                  Existing Tests



       8.  EEEExxxxiiiissssttttiiiinnnngggg TTTTeeeesssstttt AAAAnnnnaaaallllyyyyssssiiiissss


       Many of the "Functionality" tests found later in the testplan derive
       from  existing  RFA  functionality tests [3]; others derive from the
       SSO file system test suite.

       Certain PC  tests  are  under  investigation  for  possible  use  in
       certifying the Vectra.













































       HP Internal Use Only           - 14 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.  NNNNFFFFSSSS CCCCoooommmmmmmmaaaannnnddddssss FFFFuuuunnnnccccttttiiiioooonnnnaaaalllliiiittttyyyy ((((NNNNeeeerrrrFFFFSSSS))))

       9.1  RRRRPPPPCCCC////XXXXDDDDRRRR SSSSYYYYSSSSTTTTEEEEMMMM FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNAAAALLLLIIIITTTTYYYY

       This chapter dicusses testing concerns for the kernel level RPC  and
       XDR  routines.   Because  these  routines are only called by the NFS
       layer of the kernel (i.e. they are not directly callable by any user
       level  process),  the  discussion  here  will focus on meeting those
       requirements of the PRD concerning RPC/XDR that  are  not  discussed
       elsewhere  in  this  document.   The  main  emphasis here will be on
       meeting the branch coverage goals as  stated  in  the  PRD.   It  is
       assumed  that  once the coverage has reached those goals, testing to
       increase branch coverage will stop, and only those areas which  need
       to  be  especially  reliable  (noted below) will receive any further
       attention.  Testing areas of reliability, recoverability, and stress
       are  assumed  to  be  hit  by the specific chapters discussing those
       elements elsewhere in this document.  As much as possible, any  test
       done  to increase code coverage will be put in the scaffold so as to
       be easily reproducable.

       RESPONSIBLE ENGINEER: Darren Smith




       9.1.1  DDDDeeeeppppeeeennnnddddeeeennnncccciiiieeeessss oooonnnn ooootttthhhheeeerrrr tttteeeessssttttssss

       The main method for obtaining branch flow numbers  will  be  to  run
       various  subsets  of tests discussed elsewhere in this document.  As
       tests are added to these areas, they will be run on  a  kernel  with
       the  appropriate  RPC/XDR  routines  compiled  using the Branch Flow
       Analysis (BFA) tool to measure any potential increase in coverage.



       9.1.1.1  _N_F_S__F_u_n_c_t_i_o_n_a_l__T_e_s_t_s

       The first BFA results will be obtained by running one  pass  of  the
       NFS  Functional  Test  suite  as  described  in  chapter  13 of this
       document.  By one pass we mean that all  the  tests  shall  complete
       successfully  at  least  once,  not  that  the  tests  shall  be run
       completely for 24 hours.  The tests should be run with at least  the
       node  that has the BFA version of the kernel acting as both a client
       and as a server.  These tests should hit the basic functionality  of
       the  RPC/XDR  code.   Note that this implies that the NFS Functional
       tests can complete one pass successfully.

       IMPLEMENT TIME: covered by functional tests
       PERFORM TIME: 3 days
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  The functional tests should complete correctly,



       HP Internal Use Only           - 15 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



               the BFA data base should be updated, and the major functional
               areas of RPC/XDR should be covered.



       9.1.1.2  _N_F_S__S_t_r_e_s_s__T_e_s_t_s

       A subset of the NFS Stress tests will be used to hit those  sections
       of  the  RPC/XDR  code  which  control  buffer  access  by  multiple
       clients/servers at once.  In  particular,  those  tests  which  have
       concurrent  access by multiple processes from one machine, and those
       tests which have multiple clients accessing a server  will  be  run.
       The  tests should be run with the system with the BFA kernel as both
       client and  server.   Again,  this  implies  that  these  tests  can
       complete at least one pass succesfully.

       IMPLEMENT TIME: covered by NFS stress tests.
       PERFORM TIME: 3 days
       TYPE OF TEST: stress
       EXPECTED OUTPUT: Those areas of the code that control
               access by multiple processes should be covered,
               as shown by the BFA database file.



       9.1.2  IIIInnnnccccrrrreeeeaaaassssiiiinnnngggg ccccooooddddeeee ccccoooovvvveeeerrrraaaaggggeeee wwwwiiiitttthhhhoooouuuutttt ttttrrrriiiiggggggggeeeerrrrssss

       In addition to the above tests, there are certain  conditions  which
       can  be used to increase code coverage to acceptable levels, without
       requiring any special kernel changes.  Those areas which in  general
       are  most  likely to increase the code coverage while also providing
       additional testing are discussed here.



       9.1.2.1  _I_n_t_e_r_r_u_p_t__N_F_S_D

       Interrupting the NFS daemon (nfsd) will cause several  paths  to  be
       hit,  including the exit paths and the routines which unregister the
       NFS service.   This can be accomplished  by  an  interactive  script
       which  prompts  the user to kill the nfsd program on the appropriate
       machine.

       IMPLEMENT TIME: 0.5 days (to fit in scaffold, document, etc.)
       PERFORM TIME: 0.25 days.
       TYPE OF TEST: recovery??
       EXPECTED OUTPUT: RPC/XDR should exit properly, allowing NFSD to exit
       properly.






       HP Internal Use Only           - 16 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.1.2.2  _R_P_C__C_a_l_l_i_n_g__E_r_r_o_r_s

       A great deal of the RPC code deals with detecting various  types  of
       errors  that SHOULD never happen through any normal path  of the NFS
       code. Decoding errors on the  server  side  can  easily  be  hit  by
       writing  special  purpose  test  programs to be used from the client
       side.  The server should be running the BFA code.  In all  of  these
       cases,  the  client  should check that the proper error is returned.
       It should be verified that  after  the  following  tests  have  been
       executed,  normal  NFS/RPC transactions can still take place.  To do
       this, it is suggested that the NFS functional tests be run after the
       tests  listed below.  The following is a list of some of these tests
       cases and  the  expected  results.   As  additional  cases  in  this
       category are defined they will be added to this list.

              ERROR CONDITION                      EXPECTED RESULT

       1)     The incoming UDP packet contains     RPC timeout due to no reply.
               incomplete RPC header:
                   a) less than 4 bytes. (ID)
                   b) less than 8 bytes. (DIRECTION)
                   c) various combinations specified
                      later that cause decoding
                      errors in the RPC header.

       2)     The "direction" field is             RPC timeout due to no reply.
              "REPLY" instead of "CALL"

       3)     The RPC version number is not 2      RPC timeout due to no reply.

       4)     The RPC information is correct,      MSG_ACCEPTED, PROG_UNAVAIL.
              but the program number is not the
              NFS program number.

       5)     The RPC information is correct,      MSG_ACCEPTED, PROG_MISMATCH
              but the NFS version number is 0.

       6)     The RPC information is correct,      MSG_ACCEPTED, PROC_UNAVAIL
              but the NFS procedure number is -1

       7)     The RPC information is correct,      MSG_DENIED, AUTH_ERROR
              but the authorization type is
              AUTH_SHORT

       8)     The RPC information is correct,      MSG_DENIED, AUTH_ERROR
              but the authorization type is
              AUTH_NULL and the NFS procedure
              is not RFS_NULL (0).

       9)     The RPC/NFS headers correct, but     MSG_ACCEPTED, no RPC error
              NFS requests are caused to fail by   NFS generates an error message.



       HP Internal Use Only           - 17 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



              having bad or missing NFS arguments

       IMPLEMENT TIME: 5 days
       PERFORM TIME: 2 days
       TYPE OF TEST: recovery
       EXPECTED OUTPUT: RPC/XDR should return appropriate errors. (See above.)



       9.1.2.3  _R_P_C__R_e_p_l_y_i_n_g__E_r_r_o_r_s

       Just as the server side contains  checks  for  various  errors,  the
       client  side also does.  However, to produce errors similar to those
       above implies writing a version of NFSD which  would  produce  error
       returns in a prescribed manner, and which would be executed in place
       of the normal NFSD.  This daemon would  essentially  produce  errors
       from the list for the Server above, ranging from no reply to a reply
       that had mangled data for the NFS  return  values.   While  this  is
       possible,  the  value  of  the time spent is not clearly worthwhile.
       Therefore, this set of tests should only be  done  if  necessary  to
       meet requirements for branch coverage as specified in the PRD.

       IMPLEMENT TIME: 7 days.
       PERFORM TIME: 2 days.
       TYPE OF TEST: recovery??
       EXPECTED OUTPUT: The client side should log appropriate errors,
             but continue functioning correctly on further transmissions.



       9.1.3  TTTTrrrriiiiggggggggeeeerrrrssss

       One way to increase branch coverage and to hit key spots is  to  use
       "triggers"  in  the kernel to key some appropriate action in certain
       circumstances.  While there are many areas  that  are  important  to
       hit,  the  areas  discussed here are those which will do the most to
       increase branch coverage.  Unless triggers  are  necessary  to  meet
       branch  coverage requirements as stated in the PRD, these tests will
       not be implemented.



       9.1.3.1  _X_d_r_m_b_u_f___i_n_l_i_n_e_(_)

       The xdrmbuf_inline() routine is used to check  if  there  is  enough
       space  left in the current mbuf to complete a set of operations.  If
       there is not enough space, the code is written to "do  it  the  hard
       way".   The overwhelming majority of time there is enough space, and
       in many cases it is guaranteed by higher levels of  code.   However,
       should  this  routine  return  a  failure,  normal  operation should
       continue correctly, with no errors.  Therefore a  trigger  to  cause



       HP Internal Use Only           - 18 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       xdrmbuf_inline()  to  always  fail  should  be sufficient to cause a
       number of extra paths to be covered, and at the same time  test  the
       backup  mechanisms  in  the  code.  To perform this test the trigger
       should be enabled and one pass of the NFS functional tests should be
       executed to a BFA kernel as both client and server.

       IMPLEMENT TIME:  3 days.
       PERFORM TIME: 2 days.
       TYPE OF TEST: functional
       EXPECTED OUTPUT: The system should perform normally.



       9.1.3.2  _M___g_e_t_(_)

       The m_get() routine  is  an  mbuf  routine  located  in  the  kernel
       networking  architecture  code.  It is called in several places both
       directly and through the mclgetx() routine.  Should m_get() fail  it
       means  that  it  was unable to allocate an mbuf, which usually means
       that it was out of memory.   It  should  be  possible  to  configure
       various  amounts  of networking memory to cause this routine to fail
       at various times.  However, due to the difficulty  of  reconfiguring
       memory, this approach would be both very time consuming and tedious.
       A better method is to have the m_getx() routine fail randomly.  Over
       a  period  of  time,  the  majority  of cases that call mclgetx() or
       mget() will get a failure.   Some method will need to  be  developed
       which  will  only  cause  failures  for  RPC  calls,  and not normal
       networking operation.  The trigger should be  coded  to  cause  this
       routine  to  fail at random times, with how random being a specified
       value.  To perform this test the trigger should be enabled  and  one
       pass  of the NFS functional tests should be executed to a BFA kernel
       as both client and server.

       IMPLEMENT TIME: 4 days
       PERFORM TIME: 2 days
       TYPE OF TEST: recovery
       EXPECTED OUTPUT: Different error messages logged with no panics.
       DEPENDENCIES: As the m_get() routine is under the Peking groups' control,
               any work on this trigger would have to be coordinated with them.



       9.1.3.3  _m___g_e_t_(_)_,__v_e_r_s_i_o_n__2

       As an alternative to the previous method, it might be better to have
       the  trigger  at  those places which we wish to be covered.  In this
       case a trigger in mclgetx() plus  triggers  at  the  places  calling
       m_get()  directly might be more appropriate.  Again, to perform this
       test the  trigger  should  be  enabled  and  one  pass  of  the  NFS
       functional  tests  should be executed to a BFA kernel as both client
       and server.



       HP Internal Use Only           - 19 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       IMPLEMENT TIME: 3 days.
       PERFORM TIME: 2 days.
       TYPE OF TEST: Functional
       EXPECTED OUTPUT: Various errors logged at appropriate times.



       9.1.4  IIIImmmmppppoooorrrrttttaaaannnntttt MMMMoooodddduuuulllleeeessss aaaannnndddd CCCCooooddddeeee RRRReeeevvvviiiieeeewwwwssss

       The modules listed below are the areas of the RPC/XDR code which are
       of  key importance and/or most prone to bugs.  These areas should be
       subjected to the additional requirement  that  100%  of  their  code
       shall  either be hit by branch flow coverage or shall be verified as
       correct by special code reviews/readings.  Further, as  branch  flow
       coverage  is being increased these functions should be given special
       attention, so as to increase confidence in these routines.  Any code
       reviews  done  on   these  modules  shall  be  done  by at least two
       engineers besides those responsible for the code.   The  list  below
       can be considered as a priority order for these purposes.

              Module                    Description

              ku_fastsend()             Special routine to send UPD packets
                                        "fast" by doing its own routing, IP
                                        fragmentation, etc.

              ku_recvfrom(),            Routines which do kernel level sends
              ku_sendto()               and recvs.

              xdrmbuf_*                 XDR routines which manipulate mbufs

              clntkudp_callit()         Main RPC client routine which controls
                                        remote calls.

              svc_getreq()              Main RPC server routine which controls
                                        the decoding and dispatching of incoming
                                        RPC requests.

       IMPLEMENT TIME: none
       PERFORM TIME: 5 days (for code reading in addition to BFA testing).
       TYPE OF TEST: Verification
       EXPECTED OUTPUT:  Potential bugs found will be analyzed and fixed.



       9.2  UUUUsssseeeerrrr RRRRPPPPCCCC////XXXXDDDDRRRR LLLLiiiibbbbrrrraaaarrrryyyy

       The tests in this section are designed to exercise the functionality
       of  user-callable RPC (Remote Procedure Call) and XDR (eXternal Data
       representation) functions.  The relevant source files are listed  in
       Appendix 2 of the NFS PRD.



       HP Internal Use Only           - 20 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.1  XXXXDDDDRRRR LLLLiiiibbbbrrrraaaarrrryyyy FFFFuuuunnnnccccttttiiiioooonnnnaaaallll TTTTeeeessssttttssss


       RESPONSIBLE ENGINEER: Jason Zions
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:


       Testing of  the  XDR  routines  can  be  simplified  by  making  one
       assumption:  the  Sun  implementation,  by  definition,  is correct.
       I.e., no matter what the Sun routines do, regardless of any protocol
       specifications,  our  ported  code  must  behave  identically. To do
       otherwise, even to correct Sun bugs, will make HP look incompatible.

       With this in mind, XDR testing becomes simple. A program, wwwwrrrriiiitttteeeerrrr, is
       created.  It  creates  an  encoding  (i.e. outbound) XDR stream, and
       calls each XDR encoding routine several times with various arguments
       including  corner  and  error  cases. The outbound stream is encoded
       data is directed to stdout.

       Another program, rrrreeeeaaaaddddeeeerrrr, is cloned  from  wwwwrrrriiiitttteeeerrrr....   It  expects  the
       exact same data types in the exact same order they were generated by
       wwwwrrrriiiitttteeeerrrr, and expects that stream on stdin. It displays, on stdout,  a
       printable representation of the data as transmitted.

       The following four tests are run. These tests are run on a 300;  SUN
       is used as a generic name for a Sun host.

       1. writer | reader > f1
       2. writer | remsh SUN reader > f2
       3. remsh SUN writer | reader > f3
       4. remsh SUN "writer | reader" > f4

       The contents of files f1, f2, f3, and f4 must be identical  for  the
       test  to  pass. The lines, if any, which differ easily determine the
       xdr routines with defects.

       There are several exceptions to this  scheme;  one  is  the  routine
       _x_d_r__o_p_a_q_u_e(),  which  is  defined  only for the homogeneous case (in
       fact, only which encoded the data with _x_d_r__o_p_a_q_u_e() may decode  it);
       this  routine  is  tested with versions of wwwwrrrriiiitttteeeerrrr and rrrreeeeaaaaddddeeeerrrr for the
       case of 300-300 and Sun-Sun.

       Another is the stream positioning  calls.  Since  these  produce  no
       visible  output,  their  correct  behavior  can only be deduced from
       directing  the  xdr  stream  to  and  from  files,  and  overwriting
       already-written  data.  A  version of the wwwwrrrriiiitttteeeerrrr and rrrreeeeaaaaddddeeeerrrr programs
       can be used for this purpose.





       HP Internal Use Only           - 21 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       The _x_d_r__v_o_i_d() routine takes no arguments and returns  nothing;  its
       correctness must be verified by code read.

       Finally, the _x_d_r__i_n_l_i_n_e() routine is a decode-only routine, and must
       be  tested  separately. This can be done by using the wwwwrrrriiiitttteeeerrrr program
       to  create  a  stream,  which  is  then  read  completely  via   the
       _x_d_r__i_n_l_i_n_e()  routine.  The  results of this read are stuffed into a
       memory-resident XDR stream, to which the rrrreeeeaaaaddddeeeerrrr program is  applied.
       The  four  intersystem configurations displayed above should be used
       to verify correct operation. Also, error cases should be checked  as
       well.

       Following is a reference list of all the XDR functions available:
           xdr_accepted_reply,       xdr_array,          xdr_authunix_parms,
           xdr_bool,                 xdr_bytes,          xdr_callhdr,
           xdr_callmsg,              xdr_deskey,         xdr_double,
           xdr_enum,                 xdr_fhandle,        xdr_fhstatus,
           xdr_float,                xdr_int,            xdr_long,
           xdr_opaque,               xdr_opaque_auth,    xdr_path,
           xdr_path,                 xdr_pmap,           xdr_pmaplist,
           xdr_reference,            xdr_rejected_reply, xdr_replymsg,
           xdr_short,                xdr_string,         xdr_u_int,
           xdr_u_long,               xdr_u_short,        xdr_union,
           xdr_void,                 xdr_wrapstring,     xdrmem_create,
           xdrrec_create,            xdrrec_endofrecord, xdrrec_eof,
           xdrrec_skiprecord,        xdrstdio_create.




























       HP Internal Use Only           - 22 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.2  RRRRPPPPCCCC LLLLiiiibbbbrrrraaaarrrryyyy FFFFuuuunnnnccccttttiiiioooonnnnaaaallll TTTTeeeessssttttssss


       The RPC interface is  divided  into  three  layers;  the  tests  are
       divided into three corresponding sections.  This portion of the test
       plan discusses the RPC testing in general terms.


       9.2.3  RRRRPPPPCCCC HHHHiiiigggghhhh LLLLeeeevvvveeeellll LLLLiiiibbbbrrrraaaarrrryyyy FFFFuuuunnnnccccttttiiiioooonnnn TTTTeeeessssttttssss


       RESPONSIBLE ENGINEER:
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:

       These routines are found in the library /usr/lib/librpcsvc.a.   They
       provide  a  higher-level  interface  to  RPC;  the RPC system itself
       should be transparent to users at this level.  The routines are used
       to  determine  various  information  about  remote hosts and the RPC
       system residing there.

       This layer  consists  of  calls  to  the  higher  level  RPC  remote
       services:  _g_e_t_r_p_c_p_o_r_t(),  _h_a_v_e_d_i_s_k(),  _r_n_u_s_e_r_s(), _r_s_t_a_t(), _r_u_s_e_r_s(),
       _r_w_a_l_l(), _y_p_p_a_s_s_w_d().  These  calls  simply  activate  the  requested
       service  on  some  remote system, passing arguments in and receiving
       results back.

       Both the client and server interfaces will be tested.  For  each  of
       the  client-side  routines,  simple  test drivers will be written to
       pass correct data to the server.

       A corresponding dummy server will  also  be  written,  which  simply
       accepts  the  arguments  and  dumps  them  into  a  file  for  later
       verification. The dummy then returns correct data to the requester.

       The dummy servers should be registered on both a Sun and a 300.  The
       tests  will  verify  that  the  routines behave as documented in the
       reference pages and/or other relevant documentation.   The  specific
       reference  pages  of interest are grpcport.3n, rnusers.3n, rstat.3n,
       rwall.3n, yppasswd.3n.



       9.2.3.1  _g_e_t_r_p_c_p_o_r_t

       _g_e_t_r_p_c_p_o_r_t (host, prognum, versnum, proto)

       This test should invoke _g_e_t_r_p_c_p_o_r_t() with  various  combinations  of
       valid  and  invalid  hosts,  program  numbers,  version numbers, and
       protocols.   It  should  verify  that  illegal  values  are  treated



       HP Internal Use Only           - 23 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       properly  (eg. NULL, or unknown protocol, etc).  It must verify that
       legal values are treated correctly and the correct  port  number  is
       returned.

       9.2.3.2  _h_a_v_e_d_i_s_k

       _h_a_v_e_d_i_s_k (host)

       This test should invoke _h_a_v_e_d_i_s_k() with valid, invalid  and  illegal
       host  names  (including NULL).  It should verify that illegal values
       are treated properly (ie. no core dumps) and that for  valid  values
       the  correct  information is returned (ie. true for hosts which have
       attached disks -- all but discless clients).

       9.2.3.3  _r_n_u_s_e_r_s

       _r_n_u_s_e_r_s (host)

       This test should invoke _r_n_u_s_e_r_s() with valid,  invalid  and  illegal
       host  names  (including NULL).  It should verify that illegal values
       are treated properly (ie. no core dumps) and that for  valid  values
       the  correct information is returned (ie. the number of users logged
       in on that system).

       9.2.3.4  _r_s_t_a_t

       _r_s_t_a_t (host, statp)

       This test should invoke _r_s_t_a_t() with valid, invalid and illegal host
       names  (including  NULL).   It should verify that illegal values are
       treated properly (ie. no core dumps) and that for valid  values  the
       correct  information  is returned (ie. the statp structure is filled
       in with sensible values for the kernel data structures).

       9.2.3.5  _r_u_s_e_r_s

       _r_u_s_e_r_s (host, up)

       This test should invoke _r_u_s_e_r_s() with  valid,  invalid  and  illegal
       host  names  (including NULL).  It should verify that illegal values
       are treated properly (ie. no core dumps) and that for  valid  values
       the  correct information is returned (ie. the up structure is filled
       in with valid information about the users logged in on that system).

       9.2.3.6  _r_w_a_l_l

       _r_w_a_l_l (host, msg)

       This test should invoke _r_w_a_l_l() with valid, invalid and illegal host
       names  (including  NULL).   It  should  verify  that  all values are
       treated properly, and that for valid host names the message  pointed



       HP Internal Use Only           - 24 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       to  by  msg  is  printed  on all terminals logged in on that system.
       Note that this may interfere with, for example, rlogin tests running
       at the time.  Care should be taken when running this test.

       9.2.3.7  _y_p_p_a_s_s_w_d

       _y_p_p_a_s_s_w_d (oldpass, newpw)

       This test should invoke _y_p_p_a_s_s_w_d() with valid  and  invalid  oldpass
       values   (including   NULL).    It  should  verify  that  the  newpw
       information replaces the previous password only when the oldpass  is
       identical  to the old password for the current user's account.  Note
       that while this test is running it may not  be  possible  for  tests
       which  supply  the  password to log in to the current account.  Care
       should be taken when running this test.

       This test will be written as part of the YP verification suite,  not
       the RPC/XDR suite.  This section merely serves as a reminder.


       9.2.4  RRRRPPPPCCCC MMMMiiiiddddddddlllleeee LLLLeeeevvvveeeellll LLLLiiiibbbbrrrraaaarrrryyyy FFFFuuuunnnnccccttttiiiioooonnnn TTTTeeeessssttttssss


       RESPONSIBLE ENGINEER:
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:

       These routines are found in /lib/libc.a.  They are used  to  set  up
       and  make  RPC  calls.   The higher level routines use these in most
       cases.  They provide  the  simplest  interface  to  the  RPC  system
       itself, and are all most users will need to register RPC servers and
       make RPC calls.  At this  level  the  only  transport  available  is
       UDP/IP.   Applications  wishing to use other transports must use the
       lower level routines.

       The  tests  at  this  level  will  involve  a  set  of  clients  and
       corresponding  servers,  registered  on  various machines at various
       addresses (including corner and error  cases),  which  pass  varying
       amounts  of  information  back  and forth.  Passed and returned data
       will be logged on both sides for later verifications.

       The tests will verify all _c_a_l_l_r_p_c() and _r_e_g_i_s_t_e_r_r_p_c() examples  from
       the  RPC  Programming  Guide,  as well as corner and error cases not
       included in the user documentation.

       9.2.4.1  _c_a_l_l_r_p_c

       _c_a_l_l_r_p_c (host, prog, vers, proc, inproc, in, outproc, out)

       This test should invoke _c_a_l_l_r_p_c() with valid,  invalid  and  illegal



       HP Internal Use Only           - 25 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       host  names  (including NULL).  It should verify that illegal values
       are treated properly (ie. no core dumps).   It  should  verify  that
       with  valid  arguments  the remote function is executed.  The remote
       function should echo its arguments as its result;  verifying  proper
       behavior  will then be reduced to a strcmp between in and out.  This
       test should verify that _c_a_l_l_r_p_c() returns the correct  error  values
       for illegal or incorrect values of host, prog, vers and proc.

       9.2.4.2  _r_e_g_i_s_t_e_r_r_p_c

       _r_e_g_i_s_t_e_r_r_p_c (prog, vers, proc, name, inproc, outproc)

       This routine is used to register procedure name with the portmapper.
       It should be tested with valid and invalid prog, vers, proc and name
       arguments.  Some of the invalid arguments should be a zero procedure
       number.   It  should  be  verified  that  with invalid arguments the
       function returns -1.  With valid arguments it should return zero and
       should  have  mapped the function with the portmapper.  It should be
       verified that the function can be accessed and that the  inproc  and
       outproc  are  used  to  serialize  and deserialize the arguments and
       return value.


       9.2.5  RRRRPPPPCCCC LLLLoooowwwweeeerrrr LLLLeeeevvvveeeellll LLLLiiiibbbbrrrraaaarrrryyyy FFFFuuuunnnnccccttttiiiioooonnnn TTTTeeeessssttttssss


       RESPONSIBLE ENGINEER:
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:

       These routines are also found in  /lib/libc.a.   They  are  used  to
       directly  access  the  RPC  system for applications which need to be
       able to control the transport or sockets  they  are  using,  provide
       memory  allocation  facilities,  do  user authentication, change the
       length of time for retransmissions and/or timeouts, etc.  Users  are
       encouraged to use the higher level routines due to the complexity of
       the underlying system with which this level interacts.

       A great deal of flexibility exists in these routines.   Since  these
       routines  will now be supported, it will be necessary to write tests
       to check all boundary and error  cases,  in  addition  to  the  more
       "normal"  usage  patterns.  In fact, a bulk of the testing should be
       devoted to the corner and error cases, since regular  usage  in  the
       higher  level  tests  as  well  as in the RPC-specific commands will
       cover much of the functionality of these routines.

       The first line of attack will be the porting of all sample  programs
       from  the  Sun  "Remote  Procedure  Call Programming Guide," pages 9
       through 33.  These routines exercise a wide range  of  functionality
       within  RPC,  and  will  provide  a  good  base  of tests of the RPC



       HP Internal Use Only           - 26 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       subsystem.  At the time of this writing (April 24, 1987),  a  number
       of these tests have already been ported and executed.

       One good reason for implementing the examples as tests  is  customer
       satisfaction.   Customers using RPC for the first time are likely to
       start with the examples in the  manual,  and  would  be  justifiably
       upset if they did not work.  After the examples have been ported and
       verified, the documentation group will be made aware of the  changes
       which  had  to  be  made due to syntax errors or other documentation
       type errors.  The code required to make them good tests will not  be
       included in the user documentation.

       The second line of attack  will  be  to  write  new  tests  for  the
       boundary  and error cases not hit in the documentation examples, and
       for those calls which do  not  have  example  programs  in  the  RPC
       Programming Guide.

       The lower level routines will be split into two groups:  those  that
       need  to  be  tested,  and  those  that  would be nice to test.  The
       division is determined by whether or not the routine  is  documented
       and  what its function is.  If it's not documented, then it will not
       be tested in the first pass (it will only be tested if time  remains
       at  the  end  of the project) -- users are not expected to make much
       use of these routines, so the regular usage  they  get  through  the
       other  routines  should be sufficient.  If the routine is documented
       but can be verified by a code read much more easily than a  separate
       test   case,   then   it  also  will  not  be  tested  unless  extra
       implementation time exists.  This  is  usually  the  case  for  very
       simple routines (for which writing a separate test case seems like a
       waste of time), or  very  complex  routines  (for  which  writing  a
       separate  test  case  would take longer than may be justified).  The
       deferred tests section will be included at the end of this chapter.

       Following is a reference list of all the RPC functions available:
           _authenticate,            _seterr_reply,      _svcauth_null,
           _svcauth_short,           _svcauth_unix,      authnone_create,
           authunix_create,          authunix_create_default,
           clnt_broadcast,           clnt_pcreateerror,  clnt_perrno,
           clnt_perror,              clntraw_create,     clnttcp_create,
           clntudp_bufcreate,        clntudp_create,     get_myaddress,
           nfs_null,                 pmap_getmaps,       pmap_getport,
           pmap_rmtcall,             pmap_set,           pmap_unset,
           registerrpc,              rpc_free,           rpc_malloc,
           svc_getreq,               svc_register,       svc_run,
           svc_sendreply,            svc_unregister,     svcerr_auth,
           svcerr_decode,            svcerr_noproc,      svcerr_noprog,
           svcerr_progvers,          svcerr_systemerr,   svcerr_weakauth,
           svcfd_create,             svcraw_create,      svctcp_create,
           svcudp_bufcreate,         svcudp_create,      xprt_register,
           xprt_unregister.




       HP Internal Use Only           - 27 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.5.1  _a_u_t_h_n_o_n_e___c_r_e_a_t_e

       _a_u_t_h_n_o_n_e__c_r_e_a_t_e ()

       This routine creates a void authentication  handle.   It  should  be
       verified that a valid (but empty) handle is returned.

       9.2.5.2  _a_u_t_h_u_n_i_x___c_r_e_a_t_e

       _a_u_t_h_u_n_i_x__c_r_e_a_t_e (host, uid, gid, len, aup_gids)

       This routine creates a UNIX authentication  handle.   It  should  be
       verified  that  a  valid  handle  is  returned with the uid and gids
       correctly encoded.

       9.2.5.3  _a_u_t_h_u_n_i_x___c_r_e_a_t_e___d_e_f_a_u_l_t

       _a_u_t_h_u_n_i_x__c_r_e_a_t_e__d_e_f_a_u_l_t ()

       This routine calls authunix_create with the  appropriate  arguments.
       It  should  be verified that a valid handle is returned with the uid
       and gids correctly encoded.

       9.2.5.4  _c_l_n_t___b_r_o_a_d_c_a_s_t

       _c_l_n_t__b_r_o_a_d_c_a_s_t (prog, vers, proc, inproc, in, outproc, out, eachres)

       This routine is  used  to  call  an  RPC  function  on  all  locally
       connected hosts.  It should be tested similarly to _c_a_l_l_r_p_c(), except
       for the eachresult functionality.  The same valid and invalid  cases
       should be tested; the echo function should also suffice here.

       9.2.5.5  _c_l_n_t___c_a_l_l

       _c_l_n_t__c_a_l_l (clnt, proc, inproc, in, outproc, out, tout)

       This macro is used to call the remote procedure associated with  the
       client  clnt.   It should be tested similarly to _c_a_l_l_r_p_c(), since it
       provides similar functionality.

       9.2.5.6  _c_l_n_t___d_e_s_t_r_o_y

       _c_l_n_t__d_e_s_t_r_o_y (rh)

       This macro is used to destroy a client RPC  handle.   It  should  be
       tested  with  valid  and  invalid  client  handles.   The  result is
       dependent upon the type of handle.  It should be verified  that  the
       private data structures are correctly deallocated.






       HP Internal Use Only           - 28 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.5.7  _c_l_n_t___f_r_e_e_r_e_s

       _c_l_n_t__f_r_e_e_r_e_s (clnt, outproc, out)

       This macro is used to free data allocated for a client  RPC  handle.
       It  should  be  verified  that the data are correctly decoded by the
       outproc into the data area pointed to by out.

       9.2.5.8  _c_l_n_t___g_e_t_e_r_r

       _c_l_n_t__g_e_t_e_r_r (clnt, errp)

       This macro is used to copy the error information from a  client  RPC
       handle.   It  should  be verified that it correctly copies the error
       information after several bad RPC calls.

       9.2.5.9  _c_l_n_t___p_c_r_e_a_t_e_e_r_r_o_r

       _c_l_n_t__p_c_r_e_a_t_e_e_r_r_o_r (msg)

       This routine is used to print an error  message  to  standard  error
       describing  why a client RPC handle could not be created.  It should
       be verified that the error message is prepended by  the  string  msg
       and a colon.

       9.2.5.10  _c_l_n_t___p_e_r_r_n_o

       _c_l_n_t__p_e_r_r_n_o (stat)

       This routine is used to print an error  message  to  standard  error
       describing  the  error which last occurred.  It should be used after
       bad calls to _c_a_l_l_r_p_c().

       9.2.5.11  _c_l_n_t___p_e_r_r_o_r

       _c_l_n_t__p_e_r_r_o_r (clnt, msg)

       This routine is used to print an error  message  to  standard  error
       describing  why  an RPC call associated with the client clnt failed.
       It should be used after bad calls to _c_l_n_t__c_a_l_l().

       9.2.5.12  _c_l_n_t_r_a_w___c_r_e_a_t_e

       _c_l_n_t_r_a_w__c_r_e_a_t_e (prog, vers)

       This routine is  used  to  create  a  toy  RPC  client  for  testing
       purposes.   It  should be verified that the routine creates a client
       in  the  address  space  of  the  caller.   It  should  be  used  in
       conjunction with the _s_v_c_r_a_w__c_r_e_a_t_e() function.





       HP Internal Use Only           - 29 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.5.13  _c_l_n_t_t_c_p___c_r_e_a_t_e

       _c_l_n_t_t_c_p__c_r_e_a_t_e (addr, prog, vers, sock, send, recv)

       This routine is used to create a  TCP  RPC  client.   It  should  be
       tested  with valid, invalid and illegal values for addr, prog, vers,
       sock, send  and  recv.   It  should  be  verified  that  with  valid
       arguments,  the routine creates a client which will communicate with
       the remote program prog, version vers via socket sock.  Note sock is
       a return value parameter set to the socket allocated for the client.
       The test should verify that values of zero for send and  recv  cause
       sensible values to be chosen (or at least that the client and server
       can still communicate).  This test should  be  used  with  a  server
       program that uses the _s_v_c_t_c_p__c_r_e_a_t_e() function.

       9.2.5.14  _c_l_n_t_u_d_p___b_u_f_c_r_e_a_t_e

       _c_l_n_t_u_d_p__b_u_f_c_r_e_a_t_e (addr, prog, vers, wait, sock, send, recv)

       This function is used to create the udp  client;  it  is  called  by
       _c_l_n_t_u_d_p__c_r_e_a_t_e(),  and is not meant to be used by itself, although a
       number of programs do use it.  It allows the  user  to  specify  the
       send  and  recv buffer sizes.  It is not documented but it available
       for use.  Since it is undocumented, it probably should not be tested
       on the first pass.

       9.2.5.15  _c_l_n_t_u_d_p___c_r_e_a_t_e

       _c_l_n_t_u_d_p__c_r_e_a_t_e (addr, prog, vers, wait, sock)

       This routine is used to create a  UDP  RPC  client.   It  should  be
       tested  with  valid, invalid and illegal values for addr, prog, vers
       and wait.  It should be verified  that  with  valid  arguments,  the
       routine  creates  a  client  which  will communicate with the remote
       program prog, version vers via socket sock.  Note sock is  a  return
       value  parameter  set  to the socket allocated for the client.  This
       test  should  be  used  with  a  server  program   that   uses   the
       _s_v_c_u_d_p__c_r_e_a_t_e() function.

       9.2.5.16  _g_e_t___m_y_a_d_d_r_e_s_s

       _g_e_t__m_y_a_d_d_r_e_s_s (addr)

       This routine is used to get the  local  host's  IP  address  without
       calling  the  _g_e_t_h_o_s_t_b_y_n_a_m_e() function (and thereby using the Yellow
       Pages).  It should be verified that this routine  correctly  returns
       the  addr  structure  with  the local host's IP address and the port
       number of the portmapper (PMAPPORT).






       HP Internal Use Only           - 30 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.5.17  _p_m_a_p___g_e_t_m_a_p_s

       _p_m_a_p__g_e_t_m_a_p_s (addr)

       This routine is used to interface to the portmap service.  It should
       be tested with both valid and invalid addresses, addr.  This routine
       should return a list of all currently  registered  programs  on  the
       host located at *addr.

       9.2.5.18  _p_m_a_p___g_e_t_p_o_r_t

       _p_m_a_p__g_e_t_p_o_r_t (addr, prog, vers, proto)

       This routine is used to look up the port number of the given program
       prog,  version vers, using protocol proto.  It should be tested with
       valid and invalid addr, prog, vers and proto values.  It  should  be
       verified  that the function returns either zero (for error cases) or
       the correct port number of the remote service.

       9.2.5.19  _p_m_a_p___r_m_t_c_a_l_l

       _p_m_a_p__r_m_t_c_a_l_l (addr, prog, vers,  proc,  inproc,  in,  outproc,  out,
       tout, port)

       This routine is used to make a remote  procedure  call  through  the
       portmapper.   It  should be tested with valid and invalid values for
       addr, prog, vers and proc.  It is not supposed to be  used  to  make
       general  remote  procedure calls, so the test for this function does
       not have to be as extensive as the _c_a_l_l_r_p_c() and _c_l_n_t__c_a_l_l() tests.

       9.2.5.20  _p_m_a_p___s_e_t

       _p_m_a_p__s_e_t (prog, vers, proto, port)

       This routine is used to make a mapping for the program prog, version
       vers,  protocol  proto.  It should be tested with illegal values for
       prog, vers, proto and port.  In these cases, no  mapping  should  be
       made  and  _p_m_a_p__s_e_t()  should  return zero.  With valid arguments it
       should be verified that _p_m_a_p__s_e_t()  registers  the  triple  on  port
       number  port.  This test could use _p_m_a_p__g_e_t() to verify the mapping,
       if the portmapper is to be trusted.

       9.2.5.21  _p_m_a_p___u_n_s_e_t

       _p_m_a_p__u_n_s_e_t (prog, vers)

       This routine is used to delete a mapping from the portmapper for the
       program  prog,  version  vers.   Note  that  it  should  delete  aaaallllllll
       programs, regardless of protocol (according to  the  specification).
       It should be tested with valid and invalid values for prog and vers;
       it should return one if it succeeds, zero if it fails.



       HP Internal Use Only           - 31 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.5.22  _s_v_c___d_e_s_t_r_o_y

       _s_v_c__d_e_s_t_r_o_y (xprt)

       This macro is used to destroy the RPC service transport handle xprt.
       It  should  be  verified that the private data structures associated
       with xprt are freed.  Other  than  that  there  should  not  be  any
       visible changes.

       9.2.5.23  _s_v_c___f_r_e_e_a_r_g_s

       _s_v_c__f_r_e_e_a_r_g_s (xprt, inproc, in)

       This macro is used to free data allocated to the  transport  handle,
       xprt.   It should be verified that the macro returns zero when given
       bad arguments, and that it correctly frees the data and returns  one
       otherwise.

       9.2.5.24  _s_v_c___g_e_t_a_r_g_s

       _s_v_c__g_e_t_a_r_g_s (xprt, inproc, in)

       This macro decodes  the  arguments  associated  with  the  transport
       handle,  xprt.   It  should  be  verified  that this macro correctly
       decodes the arguments passed to it  and  returns  one.   If  invalid
       arguments are passed to it, it should return a zero.

       9.2.5.25  _s_v_c___g_e_t_c_a_l_l_e_r

       _s_v_c__g_e_t_c_a_l_l_e_r (xprt)

       This macro is  used  to  get  the  network  address  of  the  caller
       associated  with  the transport handle, xprt.  It should be verified
       that it returns the  sockaddr_in  structure  describing  the  return
       address of the client (calling) function.

       9.2.5.26  _s_v_c___g_e_t_r_e_q

       _s_v_c__g_e_t_r_e_q (rdfds)

       This routine is designed to be used as a more flexible interface  to
       _s_e_l_e_c_t()  than  _s_v_c__r_u_n()  will provide.  It should be verified that
       when passed a bitmask describing file descriptors which _s_e_l_e_c_t() has
       returned as readable, the function does not return until all of them
       have  been  serviced.   It  should  be  verified  that  it   returns
       immediately when passed a bitmask of zero.  It should be tested with
       a bitmask which has bits set which do  not  correspond  to  readable
       file  descriptors.   In  this case, no action should take place, the
       call should simply return after servicing (or not, if in error) them
       all.




       HP Internal Use Only           - 32 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.5.27  _s_v_c___r_e_g_i_s_t_e_r

       _s_v_c__r_e_g_i_s_t_e_r (xprt, prog, vers, dispatch, proto)

       This routine is used to register the program prog, version vers  and
       protocol  proto with the portmapper; service routine dispatch is the
       function which handles the service requests.  It should be  verified
       that  if proto is zero, no mapping happens; if proto is nonzero then
       prog,vers,proto is mapped to the port xprt->xp_port.  It  should  be
       verified that the dispatch routine is in fact used to handle service
       requests destined to the port,vers,proto triple.

       9.2.5.28  _s_v_c___r_u_n

       _s_v_c__r_u_n ()

       This routine is used by servers to loop  forever  accepting  service
       requests   for   the   programs   it   has   registered   (by  using
       _s_v_c__r_e_g_i_s_t_e_r(), for example).  This should be trivial to test, since
       it  takes  no  arguments,  and never returns!  It should be verified
       that the registered  services  do  in  fact  get  invoked  when  the
       appropriate  requests  come  in.  This test could easily be combined
       with the above test.

       9.2.5.29  _s_v_c___s_e_n_d_r_e_p_l_y

       _s_v_c__s_e_n_d_r_e_p_l_y (xprt, outproc, out)

       This routine is used to send the results of an RPC call back to  the
       caller  associated  with  the  transport handle, xprt.  It should be
       verified that it correctly responds to  the  caller  using  the  XDR
       routine  outproc  to encode the results.  This will likely be tested
       indirectly by most of the other tests written; a separate  test  may
       not be needed except perhaps for the boundary and error conditions.

       9.2.5.30  _s_v_c___u_n_r_e_g_i_s_t_e_r

       _s_v_c__u_n_r_e_g_i_s_t_e_r (prog, vers)

       This routine is used to delete a mapping from the portmapper for the
       program  prog,  version  vers.   It  should be tested with valid and
       invalid values for prog  and  vers;  it  should  return  one  if  it
       succeeds,  zero  if it fails to undo the mapping.  This is identical
       to the functionality provided by _p_m_a_p__u_n_s_e_t().

       9.2.5.31  _s_v_c_e_r_r___a_u_t_h

       _s_v_c_e_r_r__a_u_t_h (xprt, why)

       This routine is used by a service when RPC authentication fails.  It
       should  be  verified  that  the client RPC call gets the appropriate



       HP Internal Use Only           - 33 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       error back from its _c_l_n_t__c_a_l_l() (or whatever it used).

       9.2.5.32  _s_v_c_e_r_r___d_e_c_o_d_e

       _s_v_c_e_r_r__d_e_c_o_d_e (xprt)

       This routine is used by a service when RPC parameter decoding fails.
       It  should  be verified that the client RPC call get the appropriate
       error message back from its  _c_l_n_t__c_a_l_l()  (or  whatever)  when  this
       happens.

       9.2.5.33  _s_v_c_e_r_r___n_o_p_r_o_c

       _s_v_c_e_r_r__n_o_p_r_o_c (xprt)

       This routine is used by a service when the RPC call is requesting  a
       procedure number not supported by the server.  It should be verified
       that the client RPC call get the appropriate error message back from
       its _c_l_n_t__c_a_l_l() (or whatever) when this happens.

       9.2.5.34  _s_v_c_e_r_r___n_o_p_r_o_g

       _s_v_c_e_r_r__n_o_p_r_o_g (xprt)

       This  routine  is  used  called  when  an  unregistered  program  is
       requested.   It  is not used from servers, but from the _s_v_c__g_e_t_r_e_q()
       function.  It should be verified that the client RPC  call  get  the
       appropriate  error  message  back from its _c_l_n_t__c_a_l_l() (or whatever)
       when this happens.

       9.2.5.35  _s_v_c_e_r_r___p_r_o_g_v_e_r_s

       _s_v_c_e_r_r__p_r_o_g_v_e_r_s (xprt)

       This routine is used called when an unregistered program version  is
       requested.   It  is not used from servers, but from the _s_v_c__g_e_t_r_e_q()
       function.  It should be verified that the client RPC  call  get  the
       appropriate  error  message  back from its _c_l_n_t__c_a_l_l() (or whatever)
       when this happens.

       9.2.5.36  _s_v_c_e_r_r___s_y_s_t_e_m_e_r_r

       _s_v_c_e_r_r__s_y_s_t_e_m_e_r_r (xprt)

       This routine is used by a service after some non-RPC related  system
       error  occurs  (such  as running out of memory, or not being able to
       open a file).  It should be verified that the client  RPC  call  get
       the   appropriate  error  message  back  from  its  _c_l_n_t__c_a_l_l()  (or
       whatever) when this happens.





       HP Internal Use Only           - 34 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.5.37  _s_v_c_e_r_r___w_e_a_k_a_u_t_h

       _s_v_c_e_r_r__w_e_a_k_a_u_t_h (xprt)

       This routine is  used  by  a  service  when  the  authentication  is
       insufficient for the service.  It should be verified that the client
       RPC call get the appropriate error message back from its _c_l_n_t__c_a_l_l()
       (or whatever) when this happens.

       9.2.5.38  _s_v_c_f_d___c_r_e_a_t_e

       _s_v_c_f_d__c_r_e_a_t_e (fd, send, recv)

       This routine is similar in function to _s_v_c_t_c_p__c_r_e_a_t_e()  except  that
       it  takes  any  open UNIX file descriptor as its first argument.  It
       returns a service transport.   It  is  not  documented  and  is  not
       designed  for general use by users, therefore it does not need to be
       tested in the first pass.  Internally it's just a way to get to  the
       makefd_xprt routine, which is a static function.

       9.2.5.39  _s_v_c_r_a_w___c_r_e_a_t_e

       _s_v_c_r_a_w__c_r_e_a_t_e ()

       This routine is used to create a toy RPC  service  transport  to  be
       used  with the _c_l_n_t_r_a_w__c_r_e_a_t_e() routine.  It should be verified that
       this function returns a usable transport handle, and perhaps that it
       is  a  buffer  of memory in the program's address space (this is not
       portable, however).

       9.2.5.40  _s_v_c_t_c_p___c_r_e_a_t_e

       _s_v_c_t_c_p__c_r_e_a_t_e (sock, send, recv)

       This routine is used to create a  TCP  RPC  service  transport.   It
       should  be  tested with valid and invalid values for sock, including
       the special value RPC_ANYSOCK; in the latter case the RPC  subsystem
       will choose a socket for the transport handle.  If the socket is not
       already bound, _s_v_c_t_c_p__c_r_e_a_t_e() will bind it to an arbitrary port  on
       the  local  machine.   With  zero values for send and recv, suitable
       (and usable/testable) defaults should be chosen.  The port bound  to
       should  be  verified  to  be the same as what sock was bound to.  If
       sock was not bound then it can be any  port  which  is  not  in  the
       reserved  range (0-1023).  It should be verified that this transport
       handle can be used for data transfers with a client RPC program.

       9.2.5.41  _s_v_c_u_d_p___b_u_f_c_r_e_a_t_e

       _s_v_c_u_d_p__b_u_f_c_r_e_a_t_e (sock, send, recv)

       This routine is used by _s_v_c_u_d_p__c_r_e_a_t_e() to actually do the  creation



       HP Internal Use Only           - 35 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       of  the  transport handle.  It is not documented and is not supposed
       to be called by users.  Therefore, it does not need to be tested  in
       the first pass.

       9.2.5.42  _s_v_c_u_d_p___c_r_e_a_t_e

       _s_v_c_u_d_p__c_r_e_a_t_e (sock)

       This routine is used to create a  UDP  RPC  service  transport.   It
       should  be  tested with valid and invalid values for sock, including
       the special value RPC_ANYSOCK; in the latter case the RPC  subsystem
       will choose a socket for the transport handle.  If the socket is not
       already bound, _s_v_c_u_d_p__c_r_e_a_t_e() will bind it to an arbitrary port  on
       the  local  machine.  The port bound to should be verified to be the
       same as what sock was bound to.  If sock was not bound then  it  can
       be  any port which is not in the reserved range (0-1023).  It should
       be verified  that  this  transport  handle  can  be  used  for  data
       transfers with a client RPC program.  Note that since UDP is limited
       to 8 Kbytes of data, it is not possible to pass  huge  arguments  or
       return huge results.

       9.2.5.43  _x_p_r_t___r_e_g_i_s_t_e_r

       _x_p_r_t__r_e_g_i_s_t_e_r (xprt)

       This routine is used to register a  RPC  service  transport  handle.
       This  is  not normally needed by service implementors.  It should be
       verified that this function modifies the global  bitmap  _s_v_c__f_d_s  by
       adding  the  file  descriptor  of the transport handle.  It does not
       have a return value, therefore testing will be limited to the  above
       check.

       9.2.5.44  _x_p_r_t___u_n_r_e_g_i_s_t_e_r

       _x_p_r_t__u_n_r_e_g_i_s_t_e_r (xprt)

       This routine is used to unregister a RPC service  transport  handle.
       This  is  not normally needed by service implementors.  It should be
       verified that this function modifies the global  bitmap  _s_v_c__f_d_s  by
       removing  the  file descriptor of the transport handle.  It does not
       have a return value, therefore testing will be limited to the  above
       check.

       9.2.6  DDDDeeeeffffeeeerrrrrrrreeeedddd RRRRPPPPCCCC LLLLoooowwwweeeerrrr LLLLeeeevvvveeeellll LLLLiiiibbbbrrrraaaarrrryyyy RRRRoooouuuuttttiiiinnnneeeessss


       RESPONSIBLE ENGINEER:
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:




       HP Internal Use Only           - 36 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.6.1  _M_i_s_c_e_l_l_a_n_e_o_u_s__l_i_b_r_a_r_y__r_o_u_t_i_n_e_s

       __a_u_t_h_e_n_t_i_c_a_t_e (req, msg)
       __s_e_t_e_r_r__r_e_p_l_y (msg, err)
       __s_v_c_a_u_t_h__n_u_l_l ()
       __s_v_c_a_u_t_h__s_h_o_r_t (req, msg)
       __s_v_c_a_u_t_h__u_n_i_x (req, msg)

       These functions are not documented and are only supposed to be  used
       by  other  internal  functions.   There  is  no  compelling  need to
       document and test them at this time.

       9.2.6.2  _a_u_t_h___d_e_s_t_r_o_y

       _a_u_t_h__d_e_s_t_r_o_y (auth)

       This macro is used to destroy authentication information.  It should
       be  tested  with  valid  and  invalid  auth  structures.   Since  it
       indirectly executes the ah_destroy function,  it  should  be  tested
       with  a  known (UNIX) authentication structure.  It would be nice to
       test with other authentication structures, but this should  be  done
       as a second pass.

       9.2.6.3  _a_u_t_h___m_a_r_s_h_a_l_l

       _a_u_t_h__m_a_r_s_h_a_l_l (auth, xdrs)

       This macro is used to marshall authentication  information.   It  is
       not  documented but it available for use.  Since it is undocumented,
       it probably should not be tested on the first pass.   It  should  be
       tested  with valid and invalid auth structures.  Since it indirectly
       executes the ah_marshall function, it should be tested with a  known
       (UNIX) authentication structure.  It is not clear whether it will be
       worthwhile to verify that the  authentication  handle  is  correctly
       marshalled into the xdrs structure.

       9.2.6.4  _a_u_t_h___n_e_x_t_v_e_r_f

       _a_u_t_h__n_e_x_t_v_e_r_f (auth)

       This macro is used to  run  the  next  authentication.   It  is  not
       documented  but  it available for use.  Since it is undocumented, it
       probably should not be tested on  the  first  pass.   It  should  be
       tested  with valid and invalid auth structures.  Since it indirectly
       executes the ah_nextverf function, it should be tested with a  known
       authentication  structure.   Since both of the known auth structures
       do nothing for nextverf, the "normal" case will  not  be  nearly  as
       interesting as the error cases.






       HP Internal Use Only           - 37 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.6.5  _a_u_t_h___r_e_f_r_e_s_h

       _a_u_t_h__r_e_f_r_e_s_h (auth)

       This macro is used to refresh authentication information.  It is not
       documented  but  it available for use.  Since it is undocumented, it
       probably should not be tested on  the  first  pass.   It  should  be
       tested  with valid and invalid auth structures.  Since it indirectly
       executes the ah_refresh function, it should be tested with  a  known
       (UNIX)  authentication  structure.   The  only  effect of this macro
       should be to update the aup.aup_time field in the auth structure.

       9.2.6.6  _a_u_t_h___v_a_l_i_d_a_t_e

       _a_u_t_h__v_a_l_i_d_a_t_e (auth, verfp)

       This macro is used to validate authentication  information.   It  is
       not  documented but it available for use.  Since it is undocumented,
       it probably should not be tested on the first pass.   It  should  be
       tested  with valid and invalid auth structures.  Since it indirectly
       executes the ah_validate function, it should be tested with a  known
       (UNIX) authentication structure.

       9.2.6.7  _c_l_n_t___a_b_o_r_t

       _c_l_n_t__a_b_o_r_t (rh)

       This macro is used to abort a client call.  It is not documented but
       it  available for use.  Since it is undocumented, it probably should
       not be tested on the first pass.  Since it indirectly  executes  the
       cl_abort  function,  it  should  Be  tested  with  a known client op
       structure.  Since this is a NULL function for all known client  ops,
       it is very uninteresting.

       9.2.6.8  _n_f_s___n_u_l_l

       _n_f_s__n_u_l_l () {}

       This routine is not documented nor used anywhere, but it is  present
       in  the library.  It takes no arguments and returns no value.  There
       is no reason to test it; a code read is sufficient: nfs_null() {}.

       9.2.6.9  _r_p_c___f_r_e_e

       _r_p_c__f_r_e_e (base)

       This routine is used as  a  safe  front-end  to  the  _f_r_e_e()  memory
       allocation  library  call.   It is used by internal functions, it is
       not documented and not designed  to  be  accessed  by  users.   This
       function  has already been tested by a code read.  An automated test
       should not be necessary.



       HP Internal Use Only           - 38 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.2.6.10  _r_p_c___m_a_l_l_o_c

       _r_p_c__m_a_l_l_o_c (size)

       This routine is used as a safe  front-end  to  the  _m_a_l_l_o_c()  memory
       allocation  library  call.   It is used by internal functions, it is
       not documented and not designed  to  be  accessed  by  users.   This
       function  has already been tested by a code read.  An automated test
       should not be necessary.

       9.2.6.11  _s_v_c___r_e_c_v

       _s_v_c__r_e_c_v (xprt, msg)

       This macro is used to actually receive data on the transport handle,
       xprt.   It  calls the xp_recv function associated with the transport
       handle, so behavior will differ for different types of data streams.
       It  should  be verified that it correctly receives datagrams for UDP
       streams and it would be nice to verify that it receives TCP data  as
       well.  This macro is not documented and is not intended to be called
       by users, so this test does not have to be implemented in the  first
       pass.

       9.2.6.12  _s_v_c___r_e_p_l_y

       _s_v_c__r_e_p_l_y (xprt, msg)

       This macro is used  to  actually  send  the  reply  message  on  the
       transport  handle,  xprt.  It calls the xp_reply function associated
       with the transport handle, so behavior  will  differ  for  different
       types  of  data  streams.   It  should  be  verified  that  it works
       correctly for UDP streams and it would be nice  to  verify  that  it
       receives  TCP data as well.  This macro is not documented and is not
       intended to be called by users, so this test does  not  have  to  be
       implemented in the first pass.

       9.2.6.13  _s_v_c___s_t_a_t

       _s_v_c__s_t_a_t (xprt)

       This macro is used to get the status of the transport handle,  xprt.
       It  calls the xp_stat function associated with the transport handle,
       so behavior will differ for different types  of  data  streams.   It
       should  be  verified that it returns XPRT_IDLE for UDP streams.  and
       it would be nice to verify that it returns XPRT_IDLE  for  idle  TCP
       streams  as  well,  but  this  would  not  be possible due to timing
       problems: the test would have to know what the status is of  pending
       TCP  data.   This  macro is not documented and is not intended to be
       called by users, so this test does not have to be implemented in the
       first pass.




       HP Internal Use Only           - 39 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.3  BBBBiiiioooodddd ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Biod is the NFS asynchronous block I/O daemon.  It is  used  by  the
       NFS  client  to buffer cache handle read-ahead and write-behind.  It
       is possible to start several biod's in parallel.  The  command  line
       for biod is:

                  biod [nservers]


       RESPONSIBLE ENGINEER: Dan Simula
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  2.0  md
       PERFORM TIME:    1.0  md



       9.3.1  RRRRuuuunnnn bbbbiiiioooodddd wwwwiiiitttthhhhoooouuuutttt bbbbeeeeiiiinnnngggg ssssuuuuppppeeeerrrruuuusssseeeerrrr

       Verify that biod cannot be started if you are not the superuser.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "You must be root to run biod"



       9.3.2  TTTTeeeesssstttt bbbbiiiioooodddd wwwwiiiitttthhhh eeeexxxxttttrrrraaaa aaaarrrrgggguuuummmmeeeennnnttttssss

       Biod should only accept one argument, a positive number.  This  test
       invokes biod with more than one argument.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "usage: biod [<count>] (count >= 1)"



       9.3.3  TTTTeeeesssstttt bbbbiiiioooodddd wwwwiiiitttthhhh aaaa nnnneeeeggggaaaattttiiiivvvveeee aaaarrrrgggguuuummmmeeeennnntttt

       This test invokes biod with a negative number as an argument.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "usage: biod [<count>] (count >= 1)"




       HP Internal Use Only           - 40 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.3.4  TTTTeeeesssstttt bbbbiiiioooodddd wwwwiiiitttthhhh zzzzeeeerrrroooo ffffoooorrrr aaaannnn aaaarrrrgggguuuummmmeeeennnntttt

       This test invokes biod with an argument that is zero.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Sun returns no error message, but does not start biod.
              We currently do the same.  An enhancement may be added
              to return:
              "usage: biod [<count>] (count >= 1)"



       9.3.5  TTTTeeeesssstttt bbbbiiiioooodddd wwwwiiiitttthhhh aaaa nnnnoooonnnn----nnnnuuuummmmeeeerrrriiiicccc aaaarrrrgggguuuummmmeeeennnntttt

       This test invokes biod with an argument that is not a number.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Sun returns no error message, but does not start biod.
              We currently do the same.  An enhancement may be added
              to return:
              "usage: biod [<count>] (count >= 1)"



       9.3.6  TTTTeeeesssstttt bbbbiiiioooodddd wwwwiiiitttthhhh aaaa llllaaaarrrrggggeeee nnnnuuuummmmbbbbeeeerrrr ffffoooorrrr aaaannnn aaaarrrrgggguuuummmmeeeennnntttt

       This test invokes biod with a very large  number  for  an  argument.
       The  purpose of this test is to create a condition so that biod will
       be unable to fork.  The number to be used should be large enough  to
       provoke that problem.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "biod cannot fork"



       9.3.7  SSSSttttaaaarrrrtttt bbbbiiiioooodddd wwwwhhhheeeennnn aaaannnnooootttthhhheeeerrrr oooonnnneeee aaaallllrrrreeeeaaaaddddyyyy rrrruuuunnnnnnnniiiinnnngggg

       TYPE OF TEST:
              functional (correct invocation)
       EXPECTED OUTPUT:
              The second batch of biod daemons should start.






       HP Internal Use Only           - 41 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.3.8  TTTTeeeesssstttt bbbbiiiioooodddd wwwwiiiitttthhhhoooouuuutttt aaaarrrrgggguuuummmmeeeennnnttttssss

       This test invokes biod without an argument.

       TYPE OF TEST:
              functional (correct invocation)
       EXPECTED OUTPUT:
              one biod should start running.



       9.3.9  KKKKiiiillllllll bbbbiiiioooodddd wwwwiiiitttthhhh ssssiiiiggggnnnnaaaallll 11115555

       This test kills biod by doing a "kill pid".

       TYPE OF TEST:
              functional (correct invocation)
       EXPECTED OUTPUT:
              Biod dies properly.




       9.4  NNNNffffssssdddd ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Nfsd handles client filesystem requests.  It is  possible  to  start
       several nfsd's in parallel.  The command line for nfsd is:

                  nfsd [nservers]


       RESPONSIBLE ENGINEER: Dan Simula
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  1.5  md
       PERFORM TIME:    1.0  md



       9.4.1  RRRRuuuunnnn nnnnffffssssdddd wwwwiiiitttthhhhoooouuuutttt bbbbeeeeiiiinnnngggg ssssuuuuppppeeeerrrruuuusssseeeerrrr

       Verify that nfsd cannot be started if you are not the superuser. You
       need  to  change  the  permissions  for nfsd and then try running it
       without being super-user.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "You must be root to run nfsd"




       HP Internal Use Only           - 42 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.4.2  TTTTeeeesssstttt nnnnffffssssdddd wwwwiiiitttthhhh eeeexxxxttttrrrraaaa aaaarrrrgggguuuummmmeeeennnnttttssss

       Nfsd should only accept one argument.  This test invokes  nfsd  with
       more than one argument.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "usage: nfsd [servers] (servers >= 1)"



       9.4.3  TTTTeeeesssstttt nnnnffffssssdddd wwwwiiiitttthhhh aaaa nnnneeeeggggaaaattttiiiivvvveeee aaaarrrrgggguuuummmmeeeennnntttt

       This test invokes nfsd with a negative number as an argument.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "usage: nfsd [servers] (servers >= 1)"



       9.4.4  TTTTeeeesssstttt nnnnffffssssdddd wwwwiiiitttthhhh zzzzeeeerrrroooo ffffoooorrrr aaaannnn aaaarrrrgggguuuummmmeeeennnntttt

       This test invokes nfsd with an argument that is zero.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "usage: nfsd [servers] (servers >= 1)"



       9.4.5  TTTTeeeesssstttt nnnnffffssssdddd wwwwiiiitttthhhh aaaa nnnnoooonnnn----nnnnuuuummmmeeeerrrriiiicccc aaaarrrrgggguuuummmmeeeennnntttt

       This test invokes nfsd with an argument that is not a number.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "usage: nfsd [servers] (servers >= 1)"



       9.4.6  TTTTeeeesssstttt nnnnffffssssdddd wwwwiiiitttthhhh aaaa llllaaaarrrrggggeeee nnnnuuuummmmbbbbeeeerrrr ffffoooorrrr aaaannnn aaaarrrrgggguuuummmmeeeennnntttt

       This test invokes nfsd with a very large  number  for  an  argument.
       The  purpose of this test is to create a condition so that nfsd will
       be unable to fork.  The number to be used should be large enough  to
       provoke that problem.



       HP Internal Use Only           - 43 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "nfsd: fork"



       9.4.7  SSSSttttaaaarrrrtttt nnnnffffssssdddd wwwwhhhheeeennnn aaaannnnooootttthhhheeeerrrr oooonnnneeee aaaallllrrrreeeeaaaaddddyyyy rrrruuuunnnnnnnniiiinnnngggg

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              The second nfsd should not start.
              "nfsd: server already active"



       9.4.8  TTTTeeeesssstttt nnnnffffssssdddd wwwwhhhheeeennnn ppppoooorrrrttttmmmmaaaapppp nnnnooootttt rrrruuuunnnnnnnniiiinnnngggg

       Nfsd will not be able to register its port number with portmap,  but
       it  should not fail badly.  The nfsd should continue to run since it
       uses a well known port.
       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "Cannot register service: RPC_TIMED_OUT"



       9.4.9  TTTTeeeesssstttt nnnnffffssssdddd wwwwiiiitttthhhhoooouuuutttt aaaarrrrgggguuuummmmeeeennnnttttssss

       This test invokes nfsd without an argument.

       TYPE OF TEST:
              functional (correct invocation)
       EXPECTED OUTPUT:
              one nfsd should start running.



       9.4.10  KKKKiiiillllllll nnnnffffssssdddd wwwwiiiitttthhhh ssssiiiiggggnnnnaaaallll 11115555

       This test kills nfsd with a "kill  pid".   Nfsd  should  be  started
       again  after  this  test  so that other tests won't fail.  This test
       might be considered a destructive test and as such might not  belong
       in the scaffold (especially during concurrent testing).

       TYPE OF TEST:
              functional (correct invocation)
       EXPECTED OUTPUT:
              Nfsd should die cleanly.



       HP Internal Use Only           - 44 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.5  mmmmoooouuuunnnnttttdddd TTTTeeeesssstttt PPPPllllaaaannnn


       This chapter covers the  mmmmoooouuuunnnnttttdddd  command.   The  main  use  of  this
       command  is  to  allow  remote  hosts  to  mount a disk on the local
       system; after the mount is successful, the remote host may  use  NFS
       to access files on the local file system.


       9.5.1  mmmmoooouuuunnnnttttdddd bbbbeeeehhhhaaaavvvviiiioooorrrr
                 RESPONSIBLE ENGINEER:                   John A Dilley
                 ASSUMPTIONS:                            module to be tested is functional



       9.5.1.1  _v_a_l_i_d__r_e_q_u_e_s_t_s

                     IMPLEMENT TIME: 0.50 md
                     PERFORM TIME:   3.50 md
                     TYPE OF TEST:   functional
                     EXPECTED OUTPUT:                    no output if the test passes

       Test mmmmoooouuuunnnnttttdddd from a remote host by attempting to mount a  valid  file
       system.   The  mount  should be successful, and we should be able to
       successfully use NFS to access the file system.  Note: this is  done
       by nearly every NFS test already; it is not clear that this would be
       worthwhile to reimplement.



       9.5.1.2  _i_n_v_a_l_i_d__r_e_q_u_e_s_t_s

                     IMPLEMENT TIME: 1.25 md
                     PERFORM TIME:   4.50 md
                     TYPE OF TEST:   functional
                     EXPECTED OUTPUT:                    no output if the test passes
       Test mmmmoooouuuunnnnttttdddd from a remote host by attempting  to  mount  an  invalid
       file  system.   The  mount  should  fail  with  an appropriate error
       message and it should not be possible to use NFS to access the  file
       system  named.   Try  using  all combinations of: file systems which
       aren't valid (eg. /foo/bar), file systems which are already remotely
       mounted  from  another system, file systems which are not allowed to
       be NFS mounted (eg. not in /etc/exports), file systems which are not
       permitted  to  mount  on  the  client  (eg. the client is not in the
       allowed list of  hosts  or  netgroups  in  /etc/exports).   If  time
       permits,  another interesting test would be trying to remotely mount
       a file system from a DUX/diskless client  (should  not  be  able  to
       mount the rootserver from a diskless client).






       HP Internal Use Only           - 45 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.5.1.3  _T_e_s_t_s__t_o__i_n_c_r_e_a_s_e__B_F_A__c_o_v_e_r_a_g_e

       These tests have been added to increase  the  BFA  coverage  of  the
       rpc.mountd command.  They are somewhat destructive tests.

         1.  Try to mount a directory that does not  exist  on  the  remote
             system.

         2.  Use a network group in /etc/exports.

         3.  Kill rpc.mountd, remove a colon (:) from /etc/rmtab and  bring
             rpc.mountd back up.

         4.  Move /etc/exports to another file and  bring  rpc.mountd  back
             up.

         5.  Use an /etc/exports file that contains comments.

         6.  Add a "-" as the first character in a line in /etc/exports.

         7.  Add a "-" followed by something (as in  -l)  in  /etc/exports.
             For example: / -l

         8.  Do a mount that will be refused.

         9.  Use pmap_conf with the "-p" option to call rpc.mountd, program
             100005, version 1 procedure 0 (NULL_PROC) and procedure 7 (not
             defined,  it  will  execute  the  default  case  on  the  case
             statement).

       9.6  IIIInnnneeeettttdddd ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       The purpose of this testplan is not to test all the functionality of
       inetd,  but only parts that were affected by the addition of support
       of RPC based services.  It is implied that the tests previously used
       to  certify  inetd will be run again on the new version, in addition
       to the new tests described below.  A line in inetd.conf file for  an
       rpc server entry has the following fields:

       rpc
       <socket type>
       <protocol>
       <wait/nowait>
       <user>
       <server program>
       <program number>
       <version number>
       <server program arguments>

       For the configuration file tests inetd should either be reconfigured



       HP Internal Use Only           - 46 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       or  killed  and  started  again.   In  the  interest  of branch flow
       coverage both options should be exercised, but that  might  be  done
       outside  the  functional  tests  suite.   On the following tests and
       examples a "?" stands for a number.


       RESPONSIBLE ENGINEER: Dan Simula
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  5.0  md
       PERFORM TIME:    1.0  md



       9.6.1  HHHHaaaavvvveeee iiiinnnneeeettttdddd ssssttttaaaarrrrtttt aaaannnn rrrrppppcccc sssseeeerrrrvvvveeeerrrr

       Enter the following line in /etc/inetd.conf, start inetd and see  if
       server correctly invoked:

            rpc dgram udp wait root /etc/rpcserv 10000? 1 rpcserv

       where rpcserv is a test RPC server and 10000? is the program  number
       for that server.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              A service that  communicates with /etc/rpcserv  should be able to
              start  rpcserv from inetd.  It should not be necessary to write a
              new rpc service/server for that purpose.  Verify that the program
              has been  correctly  registered  with  portmap  (program  number,
              version  number,  correct  port).  Starting  with a  program  not
              registered  with  portmap  a  rpcinfo  call  should  provide  the
              information.  By turning  trace on on inetd you can see what port
              was  assigned to the program in question and match it against the
              one registered with portmap.



       9.6.2  NNNNoooo eeeexxxxeeeeccccuuuuttttaaaabbbblllleeee ffffiiiieeeelllldddd

       Enter the following line in /etc/inetd.conf and start inetd:

            rpc dgram udp wait root /etc/rpcserv 10000? 1

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              "Configuration file format error, line ?, field nine"





       HP Internal Use Only           - 47 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.6.3  NNNNoooo pppprrrrooooggggrrrraaaammmm nnnnuuuummmmbbbbeeeerrrr ffffiiiieeeelllldddd

       Enter the following line in /etc/inetd.conf and start inetd:

            rpc dgram udp wait root /etc/rpcserv

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              "Configuration file format error, line ?, missing program number"



       9.6.4  NNNNoooo vvvveeeerrrrssssiiiioooonnnn nnnnuuuummmmbbbbeeeerrrr ffffiiiieeeelllldddd

       Enter the following line in /etc/inetd.conf and start inetd:

            rpc dgram udp wait root /etc/rpcserv 10000?

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              "Configuration file format error, line ?, missing version number"



       9.6.5  MMMMiiiissssssssiiiinnnngggg lllloooowwww nnnnuuuummmmbbbbeeeerrrr iiiinnnn rrrraaaannnnggggeeee

       Enter the following line in /etc/inetd.conf and start inetd:

            rpc dgram udp wait root /etc/rpcserv 10000? -3 rpcserv

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              "Configuration file format error, line ?,missing low number in range"



       9.6.6  MMMMiiiissssssssiiiinnnngggg hhhhiiiigggghhhh nnnnuuuummmmbbbbeeeerrrr iiiinnnn rrrraaaannnnggggeeee

       Enter the following line in /etc/inetd.conf and start inetd:

            rpc dgram udp wait root /etc/rpcserv 10000? 1- rpcserv

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              "Configuration file format error, line ?,missing high number in range"





       HP Internal Use Only           - 48 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.6.7  IIIInnnnvvvveeeerrrrtttteeeedddd vvvveeeerrrrssssiiiioooonnnn nnnnuuuummmmbbbbeeeerrrr rrrraaaannnnggggeeee

       Enter the following line in /etc/inetd.conf and start inetd:

            rpc dgram udp wait root /etc/rpcserv 10000? 3-1 rpcserv

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              "Configuration file format error, line ?, inverted version range"

       To be added.



       9.6.8  CCCCoooorrrrrrrreeeecccctttt vvvveeeerrrrssssiiiioooonnnn rrrraaaannnnggggeeee

       Enter the following line in /etc/inetd.conf and start inetd:

            rpc dgram udp wait root /etc/rpcserv 10000? 1-3 rpcserv

       for example.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              We should be able to verify  that at least  those three  versions
              have been registered with portmap.



       9.6.9  CCCChhhhaaaannnnggggeeee pppprrrrooooggggrrrraaaammmm nnnnuuuummmmbbbbeeeerrrr

       Change the following line in /etc/inetd.conf:

            rpc dgram udp wait root /etc/rpcserv 100008 1-3 rpcserv

       to

            rpc dgram udp wait root /etc/rpcserv 100009 1-3 rpcserv

       and reconfigure inetd.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Verify that portmap has  unregistered  the old program number and
              correctly registered the new one.






       HP Internal Use Only           - 49 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.6.10  CCCChhhhaaaannnnggggeeee vvvveeeerrrrssssiiiioooonnnn nnnnuuuummmmbbbbeeeerrrr ((((ssssiiiinnnngggglllleeee))))

       Change the following line in /etc/inetd.conf:

            rpc dgram udp wait root /etc/rpcserv 100008 1 rpcserv

       to

            rpc dgram udp wait root /etc/rpcserv 100008 2 rpcserv

       and reconfigure inetd.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Verify that  portmap has  unregistered  the version  number 1 and
              that version 2 is correctly registered.



       9.6.11  CCCChhhhaaaannnnggggeeee vvvveeeerrrrssssiiiioooonnnn nnnnuuuummmmbbbbeeeerrrr ((((hhhhiiiigggghhhh rrrraaaannnnggggeeee))))

       Change the following line in /etc/inetd.conf:

            rpc dgram udp wait root /etc/rpcserv 100008 1-3 rpcserv

       to

            rpc dgram udp wait root /etc/rpcserv 100008 1-2 rpcserv

       and reconfigure inetd.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Verify that  portmap has  unregistered  the version  number 3 and
              that versions 1 and 2 are still correctly registered.



       9.6.12  CCCChhhhaaaannnnggggeeee vvvveeeerrrrssssiiiioooonnnn nnnnuuuummmmbbbbeeeerrrr ((((lllloooowwww rrrraaaannnnggggeeee))))

       Change the following line in /etc/inetd.conf:

            rpc dgram udp wait root /etc/rpcserv 100008 1-3 rpcserv

       to

            rpc dgram udp wait root /etc/rpcserv 100008 2-3 rpcserv

       and reconfigure inetd.



       HP Internal Use Only           - 50 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Verify that  portmap has  unregistered  the version  number 1 and
              that versions 2 and 3 are still correctly registered.



       9.6.13  CCCChhhhaaaannnnggggeeee llllooooccccaaaattttiiiioooonnnn ooooffff sssseeeerrrrvvvveeeerrrr

       Change the following line in /etc/inetd.conf:

            rpc dgram udp wait root /etc/rpcserv 100008 1 rpcserv

       to

            rpc dgram udp wait root /tmp/rpcserv 100008 1 rpcserv

       and reconfigure inetd.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Verify that when rpcserv is invoked,  the server in /tmp, and not
              the one in /etc, is executed.


       Because the rpc servers are identified by their  executable  instead
       of  their  name  (they  are  all  called  rpc),  if  you  change the
       executable name the previous server will still  be  registered  with
       inetd.   The  portmap  might  override  the  old registration of the
       program number with the new one.????



       9.6.14  DDDDeeeelllleeeetttteeee rrrrppppcccc sssseeeerrrrvvvveeeerrrr

       Remove  the  entry  for  an  rpc  server  from  /etc/inetd.conf  and
       reconfigure inetd.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Verify that  portmap has  unregistered  that  program and all its
              versions.  If the server is invoked it should not respond.



       9.6.15  CCCCrrrreeeeaaaatttteeee aaaa TTTTCCCCPPPP bbbbaaaasssseeeedddd rrrrppppcccc sssseeeerrrrvvvveeeerrrr

       A line in the configuration file should be similar to this:



       HP Internal Use Only           - 51 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



           rpc stream tcp nowait root /etc/rpcserv 100008 1 rpcserv

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Verify that inetd correctly  registers such a server with portmap
              and that it starts it correctly.   If a TCP based rpc server will
              be created it should be extremely simple, maybe just a stub.



       9.6.16  CCCCrrrreeeeaaaatttteeee aaaa TTTTCCCCPPPP bbbbaaaasssseeeedddd rrrrppppcccc sssseeeerrrrvvvveeeerrrr wwwwiiiitttthhhh wwwwaaaaiiiitttt ooooppppttttiiiioooonnnn

       A line in the configuration file should be similar to this:

            rpc stream tcp wait root /etc/rpcserv 100008 1 rpcserv

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Verify that inetd correctly  registers such a server with portmap
              and that it starts it correctly.   If a TCP based rpc server will
              be created it should be extremely simple, maybe just a stub.
              This might not be allowed, expected output still needs to be
              checked.????



       9.6.17  TTTTrrrryyyy aaaannnn rrrrppppcccc sssseeeerrrrvvvveeeerrrr tttthhhhaaaatttt uuuusssseeeessss ooooppppttttiiiioooonnnnssss

       A line in the configuration file should be similar to this:

            rpc stream tcp wait root /etc/rpcserv 100008 1 rpcserv -option

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Verify that when the server is invoked it starts with whatever option
              was listed in the configuration file.



       9.6.18  TTTTeeeesssstttt tttthhhheeee sssseeeeccccuuuurrrriiiittttyyyy ffffeeeeaaaattttuuuurrrreeee ooooffff iiiinnnneeeettttdddd ffffoooorrrr rrrrppppcccc sssseeeerrrrvvvveeeerrrrssss

       A line in the security file should be similar to this:

            rpcserv                  deny                hostname

       where rpcserv is an rpc server started by inetd.

       TYPE OF TEST:



       HP Internal Use Only           - 52 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



              functional
       EXPECTED OUTPUT:
              Verify that such a server is denied access from the host.  If the
              server is a "wait"  option  server once it is started all further
              contact  between itself and clients does not go through the inetd
              (until rpcserv is started  again), so the inetd security file has
              no affect on that.



       9.7  PPPPoooorrrrttttmmmmaaaapppp ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Portmap implements the program, version to port number  mapping  for
       rpc services.  For example, inetd gets a socket for rpc.mountd based
       on a non-reserved port number (>1023).  It then registers rpc.mountd
       (its program and version number) with portmap and tells portmap what
       port number it will be listening at for rpc.mountd requests.  When a
       remote  system  wants  to mount a filesystem from our system it will
       call portmap and ask portmap for the port number that corresponds to
       the program and version number for rpc.mountd.  Portmap will provide
       the calling program  (mount)  with  that  information  so  that  the
       calling  program  can contact rpc.mountd directly.  The command line
       for portmap is:

                  portmap


       To exercise certain options in portmap  it  might  be  necessary  to
       write   a   program   that   calls   portmap   and  either  requests
       information/calls procedures or provides information.

       Note: All these tests must be run as superuser.

       RESPONSIBLE ENGINEER: Dan Simula
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  3.5  md
       PERFORM TIME:    1.0  md



       9.7.1  MMMMaaaakkkkeeee aaaa nnnnuuuullllllll pppprrrroooocccceeeedddduuuurrrreeee ccccaaaallllllll

       Call the null procedure for portmap.

       TYPE OF TEST:
              functional (PMAPPROC_NULL)
       EXPECTED OUTPUT:
              Portmap will return a NULL.




       HP Internal Use Only           - 53 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.7.2  RRRReeeeggggiiiisssstttteeeerrrr aaaa pppprrrrooooggggrrrraaaammmm

       Call  portmap  and  register  a  program  that  was  not  previously
       registered.   Check  also  when  the  program is the first one to be
       registered.  If the registering succeeds, portmap will send a one as
       the reply.

       TYPE OF TEST:
              functional (PMAPPROC_SET)
       EXPECTED OUTPUT:
              When  prompting  for the port number for that  program you should
              get the information previously supplied.



       9.7.3  RRRReeeeggggiiiisssstttteeeerrrr aaaa pppprrrreeeevvvviiiioooouuuussssllllyyyy rrrreeeeggggiiiisssstttteeeerrrreeeedddd pppprrrrooooggggrrrraaaammmm ((((ddddiiiiffffffff vvvveeeerrrrssssiiiioooonnnn))))

       Call portmap and register a program that was  previously  registered
       with  a  different  version  number.  Portmap will send a one as the
       reply if it succeeds in registering the program.

       TYPE OF TEST:
              functional (PMAPPROC_SET)
       EXPECTED OUTPUT:
              When  prompting  for the port number for that  program you should
              get  the   information   supplied   for  the  new   version.  The
              information for the old version should still be there.



       9.7.4  RRRReeeeggggiiiisssstttteeeerrrr aaaa pppprrrreeeevvvviiiioooouuuussssllllyyyy rrrreeeeggggiiiisssstttteeeerrrreeeedddd pppprrrrooooggggrrrraaaammmm ((((ssssaaaammmmeeee vvvveeeerrrrssssiiiioooonnnn,,,,  ddddiiiiffffffff
       ppppoooorrrrtttt))))

       Call portmap and register a program that was  previously  registered
       with  a  the  same  version  number,  but  a  different port number.
       Portmap will return a zero reply, meaning that it did  not  register
       the program.  For this to succeed, the program, version has first to
       be unset, before it can be set (registered).

       TYPE OF TEST:
              functional (PMAPPROC_SET)
       EXPECTED OUTPUT:
              If prompting for the port number for that program and version you
              should get the old port number, not the one you just supplied.



       9.7.5  RRRReeeeggggiiiisssstttteeeerrrr aaaa pppprrrreeeevvvviiiioooouuuussssllllyyyy rrrreeeeggggiiiisssstttteeeerrrreeeedddd pppprrrrooooggggrrrraaaammmm ((((ssssaaaammmmeeee vvvveeeerrrrssssiiiioooonnnn,,,,  ssssaaaammmmeeee
       ppppoooorrrrtttt))))

       Call portmap and register a program that was  previously  registered



       HP Internal Use Only           - 54 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       with  a  the  same version number and the same port number.  Portmap
       will return a reply of one meaning that it succeeded.  Portmap  will
       basically ignore this call since no information changed.

       TYPE OF TEST:
              functional (PMAPPROC_SET)
       EXPECTED OUTPUT:
              If prompting for the port number for that program and version you
              should get the old/new port number.



       9.7.6  UUUUnnnnrrrreeeeggggiiiisssstttteeeerrrr rrrreeeeggggiiiisssstttteeeerrrreeeedddd pppprrrrooooggggrrrraaaammmm aaaannnndddd vvvveeeerrrrssssiiiioooonnnn nnnnuuuummmmbbbbeeeerrrrssss

       Call portmap and unregister a program and a version number  of  that
       program that have been previously registered.

       TYPE OF TEST:
              functional (PMAPPROC_UNSET)
       EXPECTED OUTPUT:
              Portmap should return a reply of one if successful.  Any attempt
              to get  information on the program and version  numbers that were
              just unregistered should fail.



       9.7.7  UUUUnnnnrrrreeeeggggiiiisssstttteeeerrrr oooonnnnllllyyyy rrrreeeeggggiiiisssstttteeeerrrreeeedddd pppprrrrooooggggrrrraaaammmm aaaannnndddd vvvveeeerrrrssssiiiioooonnnn nnnnuuuummmmbbbbeeeerrrrssss

       Call portmap and unregister a program and a version number  of  that
       program  that  have  been  previously  registered.   The program and
       version numbers should be the only ones registered.  The purpose  is
       to  check  if  portmap  correctly  handles  unregistering  the  last
       registered program.

       TYPE OF TEST:
              functional (PMAPPROC_UNSET)
       EXPECTED OUTPUT:
              Portmap should return a reply of one if successful.  Any attempt
              to get  information on the program and version  numbers that were
              just unregistered should fail.



       9.7.8  UUUUnnnnrrrreeeeggggiiiisssstttteeeerrrr pppprrrrooooggggrrrraaaammmm nnnneeeevvvveeeerrrr rrrreeeeggggiiiisssstttteeeerrrreeeedddd

       Call  portmap  and  unregister  a  program  that  has   never   been
       registered.

       TYPE OF TEST:
              functional (PMAPPROC_UNSET)
       EXPECTED OUTPUT:



       HP Internal Use Only           - 55 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



              Portmap should return a reply of zero, since it couldn't succeed.



       9.7.9  UUUUnnnnrrrreeeeggggiiiisssstttteeeerrrr vvvveeeerrrrssssiiiioooonnnn nnnneeeevvvveeeerrrr rrrreeeeggggiiiisssstttteeeerrrreeeedddd

       Call portmap and unregister a version that has never been registered
       of a registered program.

       TYPE OF TEST:
              functional (PMAPPROC_UNSET)
       EXPECTED OUTPUT:
              Portmap should return a reply of zero, since it couldn't succeed.



       9.7.10  AAAAccccqqqquuuuiiiirrrreeee iiiinnnnffffoooorrrrmmmmaaaattttiiiioooonnnn oooonnnn rrrreeeeggggiiiisssstttteeeerrrreeeedddd pppprrrrooooggggrrrraaaammmm////vvvveeeerrrrssssiiiioooonnnn nnnnuuuummmmbbbbeeeerrrrssss

       Call portmap and request information on a program number registered.
       We  should have the port number that was originally used to register
       the program with so that we can compare to the answer received  from
       portmap.

       TYPE OF TEST:
              functional (PMAPPROC_GETPORT)
       EXPECTED OUTPUT:
              Portmap  should  return a port number  equal to the port that was
              originally registered.



       9.7.11  AAAAccccqqqquuuuiiiirrrreeee iiiinnnnffffoooorrrrmmmmaaaattttiiiioooonnnn oooonnnn uuuunnnnkkkknnnnoooowwwwnnnn pppprrrrooooggggrrrraaaammmm nnnnuuuummmmbbbbeeeerrrr

       Call portmap  and  request  information  on  a  program  number  not
       registered.   This could be done maybe with "mount" if mountd is not
       registered.

       TYPE OF TEST:
              functional (PMAPPROC_GETPORT)
       EXPECTED OUTPUT:
              Portmap should return a port equal to zero.



       9.7.12  AAAAccccqqqquuuuiiiirrrreeee iiiinnnnffffoooorrrrmmmmaaaattttiiiioooonnnn  oooonnnn  uuuunnnnkkkknnnnoooowwwwnnnn  vvvveeeerrrrssssiiiioooonnnn  nnnnuuuummmmbbbbeeeerrrr  ooooffff  kkkknnnnoooowwwwnnnn
       pppprrrrooooggggrrrraaaammmm

       Call portmap and request  information  on  a  version  number  of  a
       registered program.  The program will be registered with a different
       version number.  This could be done maybe with "mount"  if  "mountd"
       is registered with a bogus version number.



       HP Internal Use Only           - 56 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       TYPE OF TEST:
              functional (PMAPPROC_GETPORT)
       EXPECTED OUTPUT:
              Right now it seems that  portmap  will return the port number for
              the program even if the versions don't match.  Possible bug.



       9.7.13  AAAAccccqqqquuuuiiiirrrreeee iiiinnnnffffoooorrrrmmmmaaaattttiiiioooonnnn oooonnnn aaaallllllll rrrreeeeggggiiiisssstttteeeerrrreeeedddd pppprrrrooooggggrrrraaaammmmssss////vvvveeeerrrrssssiiiioooonnnnssss

       Call portmap and request information on all registered programs.

       TYPE OF TEST:
              functional (PMAPPROC_DUMP)
       EXPECTED OUTPUT:

              Portmap  returns  a  list(?)  of all  registered  programs  as an
              structure.



       9.7.14  CCCCaaaallllllll pppprrrroooocccceeeedddduuuurrrreeee oooonnnn llllooooccccaaaallll mmmmaaaacccchhhhiiiinnnneeee

       This calls a procedure on the local machine that has been registered
       with  portmap.   This procedure is only supported for on rpc/udp and
       calls via rpc/udp.

       TYPE OF TEST:
              functional (PMAPPROC_CALLIT)
       EXPECTED OUTPUT:
              Portmap returns the remote call result.(?)



       9.7.15  CCCCaaaallllllll nnnnoooonnnneeeexxxxiiiisssstttteeeennnntttt pppprrrroooocccceeeedddduuuurrrreeee oooonnnn llllooooccccaaaallll mmmmaaaacccchhhhiiiinnnneeee

       This calls a procedure that doesn't exist on the local machine,  but
       has  been registered with portmap.  This service of the portmap DOES
       NOT complain if something goes wrong.  This is because the procedure
       is  written  to  support  broadcast  rpc  and the requester could be
       overrun with complaints at the expense of not hearing a valid reply.

       TYPE OF TEST:
              functional (PMAPPROC_CALLIT)
       EXPECTED OUTPUT:
              Portmap will not return anything.








       HP Internal Use Only           - 57 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.7.16  CCCCaaaallllllll pppprrrroooocccceeeedddduuuurrrreeee oooonnnn llllooooccccaaaallll mmmmaaaacccchhhhiiiinnnneeee wwwwiiiitttthhhh wwwwrrrroooonnnngggg vvvveeeerrrrssssiiiioooonnnn

       This calls a procedure that exists on the local machine but that has
       not been registered with this version number.

       TYPE OF TEST:
              functional (PMAPPROC_CALLIT)
       EXPECTED OUTPUT:
              Portmap will not return anything.



       9.7.17  CCCCaaaallllllll pppprrrroooocccceeeedddduuuurrrreeee nnnnooootttt rrrreeeeggggiiiisssstttteeeerrrreeeedddd oooonnnn llllooooccccaaaallll mmmmaaaacccchhhhiiiinnnneeee

       This calls a procedure that has not been registered with  the  local
       portmap.

       TYPE OF TEST:
              functional (PMAPPROC_CALLIT)
       EXPECTED OUTPUT:
              Portmap will not return anything.



       9.7.18  SSSSttttaaaarrrrtttt ttttwwwwoooo ppppoooorrrrttttmmmmaaaappppssss aaaatttt oooonnnncccceeee

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              This should fail.



       9.7.19  SSSSttttaaaarrrrtttt ppppoooorrrrttttmmmmaaaapppp wwwwiiiitttthhhhoooouuuutttt bbbbeeeeiiiinnnngggg ssssuuuuppppeeeerrrruuuusssseeeerrrr

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              This should fail.



       9.8  NNNNffffssssssssttttaaaatttt ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Nfsd displays statistical information about NFS and RPC.  It is also
       used to reinitialize this information.  The command line for nfsstat
       is:

                  nfsstat [ -csnrz ] [hp-ux]




       HP Internal Use Only           - 58 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       Most of this tests will probably be interactive tests.


       RESPONSIBLE ENGINEER: Cristina Mahon
       IMPLEMENT TIME:  0.5  md
       PERFORM TIME:    1.0  md



       9.8.1  NNNNffffssssssssttttaaaatttt wwwwiiiitttthhhh iiiinnnnccccoooorrrrrrrreeeecccctttt ooooppppttttiiiioooonnnn

       If nfsstat is invoked with an option other than c, s, n, r or  z  it
       will return an usage message.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              usage: nfsstat [-cnrsz] [hp-ux]



       9.8.2  NNNNffffssssssssttttaaaatttt wwwwiiiitttthhhh nnnnoooo ooooppppttttiiiioooonnnnssss

       Nfsstat with no options is equivalent to nfsstat -csnr.  It  returns
       information  about  both NFS and RPC clients and servers.  Perform a
       mount  of  a  remote  filesystem,  have  a  remote  system  mount  a
       filesystem  from  this  machine,  zero the statistics, do an ls of a
       remote directory and  have  the  remote  system  do  an  ls  of  the
       directory  it mounted from us.  These actions will modify the values
       for both the server and client information.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The expected output will have to be dependent in exactly
       what operations are performed between having the statistics
       checked.



       9.8.3  NNNNffffssssssssttttaaaatttt wwwwiiiitttthhhh ccccoooommmmbbbbiiiinnnnaaaattttiiiioooonnnn ooooffff ooooppppttttiiiioooonnnnssss

       The combinations of options are:

       -c: NFS and RPC client information,
       -s: NFS and RPC server information,
       -n: NFS client and server information,
       -r: RPC client and server information,
       -cs: client and server NFS and RPC information,
       -nr: NFS and RPC client and server information,
       -cn: NFS client information,



       HP Internal Use Only           - 59 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       -cr: RPC client information,
       -sn: NFS server information,
       -sr: RPC server information,
       -rsc: RPC server and client information,
       -nsc: NFS server and client information,
       -nrsc: NFS and RPC client and server information.

       Each one of this operation can be  tested  by  hand  based  on  some
       values  none  to be correct (for example, reading a remote directory
       should increment certain statistics).

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The expected output will have to be dependent in exactly
       what operations are performed between having the statistics
       checked.



       9.8.4  NNNNffffssssssssttttaaaatttt wwwwiiiitttthhhh ddddiiiiffffffffeeeerrrreeeennnntttt kkkkeeeerrrrnnnneeeellll

       Run nfsstat on a system that has been booted  from  a  kernel  other
       than   /hp-ux.   Doing  a  normal  nfsstat  without  specifying  the
       differnet kernel will return statistics for that  kernel  which  are
       probably zeros.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The correct statistics for whatever has happened on that
       system.



       9.8.5  NNNNffffssssssssttttaaaatttt ----zzzz

       Zero all statistics.  It will print  the  current  statistics,  then
       zero them.  If you do another nfsstat it will show zeros.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Zero statistics.



       9.8.6  NNNNffffssssssssttttaaaatttt wwwwiiiitttthhhh zzzz ooooppppttttiiiioooonnnn oooonnnn ssssuuuubbbbsssseeeettttssss

       Zero subsets of statistics.  It will print the  current  statistics,
       then  zero the subset.  If you do another nfsstat it will show zeros



       HP Internal Use Only           - 60 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       for that subset.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Zero statistics for that subset.



       9.8.7  NNNNffffssssssssttttaaaatttt ----zzzz wwwwiiiitttthhhhoooouuuutttt bbbbeeeeiiiinnnngggg ssssuuuuppppeeeerrrruuuusssseeeerrrr

       It will print an error message.

       TYPE OF TEST:
              functional (error checking)
       EXPECTED OUTPUT:
              Must be root to use z flag.



       9.8.8  NNNNffffssssssssttttaaaatttt wwwwiiiitttthhhhoooouuuutttt bbbbeeeeiiiinnnngggg ssssuuuuppppeeeerrrruuuusssseeeerrrr

       If /dev/kmem is not readable by everyone, which is the normal way we
       ship it, then we will get an error message to that effect.

       TYPE OF TEST:
              functional (error checking)
       EXPECTED OUTPUT:
              /dev/kmem: Permission denied.



       9.9  FFFFssssiiiirrrraaaannnndddd ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Fsirand installs random inode generation numbers on all  the  inodes
       on  the  specified  device  and also installs a filesystem ID in the
       superblock.  The command line for fsirand is:

                  fsirand [ -p ] device_name

       WARNING: Fsirand must be used only on an unmounted  filesystem  that
       has  been  checked  with fsck.  The only exception is that it can be
       used on the root filesystem in single-user mode, if  the  system  is
       immediately re-booted afterwards.

       Due to the high risk involved in using  this  command,  these  tests
       should probably be interactive tests.


       RESPONSIBLE ENGINEER: Cristina Mahon



       HP Internal Use Only           - 61 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    1.0  md



       9.9.1  FFFFssssiiiirrrraaaannnndddd ----pppp

       This should print the current inode, generation number pair.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              A list of inode generation numbers.



       9.9.2  FFFFssssiiiirrrraaaannnndddd wwwwiiiitttthhhhoooouuuutttt aaaarrrrgggguuuummmmeeeennnnttttssss

       This should print an usage message.

       TYPE OF TEST:
              functional (error checking)
       EXPECTED OUTPUT:
              "Usage: fsirand [-p] special"



       9.9.3  FFFFssssiiiirrrraaaannnndddd wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn ddddeeeevvvviiiicccceeee

       This should print an error message.

       TYPE OF TEST:
              functional (error checking)
       EXPECTED OUTPUT:
              "Cannot open <device>"



       9.9.4  FFFFssssiiiirrrraaaannnndddd wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn ooooppppttttiiiioooonnnn

       This should print an error message.

       TYPE OF TEST:
              functional (error checking)
       EXPECTED OUTPUT:
              "Cannot open <device>" where device is the unknown option.






       HP Internal Use Only           - 62 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.9.5  RRRRuuuunnnn ffffssssiiiirrrraaaannnndddd

       First run fsirand -p on that device and save the information.   Then
       run  fsirand  on that device and verify, through another fsirand -p,
       that the inode, generation pairs have changed. Make sure the disk is
       unmounted!

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The output of the second fsirand -p should be different from
       the first and the disk should be correct (an fsck should not detect
       any errors).



       9.10  GGGGeeeettttrrrrppppcccceeeennnntttt////ggggeeeettttrrrrppppccccbbbbyyyynnnnuuuummmmbbbbeeeerrrr////ggggeeeettttrrrrppppccccbbbbyyyynnnnaaaammmmeeee ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Getrpcent reads the next line of the file /etc/rpc opening the  file
       if  necessary.   Getrpcbyname and getrpcbynumber sequentially search
       from the beginning of the file until the matching rpc  program  name
       or  program  number  is  found,  or  until  EOF is encountered.  The
       formats of the routines are as follows:

       getrpcent()
       getrpcbyname(name)
       getrpcbynumber(number)


       The fields in /etc/rpc are the following:

       name of server for the rpc program
       program number
       aliases

       Make sure to use both spaces and tabs  between  the  fields  in  the
       file.

       RESPONSIBLE ENGINEER: Jason Zions
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    1.5  md



       9.10.1  DDDDoooommmmaaaaiiiinnnnnnnnaaaammmmeeee nnnnooootttt sssseeeetttt

       Getrpc* first finds out in what YP domain the machine  is  and  then
       proceeds to find the required information from a YP map.



       HP Internal Use Only           - 63 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              setrpcent: getdomainname system call missing



       9.10.2  CCCCaaaallllllll ggggeeeettttrrrrppppccccbbbbyyyynnnnuuuummmmbbbbeeeerrrr wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn pppprrrrooooggggrrrraaaammmm nnnnuuuummmmbbbbeeeerrrr

       We will have the same result whether Yellow Pages is up or not.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Returns NULL.



       9.10.3  GGGGeeeettttrrrrppppccccbbbbyyyynnnnuuuummmmbbbbeeeerrrr:::: ccccoooorrrrrrrreeeecccctttt pppprrrrooooggggrrrraaaammmm nnnnuuuummmmbbbbeeeerrrr aaaannnndddd YYYYPPPP

       Call getrpcbynumber with a correct program number and make sure  the
       Yellow  Pages  are  up and that /etc/rpc has been made into a Yellow
       Pages database.  The only Yellow Pages database  that  needs  to  be
       made for /etc/rpc is rpc.bynumber.(dir/pag).

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Getrpcbynumber  will  return  a  structure   containing  all  the
              information  related to that  program  number.  That is,  program
              name, program number and aliases.



       9.10.4  GGGGeeeettttrrrrppppccccbbbbyyyynnnnuuuummmmbbbbeeeerrrr:::: ccccoooorrrrrrrreeeecccctttt pppprrrrooooggggrrrraaaammmm nnnnuuuummmmbbbbeeeerrrr aaaannnndddd nnnnoooo YYYYPPPP

       Call getrpcbynumber with a correct program  number.  Make  sure  the
       Yellow  Pages  are  not running.  Getrpcbynumber will read the local
       /etc/rpc file.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Getrpcbynumber  will  return  a  structure   containing  all  the
              information  related to that  program  number.  That is,  program
              name, program number and aliases.








       HP Internal Use Only           - 64 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.10.5  GGGGeeeettttrrrrppppccccbbbbyyyynnnnuuuummmmbbbbeeeerrrr:::: ccccoooorrrrrrrreeeecccctttt pppprrrrooooggggrrrraaaammmm nnnnuuuummmmbbbbeeeerrrr,,,, YYYYPPPP,,,, nnnnoooo mmmmaaaapppp

       Call getrpcbynumber with a correct program  number.  Make  sure  the
       Yellow Pages are running, but that the Yellow Pages database for rpc
       was not created.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Getrpcbynumber will return a NULL.



       9.10.6  CCCCaaaallllllll ggggeeeettttrrrrppppccccbbbbyyyynnnnaaaammmmeeee wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn pppprrrrooooggggrrrraaaammmm nnnnaaaammmmeeee

       We will have the same result whether Yellow Pages is up or not.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Returns NULL.



       9.10.7  GGGGeeeettttrrrrppppccccbbbbyyyynnnnaaaammmmeeee:::: ccccoooorrrrrrrreeeecccctttt pppprrrrooooggggrrrraaaammmm nnnnaaaammmmeeee aaaannnndddd YYYYPPPP

       Call getrpcbyname with a correct program  name  and  make  sure  the
       Yellow  Pages  are  up and that /etc/rpc has been made into a Yellow
       Pages database.  The only Yellow Pages database  that  needs  to  be
       made for /etc/rpc is rpc.bynumber.(dir/pag).

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Getrpcbyname   will  return  a  structure   containing   all  the
              information related to that program name.  That is, program name,
              program number and aliases.



       9.10.8  GGGGeeeettttrrrrppppccccbbbbyyyynnnnaaaammmmeeee:::: ccccoooorrrrrrrreeeecccctttt pppprrrrooooggggrrrraaaammmm nnnnaaaammmmeeee aaaannnndddd nnnnoooo YYYYPPPP

       Call getrpcbynumber with a correct program  number.  Make  sure  the
       Yellow  Pages  are  not running.  Getrpcbynumber will read the local
       /etc/rpc file.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Getrpcbynumber  will  return  a  structure   containing  all  the
              information  related to that  program  number.  That is,  program



       HP Internal Use Only           - 65 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



              name, program number and aliases.



       9.10.9  GGGGeeeettttrrrrppppccccbbbbyyyynnnnaaaammmmeeee:::: ccccoooorrrrrrrreeeecccctttt pppprrrrooooggggrrrraaaammmm nnnnaaaammmmeeee,,,, YYYYPPPP,,,, nnnnoooo mmmmaaaapppp

       Call getrpcbyname with a correct program name. Make sure the  Yellow
       Pages  are  running,  but that the Yellow Pages database for rpc was
       not created.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Getrpcbyname will return a NULL.



       9.10.10  CCCCoooommmmmmmmeeeennnntttt lllliiiinnnneeee iiiinnnn ////eeeettttcccc////rrrrppppcccc

       Have an entry in /etc/rpc that has a comment as follows:

       #bogus    100016              bogusalias

       Then call getrpcbyname with bogus.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Getrpcbyname should return a NULL pointer.



       9.10.11  CCCCoooommmmmmmmeeeennnntttt aaaatttt eeeennnndddd ooooffff lllliiiinnnneeee iiiinnnn ////eeeettttcccc////rrrrppppcccc

       Have an entry in /etc/rpc that has a comment as follows:

       nfs 100003 nfsprog #bogus

       Then call getrpcbyname with bogus.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Getrpcbyname should return a NULL pointer.



       9.10.12  CCCCaaaallllllll ggggeeeettttrrrrppppccccbbbbyyyynnnnaaaammmmeeee wwwwiiiitttthhhh aaaannnn aaaalllliiiiaaaassss

       Have an entry in /etc/rpc as follows:




       HP Internal Use Only           - 66 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       nfs 100003 nfsprog

       Then call getrpcbyname with nfsprog.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Getrpcbyname  should return the structure  containing nfs, 100003
              and nfsprog.



       9.11  GGGGeeeetttt////sssseeeetttt////eeeennnnddddnnnneeeettttggggrrrreeeennnntttt ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Getnetgrent uses /etc/netgroup  to  return  the  next  member  of  a
       network group.  Setnetgrent establishes the network group from which
       getnetgrent  will  obtain  members  and  also  restarts   calls   to
       getnetgrent  from  the beginning of the list.  Endnetgrent frees the
       space allocated during the getnetgrent calls.  The  formats  of  the
       routines are as follows:

       getnetgrent(machine, user, domain)
       setnetgrent(netgroup)
       endnetgrent()


       RESPONSIBLE ENGINEER: Jason Zions
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    1.5  md



       9.11.1  CCCCaaaallllllll sssseeeettttnnnneeeettttggggrrrreeeennnntttt wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn nnnneeeettttggggrrrroooouuuupppp

       The file /etc/netgroup should  have  been  put  on  a  Yellow  Pages
       database.   The  netgroup  we call setnetgrent with should not be in
       /etc/netgroup.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Returns.



       9.11.2  CCCCaaaallllllll sssseeeettttnnnneeeettttggggrrrreeeennnntttt wwwwiiiitttthhhh ddddoooommmmaaaaiiiinnnnnnnnaaaammmmeeee nnnnooootttt sssseeeetttt

       Domainname should not be set on that machine.



       HP Internal Use Only           - 67 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "getnetgrent: getdomainname system call missing"
              I will change this message so that it actually says
              what it means, domainname not set.



       9.11.3  CCCCaaaallllllll sssseeeettttnnnneeeettttggggrrrreeeennnntttt wwwwiiiitttthhhh aaaa ccccyyyycccclllleeee iiiinnnn ////eeeettttcccc////nnnneeeettttggggrrrroooouuuupppp

       A cycle is when a network group  defines  itself  based  on  itself.
       That  is,  if  a member of the group uses the group itself as one of
       its fields.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "Cycle detected in /etc/netgroup: <groupname>."



       9.11.4  CCCCaaaallllllll sssseeeettttnnnneeeettttggggrrrreeeennnntttt wwwwiiiitttthhhh oooonnnnllllyyyy hhhhoooossssttttnnnnaaaammmmeeee ffffiiiieeeelllldddd

       Have an entry in /etc/netgroup as follows:

       group     (hostname)

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "syntax error in /etc/netgroup"
              "--- <group>"



       9.11.5  CCCCaaaallllllll sssseeeettttnnnneeeettttggggrrrreeeennnntttt wwwwiiiitttthhhh oooonnnnllllyyyy hhhhoooossssttttnnnnaaaammmmeeee,,,, uuuusssseeeerrrrnnnnaaaammmmeeee ffffiiiieeeelllldddd

       Have an entry in /etc/netgroup as follows:

       group     (hostname, username)

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "syntax error in /etc/netgroup"
              "--- <group>"







       HP Internal Use Only           - 68 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.11.6  CCCCaaaallllllll sssseeeettttnnnneeeettttggggrrrreeeennnntttt wwwwiiiitttthhhh nnnnoooo sssseeeeppppaaaarrrraaaattttiiiinnnngggg ccccoooommmmmmmmaaaassss

       Have an entry in /etc/netgroup as follows:

       group     (hostname username domainname)

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "syntax error in /etc/netgroup"
              "--- <group>"



       9.11.7  HHHHaaaavvvveeee aaaa ccccoooommmmmmmmeeeennnntttt oooonnnn ////eeeettttcccc////nnnneeeettttggggrrrroooouuuupppp

       Have a comment line on /etc/netgroup.  A comment line starts with  a
       '#'.   For  example,  if  the  comment  symbol  is  followed  by the
       definition of a group, make sure that that group is  never  actually
       defined.

       #commentgroup                 (hostname, username, domainname)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              If getnetgrent ask for commentgroup, such information should not
              exist.



       9.11.8  HHHHaaaavvvveeee aaaa ccccoooommmmmmmmeeeennnntttt oooonnnn eeeennnndddd ooooffff lllliiiinnnneeee

       Have a  comment  line  on  /etc/netgroup  at  the  end  of  a  group
       description.   A  comment  line starts with a '#'. The definition of
       the group should not be affected.

       group  (hostname, username, domainname) # (bogus, , nodomain)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              In this example the list of members on the group should not
              include the triplet after the comment.



       9.11.9  CCCCaaaallllllll sssseeeettttnnnneeeettttggggrrrreeeennnntttt wwwwiiiitttthhhh eeeemmmmppppttttyyyy ffffiiiieeeelllldddd

       Have an entry in /etc/netgroup with one of its  fields  empty,  like
       for example:



       HP Internal Use Only           - 69 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       group     (hostname, ,domainname)

       In this example all user should be members of that group.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              A null pointer should be returned for the username during
              a getnetgrent call.



       9.11.10  CCCCaaaallllllll sssseeeettttnnnneeeettttggggrrrreeeennnntttt ttttwwwwiiiicccceeee iiiinnnn aaaa rrrroooowwww

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Start form beginning of netgroup list again.  A getnetgrent
              call should return the first member of the group again.



       9.11.11  HHHHaaaavvvveeee aaaa ggggrrrroooouuuupppp wwwwiiiitttthhhh sssseeeevvvveeeerrrraaaallll ttttrrrriiiipppplllleeeettttssss

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Several getnetgrent calls for the same group should return all the
              members of the triplet.  That should be checked against the values
              stored in the Yellow Pages database.



       9.11.12  HHHHaaaavvvveeee ggggrrrroooouuuupppp tttthhhhaaaatttt ppppooooiiiinnnnttttssss ttttoooo aaaannnnooootttthhhheeeerrrr ggggrrrroooouuuupppp iiiinnnn ////eeeettttcccc////nnnneeeettttggggrrrroooouuuupppp

       Have entries in /etc/netgroup as follows:

       group     group1 group1  (hostname, username, domainname)

       Have blanks after group1.  This was a defect that we found.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Gtnetgrent should show hostname, username and domainname as
              part of group.








       HP Internal Use Only           - 70 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.11.13  HHHHaaaavvvveeee ccccyyyycccclllleeee iiiinnnn ////eeeettttcccc////nnnneeeettttggggrrrroooouuuupppp

       Have entries in /etc/netgroup as follows:

       group     group1 group1  group

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              This should give an error message.



       9.11.14  HHHHaaaavvvveeee aaaa ggggrrrroooouuuupppp mmmmiiiissssssssiiiinnnngggg aaaa cccclllloooosssseeee ppppaaaarrrreeeennnntttthhhheeeesssseeeessss iiiinnnn ////eeeettttcccc////nnnneeeettttggggrrrroooouuuupppp

       Have an entry in /etc/netgroup as follows:

       group     (hostname, username, domainname

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              This should give an error message.

       9.12  GGGGeeeettttrrrrppppccccppppoooorrrrtttt ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Getrpcport returns the port number  kept  by  portmap  for  a  given
       hostname,  program  number, version number and protocol.  The format
       of getrpcport is as follows:

       getrpcport(host, prognum, versnum, protocol)


       RESPONSIBLE ENGINEER: Jason Zions
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    1.5  md



       9.12.1  CCCCaaaallllllll ggggeeeettttrrrrppppccccppppoooorrrrtttt wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn hhhhoooosssstttt

       If getrpcport is called with an unknown host  (meaning  a  host  not
       listed in /etc/hosts, either kept by the Yellow Pages or locally) it
       will not be able to contact the host that contains  the  information
       requested.

       TYPE OF TEST:
              functional (error conditions testing)



       HP Internal Use Only           - 71 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       EXPECTED OUTPUT:
              Zero returned.



       9.12.2  CCCCaaaallllllll ggggeeeettttrrrrppppccccppppoooorrrrtttt wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn pppprrrrooooggggnnnnuuuummmm

       Getrpcport will call portmap (PMAPPROC_GETPORT) which will return  a
       zero since the program number is not registered with portmap.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Zero returned.



       9.12.3  CCCCaaaallllllll ggggeeeettttrrrrppppccccppppoooorrrrtttt wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn vvvveeeerrrrssssnnnnuuuummmm,,,, kkkknnnnoooowwwwnnnn pppprrrrooooggggnnnnuuuummmm

       This is what I think it should do:

       Getrpcport will call portmap (PMAPPROC_GETPORT) which will return  a
       zero since that version number is not registered with portmap.

       What it does though is return the port number of the program even if
       the version does not match.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:



       9.12.4  CCCCaaaallllllll ggggeeeettttrrrrppppccccppppoooorrrrtttt wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn pppprrrroooottttooooccccoooollll

       Getrpcport will call portmap (PMAPPROC_GETPORT) which will return  a
       zero  since  the  protocol  number is unknown to it (even though the
       program is registered under a different protocol).

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Zero returned.



       9.12.5  CCCCaaaallllllll ggggeeeettttrrrrppppccccppppoooorrrrtttt wwwwiiiitttthhhh aaaallllllll ppppaaaarrrraaaammmmeeeetttteeeerrrrssss kkkknnnnoooowwwwnnnn

       Getrpcport will call portmap (PMAPPROC_GETPORT)  which  will  return
       the  port number since all the parameters match a program registered
       with portmap.



       HP Internal Use Only           - 72 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Returns port that was originally registered with portmap for this
              program number, version number and protocol.

       9.13  IIIInnnnnnnneeeettttggggrrrr ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Innetgr returns a zero or a one depending  on  whether  the  network
       group contains the machine, user, domain triple as a member.  Any of
       the three strings machine, user, or domain can  be  NULL,  in  which
       case  it  signifies  a  wild  card.  The format of the routine is as
       follows:

       innetgr(netgroup, machine, user, domain)


       RESPONSIBLE ENGINEER: Jason Zions
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  2.0  md
       PERFORM TIME:    1.0  md



       9.13.1  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh ddddoooommmmaaaaiiiinnnnnnnnaaaammmmeeee nnnnooootttt sssseeeetttt

       Domainname should not be set on that machine.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "innetgr: getdomainname system call missing"
              I will change this message so that it actually says
              what it means, domainname not set.



       9.13.2  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh uuuunnnnkkkknnnnoooowwwwnnnn nnnneeeettttggggrrrroooouuuupppp

       The file /etc/netgroup should  have  been  put  on  a  Yellow  Pages
       database.   The  netgroup  we  call  innetgr  with  should not be in
       /etc/netgroup.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Returns zero.





       HP Internal Use Only           - 73 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.13.3  ////eeeettttcccc////nnnneeeettttggggrrrroooouuuupppp nnnnooootttt iiiinnnn YYYYPPPP

       The file /etc/netgroup will not have been put into  a  Yellow  Pages
       database.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              Returns zero.



       9.13.4  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh aaaa ccccyyyycccclllleeee iiiinnnn ////eeeettttcccc////nnnneeeettttggggrrrroooouuuupppp

       A cycle is when a network group  defines  itself  based  on  itself.
       That  is,  if  a member of the group uses the group itself as one of
       its fields.

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "innetgr: netgroup <netgroup> called recursively"



       9.13.5  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh oooonnnnllllyyyy hhhhoooossssttttnnnnaaaammmmeeee ffffiiiieeeelllldddd

       Have an entry in /etc/netgroup as follows:

       group     (hostname)

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "innetgr: syntax error in /etc/netgroup"



       9.13.6  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh oooonnnnllllyyyy hhhhoooossssttttnnnnaaaammmmeeee,,,, uuuusssseeeerrrrnnnnaaaammmmeeee ffffiiiieeeelllldddd

       Have an entry in /etc/netgroup as follows:

       group     (hostname, username)

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "innetgr: syntax error in /etc/netgroup"






       HP Internal Use Only           - 74 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.13.7  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh nnnnoooo sssseeeeppppaaaarrrraaaattttiiiinnnngggg ccccoooommmmmmmmaaaassss

       Have an entry in /etc/netgroup as follows:

       group     (hostname username domainname)

       TYPE OF TEST:
              functional (error conditions testing)
       EXPECTED OUTPUT:
              "innetgr: syntax error in /etc/netgroup"



       9.13.8  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh aaaallllllll iiiinnnnffffoooorrrrmmmmaaaattttiiiioooonnnn

       Have an entry  in  /etc/netgroup  with  all  its  fields,  like  for
       example:

       group     (hostname, username, domainname)

       Call innetgr as follows:

       innetgr(group, hostname, username, domainname)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.



       9.13.9  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh nnnnuuuullllllll hhhhoooossssttttnnnnaaaammmmeeee

       Have an entry  in  /etc/netgroup  with  all  its  fields,  like  for
       example:

       group     (hostname, username, domainname)

       Call innetgr as follows:

       innetgr(group, NULL, username, domainname)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.








       HP Internal Use Only           - 75 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.13.10  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh nnnnuuuullllllll uuuusssseeeerrrrnnnnaaaammmmeeee

       Have an entry  in  /etc/netgroup  with  all  its  fields,  like  for
       example:

       group     (hostname, username, domainname)

       Call innetgr as follows:

       innetgr(group, hostname, NULL, domainname)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.



       9.13.11  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh nnnnuuuullllllll ddddoooommmmaaaaiiiinnnnnnnnaaaammmmeeee

       Have an entry  in  /etc/netgroup  with  all  its  fields,  like  for
       example:

       group     (hostname, username, domainname)

       Call innetgr as follows:

       innetgr(group, hostname, username, NULL)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.



       9.13.12  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiitttthhhh aaaallllllll nnnnuuuullllllll ffffiiiieeeellllddddssss

       Have an entry  in  /etc/netgroup  with  all  its  fields,  like  for
       example:

       group     (hostname, username, domainname)

       Call innetgr as follows:

       innetgr(group, NULL, NULL, NULL)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.



       HP Internal Use Only           - 76 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.13.13  HHHHaaaavvvveeee ggggrrrroooouuuupppp wwwwiiiitttthhhh mmmmoooorrrreeee tttthhhhaaaannnn oooonnnneeee ttttrrrriiiipppplllleeeetttt

       Have an entry  in  /etc/netgroup  with  all  its  fields,  like  for
       example:

       group     (hostname, username, domainname) (host1, user1, domain1)

       Call innetgr as follows:

       innetgr(group, host1, user1, domain1)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.



       9.13.14  HHHHaaaavvvveeee ggggrrrroooouuuupppp wwwwiiiitttthhhh ssssppppaaaacccceeeessss bbbbeeeettttwwwweeeeeeeennnn tttthhhheeee hhhhoooossssttttnnnnaaaammmmeeee,,,,  uuuusssseeeerrrrnnnnaaaammmmeeee  aaaannnndddd
       ddddoooommmmaaaaiiiinnnnnnnnaaaammmmeeee

       Have an entry in /etc/netgroup as follows:

       group     (  hostname , - , domainname )

       Call innetgr as follows:

       innetgr(group, hostname, NULL, NULL)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.



       9.13.15  HHHHaaaavvvveeee ggggrrrroooouuuupppp tttthhhhaaaatttt ppppooooiiiinnnnttttssss ttttoooo aaaannnnooootttthhhheeeerrrr ggggrrrroooouuuupppp

       Have entries in /etc/netgroup as follows:

       group     group1 group1    (hostname, username, domainname)

       Call innetgr as follows:

       innetgr(group, NULL, NULL, NULL)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.




       HP Internal Use Only           - 77 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.13.16  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiillllllll NNNNUUUULLLLLLLL  uuuusssseeeerrrrnnnnaaaammmmeeee,,,,  bbbbuuuutttt  wwwwiiiitttthhhh  hhhhoooossssttttnnnnaaaammmmeeee  aaaannnndddd
       ddddoooommmmaaaaiiiinnnnnnnnaaaammmmeeee

       Have an entry in /etc/netgroup as follows:

       group     (hostname, username, domainname)

       Call innetgr as follows:

       innetgr(group, hostname, NULL, domainname)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.



       9.13.17  CCCCaaaallllllll iiiinnnnnnnneeeettttggggrrrr wwwwiiiillllllll ggggrrrroooouuuupppp mmmmiiiissssssssiiiinnnngggg cccclllloooosssseeee ppppaaaarrrreeeennnntttthhhheeeesssseeeessss

       Have an entry in /etc/netgroup as follows:

       group     (hostname, username, domainname

       Call innetgr as follows:

       innetgr(group, hostname, username, domainname)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Innetgr should return a one.

       9.14  RRRRuuuusssseeeerrrrooookkkk ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Ruserok is  a  routine  used  by  servers  to  authenticate  clients
       requesting  service with rcmd .  Ruserok takes a remote host's name,
       as returned by a gethostent routine,  two  user  names  and  a  flag
       indicating  if  the  local  user's  name is the super-user.  It then
       checks the files /etc/hosts.equiv  and,  possibly,  .rhosts  in  the
       current working directory (normally the local user's home directory)
       to see if the request for service is allowed. Ruserok returns a 0 if
       the  name is listed in /etc/hosts.equiv, or the host and remote user
       name are found in $HOME/.rhosts; otherwise ruserok returns  -1.   If
       the  superuser flag is set, /etc/host.equiv is bypassed.  The format
       for ruserok is:

       ruserok(rhost, superuser, ruser, luser)





       HP Internal Use Only           - 78 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       This testplan does not intend to verify the  full  functionality  of
       ruserok.   For  that  there are already tests that the group SMELTER
       will run on the modified version of ruserok.  Rather, this  testplan
       intends  to  test  the added functionality provided by NFS.  In this
       case the added functionality involves allowing netgroups to be  used
       in /etc/hosts.equiv and ~/.rhosts and making sure that ruserok knows
       how to deal with those groups.

       Because these tests modify system wide files they probably cannot be
       run  in  parallel  or  with other tests.  It might be better to have
       them automated but run them by hand, that is not as part of the full
       testsuite.
       RESPONSIBLE ENGINEER: Jason Zions
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    0.5  md



       9.14.1  AAAAlllllllloooowwww nnnneeeettttggggrrrroooouuuupppp iiiinnnn ////eeeettttcccc////hhhhoooossssttttssss....eeeeqqqquuuuiiiivvvv

       Have an entry in /etc/hosts.equiv as follows:

       +@netgroup

       where netgroup is defined in /etc/netgroup as:

       netgroup   (host1,  user1,   domainname)   (host2,   ,   domainname)
       Domainname  should  be  the  current  domainname.  Ruserok should be
       invoked as follows:

       ruserok(host1, 0, user, user)

       and host1 should not be listed explicitly in /etc/hosts.equiv.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Ruserok should return a zero.



       9.14.2  AAAAlllllllloooowwww nnnneeeettttggggrrrroooouuuupppp iiiinnnn ~~~~////....rrrrhhhhoooossssttttssss

       Have an entry in ~/.rhosts as follows:

       +@netgroup user2

       where netgroup is defined in /etc/netgroup as:




       HP Internal Use Only           - 79 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       netgroup   (host1,  user1,   domainname)   (host2,   ,   domainname)
       Domainname  should  be  the  current  domainname.  Ruserok should be
       invoked as follows:

       ruserok(host2, 0, user2, user)

       and  host2  or  netgroup  should  not  be   listed   explicitly   in
       /etc/hosts.equiv.    Host2   should  not  be  listed  explicitly  in
       ~/.rhosts.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Ruserok should return a zero.



       9.14.3  DDDDeeeennnnyyyy nnnneeeettttggggrrrroooouuuupppp iiiinnnn ////eeeettttcccc////hhhhoooossssttttssss....eeeeqqqquuuuiiiivvvv

       Have an entry in /etc/hosts.equiv as follows:

       -@netgroup

       where netgroup is defined in /etc/netgroup as:

       netgroup   (host1,  user1,   domainname)   (host2,   ,   domainname)
       Domainname  should  be  the  current  domainname.  Ruserok should be
       invoked as follows:

       ruserok(host1, 0, user, user)

       and host1 should not be listed explicitly in /etc/hosts.equiv.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Ruserok should return a one.



       9.14.4  DDDDeeeennnnyyyy nnnneeeettttggggrrrroooouuuupppp iiiinnnn ~~~~////....rrrrhhhhoooossssttttssss

       Have an entry in ~/.rhosts as follows:

       -@netgroup user2

       where netgroup is defined in /etc/netgroup as:

       netgroup   (host1,  user1,   domainname)   (host2,   ,   domainname)
       Domainname  should  be  the  current  domainname.  Ruserok should be
       invoked as follows:



       HP Internal Use Only           - 80 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       ruserok(host2, 0, user2, user)

       and  host2  or  netgroup  should  not  be   listed   explicitly   in
       /etc/hosts.equiv.    Host2   should  not  be  listed  explicitly  in
       ~/.rhosts.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Ruserok should return a one.



       9.14.5  AAAAlllllllloooowwww nnnneeeettttggggrrrroooouuuupppp ffffoooolllllllloooowwwweeeedddd bbbbyyyy nnnneeeettttggggrrrroooouuuupppp iiiinnnn ~~~~////....rrrrhhhhoooossssttttssss

       Have an entry in ~/.rhosts as follows:

       +@netgroup +@netgroup1

       where netgroup and netgroup1 are defined in /etc/netgroup as:

       netgroup  (host1, user1, domainname) (host2, , domainname)
       netgroup1  ( , user, domainname)

       Domainname should be the  current  domainname.   Ruserok  should  be
       invoked as follows:

       ruserok(host1, 0, user, user)

       and  host1  or  netgroup  should  not  be   listed   explicitly   in
       /etc/hosts.equiv.    Host1   should  not  be  listed  explicitly  in
       ~/.rhosts.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Ruserok should return a zero.



       9.14.6  DDDDeeeennnnyyyy nnnneeeettttggggrrrroooouuuupppp ffffoooolllllllloooowwwweeeedddd bbbbyyyy nnnneeeettttggggrrrroooouuuupppp iiiinnnn ~~~~////....rrrrhhhhoooossssttttssss

       Have an entry in ~/.rhosts as follows:

       +@netgroup -@netgroup1

       where netgroup and netgroup1 are defined in /etc/netgroup as:

       netgroup  (host1, user1, domainname) (host2, , domainname)
       netgroup1  ( , user, domainname)




       HP Internal Use Only           - 81 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       Domainname should be the  current  domainname.   Ruserok  should  be
       invoked as follows:

       ruserok(host1, 0, user, user)

       and  host1  or  netgroup  should  not  be   listed   explicitly   in
       /etc/hosts.equiv.    Host1   should  not  be  listed  explicitly  in
       ~/.rhosts.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Ruserok should return a one.



       9.14.7  AAAAlllllllloooowwww aaaallllllll iiiinnnn ~~~~////....rrrrhhhhoooossssttttssss

       Have an entry in ~/.rhosts as follows:

       + +

       Invoke ruserok as follows:

       ruserok(host1, 0, user, user)

       Host1 should not be listed explicitly in /etc/hosts.equiv.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Ruserok should return a zero.



       9.14.8  AAAAlllllllloooowwww aaaallllllll iiiinnnn ////eeeettttcccc////hhhhoooossssttttssss....eeeeqqqquuuuiiiivvvv

       Have an entry in /etc/hosts.equiv as follows:

       +

       Invoke ruserok as follows:

       ruserok(host1, 0, user, user)

       Host1 should not be listed explicitly in /etc/hosts.equiv.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Ruserok should return a zero.



       HP Internal Use Only           - 82 -                        2/11/88







       NFS System Test Plan                                  Commands (NFS)



       9.14.9  DDDDeeeennnnyyyy hhhhoooosssstttt1111 iiiinnnn ////eeeettttcccc////hhhhoooossssttttssss....eeeeqqqquuuuiiiivvvv

       Have an entry in /etc/hosts.equiv as follows:

       -host1

       Invoke ruserok as follows:

       ruserok(host1, 0, user, user)

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              Ruserok should return a one.








































       HP Internal Use Only           - 83 -                        2/11/88







       NFS System Test Plan                                    Connectivity



       10.  CCCCoooonnnnnnnneeeeccccttttiiiivvvviiiittttyyyy ((((DDDDaaaannnn SSSSiiiimmmmuuuullllaaaa))))


       This section of the system  test  plan  addresses  the  connectivity
       requirements   of   the  NFS  product.   The  specific  connectivity
       requirements are described in the NFS Product Requirements  Document
       [1].

       NFS connectivity is  defined  as  "the  fully  functional,  reliable
       exchange  of data, commands, control information and results between
       an NFS client process and an NFS server process."   The  client  and
       server  processes  may reside separately on one of many multi-vendor
       NFS systems and must operate reliably regardless  of  system  loads,
       network   loads,   or   relative   performance   differences.    NFS
       connectivity addresses all functional aspects  of  the  NFS  product
       including remote file system operations, the YP services, the PC-NFS
       daemon, and associated NFS/RPC user commands.

       In order to demonstrate NFS connectivity, a connectivity test  suite
       will  be  run  bi-directionally  between  a  Model  9K  system and a
       selected target system.  The connectivity test suite will consist of
       functional  tests  for  commands  (section  1  of the HP-UX manual),
       system  calls  (section  2),  libraries   (section   3),   and   the
       mount/umount  commands  (section  1M).  The tests will be run for an
       extended period of time (i.e., 24 hours nonstop),  and  will  be  be
       highly leveraged from the following groups of tests;

                                     o the RFA-NFS functional tests,
                                     o the Sun NFS connectivity test suite,
                                     o the SSO HP-UX/Diskless test suite,
                                     o the s300/800 file system tests, and
                                     o NFS functional tests developed by
                                       the Nerfs project group.


       If test cases exist that are not addressed by the  leveraged  tests,
       original  tests  will  be designed and written to address those test
       cases.

       The connectivity test suite will reside in the NFS scaffold and will
       rely  on the scaffold environment for its execution environment.  In
       the event that a target  system  cannot  support  the  NFS  scaffold
       (e.g.,  VAX/VMS  systems,  Vectra  (PC)),  manual  methods  will  be
       employed to execute an equivalent battery of tests.

       Each of the following sub-sections addresses a specific multi-vendor
       NFS  system.   In  the  event  that  the target system only supports
       client capabilities or server capabilities,  the  connectivity  test
       suite will only be exercised uni-directionally.

           RESPONSIBLE ENGINEER: Steve Booth



       HP Internal Use Only           - 84 -                        2/11/88







       NFS System Test Plan                                    Connectivity



           IMPLEMENT TIME:  5.0  md
                   Effort required for initial setup of the connectivity
                   suite.

           DEPENDENCIES:
                   1) availability of test systems for dedicated use.
                   2) availability of all functional tests.


           ISSUES:



       10.1  SSSSuuuunnnn ssssyyyysssstttteeeemmmmssss


       Sun Micro Systems, Inc. has set the industry  standard  for  network
       file systems.  The NFS product must be tested against the two latest
       major releases of Sun's NFS product ([1] section 1.4.1).  Since  Sun
       systems  define  the standard, Sun connectivity testing will be done
       first.  Once connectivity is verified to the Sun systems, the  other
       multi-vendor implementations will be tested.

       To test basic connectivity, the  test  suite  will  be  run  between
       comparable  systems (i.e., comparable SPU performance, disk capacity
       and performance, and system load). An example of comparable  systems
       would  be  an  HP330  w/7945  and a SUN3/160.  In order to establish
       basic connectivity, the connectivity test  suite  must  be  run  bi-
       directionally  between  the  two  systems  for  a period of 24 hours
       without error.   Once  basic  connectivity  is  established  between
       comparable systems, systems with dissimilar performance capabilities
       will be tested against one another (e.g., s310 vs Sun3/260 and  s350
       vs Sun2/150). Since basic connectivity has already been established,
       the connectivity test suite will be run for only  12  hours  between
       the dissimilar systems to verify full connectivity.


           RESPONSIBLE ENGINEER: Steve Booth
           DEPENDENCIES:
               1) availability of Sun test systems for dedicated use.

           ISSUES:




       10.1.1  SSSSuuuunnnn rrrreeeelllleeeeaaaasssseeee 3333....2222


           IMPLEMENT TIME:  0.0  md
           PERFORM TIME:   15.0  md



       HP Internal Use Only           - 85 -                        2/11/88







       NFS System Test Plan                                    Connectivity



           TYPE OF TEST: connectivity test suite
           EXPECTED OUTPUT: successful test suite completion



       10.1.1.1  _C_o_m_p_a_r_a_b_l_e__S_y_s_t_e_m_s

       The first part of testing HP to Sun  connectivity  is  to  test  for
       basic connectivity between comparable systems.

       Run the connectivity test suite  bi-directionally  between  the  two
       comparable   systems   simultaneously.   The  test  suite  must  run
       continuously for a period of 24 hours without error.


                 ________                       ________
                |        |  -----------------> |        |
                |  9K    |       24 hours      |  Sun   |
                |        |  <----------------- |        |
                 --------                       --------

                           comparable systems





       10.1.1.2  _H_i_g_h_-_e_n_d__H_P__s_y_s_t_e_m__v_s__l_o_w_-_e_n_d__S_u_n__s_y_s_t_e_m

       This test case tests connectivity between  systems  with  dissimilar
       system  capabilities.   Testing connectivity between dislike systems
       will identify areas of timing-related  connectivity  problems.   The
       test  is  run  between a high-end HP system (e.g., s350 w/7914, s840
       w/7935) and a low-end Sun system (e.g.,  Sun  2/150  w/71Mbyte  SCSI
       disk).

       Perform the same tests  as  were  executed  between  the  comparable
       systems.  The  test  suite  must run continuously for a period of 12
       hours without error.


                 ________                       ________
                |        |  -----------------> |        |
                |   9K   |     12 hours        |  Sun   |
                |        |  <----------------- |  2/150 |
                 --------                       --------

               high-end system                low-end system






       HP Internal Use Only           - 86 -                        2/11/88







       NFS System Test Plan                                    Connectivity



       10.1.1.3  _L_o_w_-_e_n_d__H_P__s_y_s_t_e_m__v_s__h_i_g_h_-_e_n_d__S_u_n__s_y_s_t_e_m

       This test case  tests  connectivity  between  systems  with  dislike
       system  capabilities.   Testing connectivity between dislike systems
       will identify areas of timing-related  connectivity  problems.   The
       test  is  run  between a low-end HP system (e.g., s310 w/7945) and a
       high-end Sun system (e.g., Sun 3/260 w/181Mbyte SCSI disk).

       Perform the same tests  as  were  executed  between  the  comparable
       systems.  The  test  suite  must run continuously for a period of 12
       hours without error.


                 ________                       ________
                |        |  -----------------> |        |
                |  HP    |     12 hours        |  Sun   |
                |        |  <----------------- |  3/260 |
                 --------                       --------

               low-end system                 high-end system




       10.1.2  SSSSuuuunnnn rrrreeeelllleeeeaaaasssseeee 3333....0000

       Perform the same test as described for  the  Sun  3.2  release  (see
       previous section).

                IMPLEMENT TIME:  0.0  md
                PERFORM TIME:   15.0  md
                TYPE OF TEST: connectivity test suite
                EXPECTED OUTPUT: successful test suite completion



       10.2  VVVVAAAAXXXX////VVVVMMMMSSSS ssssyyyysssstttteeeemmmmssss


       Currently, VAX/VMS systems only  provide  NFS  server  capabilities.
       Therefore,  the  connectivity  test  suite  need  only  be  run uni-
       directionally to establish connectivity.  Since VAX/VMS  systems  do
       not  support  the  YP  services,  the  PC-NFS  daemon or many of the
       associated NFS/RPC commands,  only a subset of the connectivity test
       suite  will  be  run.   This  subset will be run continuously for 24
       hours without error.

           RESPONSIBLE ENGINEER: Jason Zions
           ASSUMPTIONS:
               YP tests exist in their own directory under
               the nfs subdirectory.



       HP Internal Use Only           - 87 -                        2/11/88







       NFS System Test Plan                                    Connectivity



           DEPENDENCIES:
               Acquisition of the Wollongong NFS software.
               Access to the VAX/VMS system (NTC).
           ISSUES:




       10.2.1  WWWWoooolllllllloooonnnnggggoooonnnngggg''''ssss NNNNFFFFSSSS pppprrrroooodddduuuucccctttt ((((sssseeeerrrrvvvveeeerrrr oooonnnnllllyyyy))))



                IMPLEMENT TIME:  0.0  md
                PERFORM TIME:   10.0  md
                TYPE OF TEST:
                       Connectivity test suite excluding tests for the
                       YP services, the PC-NFS daemon, and the associated
                       NFS/RPC commands.

                EXPECTED OUTPUT:
                       Successful completion of the connectivity test suite.



                 ________                       ________
                |        |       24 hours      |        |
                |  9K    |  -----------------> |  VAX/  |
                |        |                     |  VMS   |
                 --------                       --------

                  HP NFS                 VAX/VMS w/ Wollongong NFS
                                           (server only system)




       10.3  HHHHPPPP VVVVeeeeccccttttrrrraaaa


       NFS capabilities are provided for the HP Vectra (PC) system by Sun's
       PC-NFS product.  This product provides client-only capabilities.  To
       establish NFS connectivity between the HP Vectra and the Model  9000
       NFS  systems,  tests  equivalent  to  those in the connectivity test
       suite will be run from the Vectra to a  Model  9000  target  system.
       Since  the  Vectra  cannot  support  the  NFS  scaffold environment,
       equivalent tests will have to be designed, coded and tested  by  the
       individual  responsible  for testing connectivity to the Vectra.  If
       possible, test suites which currently exist for the PC will be  used
       to expedite the process.





       HP Internal Use Only           - 88 -                        2/11/88







       NFS System Test Plan                                    Connectivity



           RESPONSIBLE ENGINEER: Marie Dotts
           ASSUMPTION:
               The PC section will perform all Vectra - NFS testing.
               The original efforts estimates for this task were
               30 days for implementation of the test suite and 20
               days for the actual connectivity testing.

           DEPENDENCIES:
               1) available PC test suites from section II.

           ISSUES:
               1) Investigate the PC test suite(s) to determine
                  usability in HPUX/NFS to PC connectivity testing.




       10.3.1  SSSSuuuunnnn''''ssss PPPPCCCC----NNNNFFFFSSSS pppprrrroooodddduuuucccctttt ((((cccclllliiiieeeennnntttt oooonnnnllllyyyy))))



                IMPLEMENT TIME:  0.0  md
                PERFORM TIME:    0.0  md
                TYPE OF TEST:
                       Connectivity tests equivalent to the tests in the
                       connectivity test suite.
                EXPECTED OUTPUT:
                       Successful completion of the equivalent tests.


                 ________                       ________
                |        |                     |        |
                | Vectra |  -----------------> |  9K    |
                |        |                     |        |
                 --------                       --------

           HP Vectra / MS-DOS                    HPUX
             running PC-NFS                 running pcnfsd(1m)





       10.4  HHHHPPPP----UUUUXXXX DDDDiiiisssskkkklllleeeessssssss ssssyyyysssstttteeeemmmmssss


       Multiple configurations of diskless systems will be tested to verify
       connectivity  between NFS systems and diskless nodes. As with multi-
       vendor  connectivity  testing,  connectivity  will  be  verified  by
       running  the  connectivity  test  suite  continuously  for  24 hours
       without error.



       HP Internal Use Only           - 89 -                        2/11/88







       NFS System Test Plan                                    Connectivity



           RESPONSIBLE ENGINEER: Dan Simula
           ASSUMPTION:
               SSO is responsible for all NFS-Diskless testing except the
               basic connectivity testing described in this previous section.

           DEPENDENCIES:
               1) Availability of HP-UX 6.0 / diskless systems.
               2) Availability of a Model 9000 diskless node.

           ISSUES:

       In addition to basic connectivity, special cases exist that  involve
       system   interactions   between   the   NFS   and   HP-UX   Diskless
       implementations.  The following testing areas  cover  these  special
       cases  and will be tested by SSO.  For a detailed description of the
       testing areas, test cases, and testing scenarios, see  "NFS  -  HPUX
       Diskless:Interactions and Testing Scenarios" [5].

       Testing Areas

           1) File system mounts (NFS vs diskless)

           2) Guaranteed single system view within a diskless cluster

           3) Synchronization of NFS and HP-UX diskless file system cacheing

           4) Guaranteed file consistency throughout a diskless cluster




       10.4.1  HHHHPPPP----UUUUXXXX 6666....0000 rrrruuuunnnnnnnniiiinnnngggg aaaassss aaaa ddddiiiisssscccclllleeeessssssss nnnnooooddddeeee ((((ccccoooonnnnffffiiiigggg IIII))))


       For the first discless configuration, the discless node will  use  a
       server  that is different from the NFS server system (i.e., requires
       3 systems; 1 - discless node, 1 - HPUX/discless  server  system  and
       one  NFS  server system).  As with all previous tests involving both
       client and server capabilities, the  test  suite  will  be  run  bi-
       directionally between the target systems simultaneously.


                IMPLEMENT TIME:  0.0  md
                PERFORM TIME:   10.0  md
                TYPE OF TEST:
                       connectivity test suite
                EXPECTED OUTPUT:
                       Successful completion of test suite.






       HP Internal Use Only           - 90 -                        2/11/88







       NFS System Test Plan                                    Connectivity



               Diskless node                 NFS server system
                 ________                       ________
                |        |  -----------------> |        |
                |  9K    |      24 hours       |  9K    |
                |        |  <----------------- |        |
                 --------                       --------
                    ^
                    |           ________
                    |          |        |
                    +--------> |  9K    |
                               |        |
                                --------

                         HP-UX / Diskless server





       10.4.2  HHHHPPPP----UUUUXXXX 6666....0000 rrrruuuunnnnnnnniiiinnnngggg aaaassss aaaa ddddiiiisssscccclllleeeessssssss nnnnooooddddeeee ((((ccccoooonnnnffffiiiigggg IIIIIIII))))



       In the second configuration, a single system will act both as the
       HP-UX/discless server and as the NFS server.

                IMPLEMENT TIME:  0.0  md
                PERFORM TIME:   10.0  md
                TYPE OF TEST:
                       connectivity test suite
                EXPECTED OUTPUT:
                       successful completion of the test suite



             NFS server/client              NFS server/client
               Diskless node                 Diskless server
                 ________                       ________
                |        |  -----------------> |        |
                |  9K    |       24 hours      |  9K    |
                |        |  <----------------- |        |
                 --------                       --------
                    ^                              ^
                    |        HP-UX Diskless        |
                    +------------------------------+









       HP Internal Use Only           - 91 -                        2/11/88







       NFS System Test Plan                                    Connectivity



       10.5  VVVVAAAAXXXX////UUUUNNNN****XXXX ssssyyyysssstttteeeemmmmssss


       VAX/UN*X systems also support NFS capabilities.  Mt.  Xinu  provides
       an  NFS  product  for  4.3 BSD systems and DEC supports NFS on their
       VAX/ULTRIX  systems.   Both  of  these  products  provide  full  NFS
       capabilities.

       According to the  Product  Requirements  Document,  connectivity  to
       these  systems  are  listed  as a HIGH WANT.  Given current schedule
       pressure, connectivity testing to these systems is highly  unlikely.
       Testing will only be done if the schedule allows.


           RESPONSIBLE ENGINEER: Jeff Elison
           DEPENDENCIES:
               1) MT.Xinus's NFS product
               2) DEC VAX/ULTRIX
           ISSUES:
               1) This testing will NOT be done due to lack of time
                  and resources.

               2) Actual time to complete connectivity to these systems
                  would be approximately 10.0 md per system.




       10.5.1  MMMMtttt XXXXiiiinnnnuuuu''''ssss NNNNFFFFSSSS pppprrrroooodddduuuucccctttt ffffoooorrrr 4444....3333BBBBSSSSDDDD ssssyyyysssstttteeeemmmmssss

           IMPLEMENT TIME:  0.0  md
           PERFORM TIME:    0.0  md

           TYPE OF TEST:
               connectivity test suite

           EXPECTED OUTPUT:
               Successful completion of the test suite.



       10.5.2  VVVVAAAAXXXX////UUUULLLLTTTTRRRRIIIIXXXX NNNNFFFFSSSS pppprrrroooodddduuuucccctttt

           IMPLEMENT TIME:  0.0  md
           PERFORM TIME:    0.0  md
           TYPE OF TEST:
               connectivity test suite
           EXPECTED OUTPUT:
               Successful completion of the test suite.





       HP Internal Use Only           - 92 -                        2/11/88







       NFS System Test Plan                                    Connectivity



       10.6  MMMMuuuullllttttiiiipppplllleeee YYYYPPPP ddddoooommmmaaaaiiiinnnnssss////ssssiiiinnnngggglllleeee sssseeeerrrrvvvveeeerrrr


       Yellow Pages allows for a single  machine  to  service  multiple  YP
       domains.   In  the  following  test  scenarios, the functional tests
       should be  run  for  12  hours  with  no  failures  attributable  to
       incorrectly-forwarded   YP   messages;   YP-connectivity  should  be
       maintained.  The scenario requires an HP machine to be  the  server;
       however,  useful comparative information might be obtained by (also)
       running a SUN as the server.


           RESPONSIBLE ENGINEER:
           DEPENDENCIES:
               1) 2 HP machines (+2 for setup note 2b)
               2) one SUN machine
           PERFORM TIME:    5.0  md
           ASSUMPTIONS: functional tests are working (e.g. debugged)
           SETUP NOTES:
               1) the server machine should be setup to service 2 domains,
                  domain X and domain Y
               2) try the server machine with 3 scenarios:
                  a.  server is the "master" machine for both domains
                  b.  server is a "slave" machine for both domains
                  a.  server is the master machine for domain X, and
                      a slave for domain Y
               3) run the functional tests bidirectionally between the
                  non-server nodes

                       ------------------------------------------
                       |                                        |
                       |                                        v
                  ------------        ------------         ------------
                  |          |        |          |         |          |
                  | machine A|        | YP server|         | machine B|
                  | in domain|<-------| for both |-------->| in domain|
                  | X        |        | domains  |         | Y        |
                  | HP node  |        | X and Y  |         | SUN node |
                  |          |        | HP node  |         |          |
                  |          |        |          |         |          |
                  ------------        ------------         ------------
                       ^                                        |
                       |                                        |
                       ------------------------------------------










       HP Internal Use Only           - 93 -                        2/11/88







       NFS System Test Plan                                 Cross-Services



       11.  CCCCrrrroooossssssss----SSSSeeeerrrrvvvviiiicccceeeessss TTTTeeeessssttttssss ((((JJJJiiiimmmm HHHHuuuunnnntttteeeerrrr))))



       11.1  NNNNFFFFSSSS////RRRRFFFFAAAA CCCCrrrroooossssssss----SSSSeeeerrrrvvvviiiicccceeeessss DDDDiiiissssccccuuuussssssssiiiioooonnnn ((((JJJJiiiimmmm HHHHuuuunnnntttteeeerrrr))))

       11.1.1  IIIInnnnttttrrrroooodddduuuuccccttttiiiioooonnnn

       The objective of the NFS/RFA cross  services  tests  is  to  isolate
       defects  peculiar  to  NFS  and  RFA interactions which would not be
       found through other testing processes.



       11.1.2  SSSSccccooooppppeeee ooooffff tttthhhheeee tttteeeessssttttssss

       The success or failure of the tests will  be  determined  using  the
       following criteria outlined below and if appropriate, an analysis of
       the end state of the system.


          o+ The system should not crash or hang.

          o+ The integrity of both services should be preserved.



       11.1.3  IIIImmmmpppplllleeeemmmmeeeennnnttttaaaattttiiiioooonnnn GGGGooooaaaallllssss

            In order to implement the model outlined above,  the  following
            are identified as desirable goals:

          o+ Ability to measure results and detect failures.

          o+ Flexibility to integrate with the scaffold.



       11.2  RRRRFFFFAAAA ---->>>> NNNNFFFFSSSS


       The time estimates to perform  the  following  tests  are  based  on
       executing the test once.

       RESPONSIBLE ENGINEER: Paul Van Farowe
       DEPENDENCY: Server changes to RFA have been made and tested.
       ISSUE: Will the RFA changes be allowed in the real code.

       The following node configuration will be used:





       HP Internal Use Only           - 94 -                        2/11/88







       NFS System Test Plan                                 Cross-Services



                  ----------          ----------          ----------
                 | NODE A  |          | NODE B |          | NODE C |
                  ----------          ----------          ----------

                  netunam /net/B      mount C:/ /mnt




       11.2.1  SSSSeeeerrrriiiieeeessss 3333xxxxxxxx

       Run one instance of RFA functional tests continuously for  24  hours
       from  node  A through the NFS mount point on node B to a file system
       on node C.  Node A  should  be  a  series  300.   All  tests  should
       complete with no errors.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    1.0  md



       11.2.2  SSSSeeeerrrriiiieeeessss 5555xxxxxxxx

       Run one instance of RFA functional tests continuously for  24  hours
       from  node  A through the NFS mount point on node B to a file system
       on node C.  Node A  should  be  a  series  500.   All  tests  should
       complete with no errors.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    1.0  md



       11.2.3  SSSSeeeerrrriiiieeeessss 8888xxxxxxxx

       Run one instance of RFA functional tests continuously for  24  hours
       from  node  A through the NFS mount point on node B to a file system
       on node C.  Node A  should  be  a  series  800.   All  tests  should
       complete with no errors.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    1.0  md



       11.3  NNNNFFFFSSSS ---->>>> RRRRFFFFAAAA



       RESPONSIBLE ENGINEER: Paul Van Farowe




       HP Internal Use Only           - 95 -                        2/11/88







       NFS System Test Plan                                 Cross-Services



       This configuration will not be supported due to an RFA  path-parsing
       limitation.   The  problem  lies somewhere in the parsing of the RFA
       connection path.  However, any attempt  to  use  this  configuration
       should produce an appropriate error message.

       The time estimates to perform  the  following  tests  are  based  on
       executing the test once.

       The following node configuration will be used:


                  ----------          ----------          ----------
                 | NODE A  |          | NODE B |          | NODE C |
                  ----------          ----------          ----------

                  mount B:/ /mnt       netunam /net/C




       11.3.1  RRRRFFFFAAAA NNNNOOOOTTTT iiiinnnnhhhheeeerrrriiiitttteeeedddd bbbbyyyy nnnnffffssssdddd

       Create the RFA connection AFTER the NFS daemons have been started so
       that  the NFS daemons do NOT inherit the RFA connection.  Attempt to
       'cd' to or

       Note that this test need only be  executed  a  two  or  three  times
       before release to verify the proper behavior.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    1.0  md



       11.3.2  RRRRFFFFAAAA IIIISSSS iiiinnnnhhhheeeerrrriiiitttteeeedddd bbbbyyyy nnnnffffssssdddd

       Create the RFA connection BEFORE the NFS daemons have  been  started
       so  that  the NFS daemons DO inherit the RFA connection.  Attempt to
       'cd' to or 'ls' /mnt/net/C/*  and verify that an  appropriate  error
       message is returned.  Verify that all tests fail with an appropriate
       error message.  Note that this test need only be executed a  two  or
       three times before release to verify the proper behavior.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    1.0  md



       11.3.3  MMMMoooouuuunnnntttt rrrreeeemmmmooootttteeee ffffiiiilllleeee ssssyyyysssstttteeeemmmm tttthhhhrrrroooouuuugggghhhh RRRRFFFFAAAA





       HP Internal Use Only           - 96 -                        2/11/88







       NFS System Test Plan                                 Cross-Services



                  ----------          ----------          ----------
                 | NODE A  |          | NODE B |          | NODE C |
                  ----------          ----------          ----------

                  netunam /net/B
                  mount C:/ /net/B/mnt


       Create a RFA connection from node A to  node  B.   Then  attempt  to
       mount node C's file system onto a mount point on node B through RFA.
       The mount command should not be able to handle the  network  special
       file and the mount will fail with a networking error.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    1.0  md

       11.4  NNNNFFFFSSSS----NNNNFFFFTTTT TTTTeeeessssttttssss

       The Smelter project is responsible for this.

       11.5  NNNNFFFFSSSS----NNNNFFFFTTTT&&&&RRRRFFFFAAAA TTTTeeeessssttttssss

       The Smelter project is responsible for this.

       11.6  NNNNFFFFSSSS----AAAARRRRPPPPAAAA////BBBBeeeerrrrkkkkeeeelllleeeeyyyy TTTTeeeessssttttssss

       The Smelter project is responsible for this.

       11.7  NNNNFFFFSSSS////DDDDiiiisssskkkklllleeeessssssss TTTTeeeessssttttssss ((((JJJJaaaassssoooonnnn ZZZZiiiioooonnnnssss))))



       RESPONSIBLE ENGINEER: Jason Zions
       DEPENDENCY:
       ISSUE: Final decision on NFS-hetergeneous clusters



       11.7.1  IIIInnnnttttrrrroooodddduuuuccccttttiiiioooonnnn

       The objective of  the  NFS/Diskless  tests  is  to  isolate  defects
       peculiar  to  NFS and Diskless interactions which would not be found
       through other testing processes.

       The success or failure of the tests will  be  determined  using  the
       following criteria outlined below and if appropriate, an analysis of
       the end state of the system.


          o+ None of the  test  systems  should  crash  or  hang,  including
            otherwise uninvolved diskless clients.



       HP Internal Use Only           - 97 -                        2/11/88







       NFS System Test Plan                                 Cross-Services



          o+ The integrity of both services should be preserved.

          o+ No  failures  occur  other  than  those  seen  in  non-diskless
            scenarios.



       11.7.2  IIIInnnnttttrrrraaaa----cccclllluuuusssstttteeeerrrr tttteeeessssttttiiiinnnngggg

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    4.0  md

       Run the full functional and stress suites on a three  node  cluster,
       i.e.

           =============================================
           |              |             |              |
       ---------      ---------     ---------      ---------
       |  9K   |      |  9K   |     |  9K   |      |  9K   |
       | Server|<-----| client|     | client|      | client|
       ---------      ---------     ---------      ---------
       |  disk |<---------------------/  Single-line indicates
       ---------                  NFS client & server relationship
         |__^


       Two of the three clients, as well as  the  server,  should  actively
       participate  in  the tests. The third client should run a simple set
       of non-NFS tests which merely ensure the node remains busy and  that
       any  failure  is  immediately visible. One possibility for this test
       set is the DUX kernel validation suite, available from SSO.

       The goal for this scenario is 48 hours continuous operation at level
       2  stress.   Steps  should  be taken to ensure that moderate to high
       filesystem and swapping activity is maintained during the test.



       11.7.3  IIIInnnntttteeeerrrr----cccclllluuuusssstttteeeerrrr tttteeeessssttttssss

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    8.0  md

       Set up five systems in the following configuration:










       HP Internal Use Only           - 98 -                        2/11/88







       NFS System Test Plan                                 Cross-Services



           ==============================
           |              |             |
       ---------      ---------     ---------
       |  9K   |      |  9K   |     |  9K   |
       | Server|<-----| client|     | client|
       ---------      ---------     ---------
       |  disk |<---     /
       ---------    \   /  Single-line indicates NFS
         ^   |       \ /   client to server relationship
         |   |        X
         |   v       / \   Double-line connects cnodes
       ---------    /   \  in the same cluster
       |  9K   |<---     \
       | Server|      ---------
       ---------      |  9K   |
       |  disk |      | client|
       ---------      ---------
           |              |
           ================


       As in the intra-system test scenario, four of the five  systems  run
       functional  tests  as  indicated in the diagram. The fifth system, a
       diskless client, does not run NFS tests; it simply keeps fairly busy
       performing normal filesystem activities.

       Since this configuration is fairly representative of typical  usage,
       the  tests  should  be  run  for 120 hours at level 3 stress.  Steps
       should be taken to ensure  that  moderate  to  high  filesystem  and
       swapping activity is maintained during the test.



       11.7.4  EEEExxxxttttrrrraaaa----cccclllluuuusssstttteeeerrrr tttteeeessssttttssss

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    6.0  md

       Set up five systems in the following configuration:















       HP Internal Use Only           - 99 -                        2/11/88







       NFS System Test Plan                                 Cross-Services



           ===========================================
           |              |             |            |
       ---------      ---------     ---------    ---------
       |  9K   |      |  9K   |     |  9K   |    |  9K   |
       | Server|<-----| client|     | client|    | client|
       ---------      ---------     ---------    ---------
       |  disk |                        /
       ---------        _______________/
         ^   |         /
         |   |        /
         |   v       /  Single-line indicates NFS
       ---------    /   client to server relationship
       |  9K   |<---
       | Server|        Double-line connects cnodes
       ---------        in the same cluster
       |  disk |
       ---------


       As in the above scenarios, four of the five systems  run  functional
       tests  as  indicated  in  the  diagram. The fifth system, a diskless
       client, does  not  run  NFS  tests;  it  simply  keeps  fairly  busy
       performing normal filesystem activities.

       Since this configuration is fairly representative of typical  usage,
       the  tests  should  be  run  for 120 hours at level 3 stress.  Steps
       should be taken to ensure  that  moderate  to  high  filesystem  and
       swapping activity is maintained during the test.



       11.7.5  EEEErrrrrrrroooorrrr tttteeeessssttttiiiinnnngggg

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    2.0  md

       Configure a three system cluster as shown below.

           ==============================
           |              |             |
       ---------      ---------     ---------
       |9K   A |      |9K   B |     |9K   C |
       |Server |      |client |     |client |
       ---------      ---------     ---------
       | w/NFS |      |w/o NFS|     | w/NFS |
       ---------      ---------     ---------


       test #     Description                  Response

         1        Bring up A and C; attempt              B should panic during boot



       HP Internal Use Only          - 100 -                        2/11/88







       NFS System Test Plan                                 Cross-Services



                    to bring up B.               with an appropriate error

         2        Bring up A and C; mount a    umount should fail with
                    remote disk from C; cd to    "directory busy" error
                    the mounted tree on C;
                    attempt to umount on A.

         3        Same as case 2, reversing    umount should fail with
                    roles of A and C.            "directory busy" error













































       HP Internal Use Only          - 101 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.  FFFFuuuunnnnccccttttiiiioooonnnnaaaalllliiiittttyyyy ((((PPPPoooorrrrtttteeeedddd)))) ((((JJJJeeeeffffffff EEEElllliiiissssoooonnnn,,,, JJJJiiiimmmm HHHHuuuunnnntttteeeerrrr))))


       The tests defined  in  this  chapter  were  originally  defined  and
       written  as  RFA  tests  for  an  earlier  series  300 release.  The
       original tests were ported and/or modified for use as NFS functional
       tests.

       The original documentation for the tests has been updated for use in
       this chapter [3].

       IMPLEMENT TIME: 10.0  md
                                     plus time indicated at various points in the chapter


       12.1  TTTTeeeesssstttt sssseeeeppppaaaarrrraaaattttiiiioooonnnn aaaannnndddd ccccoooovvvveeeerrrraaaaggggeeee


       The tests will be separated into three (3) sets.  One set will  test
       the HP-UX high level commands (Section 1 of the brick), one set will
       test the HP-UX intrinsics (Section 2 of the brick), and one set will
       test the Section 3 of the brick.

       Section one includes:
                 cat,      cd,       chmod,    cp,       find,      ls,
                 mkdir,    pwd,      rm,       rmdir,    touch
       Section 2 includes:
                 access,   chdir,    chmod,    chown,    chroot,
                 close,    creat,    dup,      exec,     fcntl,
                 fstat,    ioctl,    link,     lseek,    mkdir,
                 mount,    open,     prealloc, read,     rmdir,
                 select,   stat,     truncate, write,    unlink
       Section 3 includes:
                 fclose,   fdopen,   fflush,   fgetc,    fopen,      fread,
                 freopen,  fwrite,   getc,       getchar,          getw


       Many of the commands in  section  1  will  have  differing  sets  of
       options  and  usage  statements  depending  on  the type of machine.
       These will have to be modified to expect different results depending
       on the node type.  This has not been done yet.

       Several tests from section 2 are known to be missing.  The following
       tests  will  be ported from the ISO file system tests: fsync, mkdir,
       mount, umount, readv, rmdir, writev, and utime.  Jeff Elison will be
       responsible  for porting these tests and should require 2 md.  Tests
       for chgrp, mknod, sync, and ustat will need to be developed.

       The section 3 routines getgrent* and getpwent will be tested by ISO.
       These tests will then be included in our yellow pages testing.




       HP Internal Use Only          - 102 -                        2/11/88







       NFS System Test Plan                                   Functionality



       The correct functioning of both the commands and library calls  will
       be  tested  for  proper  response  as  well as for the correct error
       responses.  The  error  responses,  as  outlined  in  the  LAN  9000
       documentation,  HP-UX  manual,  will  be tested for.  Generally, the
       tests for error responses will require the LAN to be up.


       12.2  SSSSeeeeccccttttiiiioooonnnn 1111 TTTTeeeessssttttssss


       RESPONSIBLE ENGINEER: Jeff Elison

       This  section  contains  the  outlines  for  testing  the  different
       commands.   Each  command  will  have a separate section.  The tests
       will be then divided into tests for proper responses to correct  use
       of  the command, and then a set of tests for proper responses to the
       incorrect use of the command.

       It is assumed that a correct mount has been run to tie the machines.
       This  is  assumed  for all but the mount tests.  The tests should be
       run as nonsuperuser; the superuser tests are  marked  with  the  .su
       suffix and will be executed seperately.

       In all of the following tests, the phrase  "Remote  Home  directory"
       indicates   some   standard  directory  on  a  remote  machine.   In
       describing the test cases many  of  these  sections  use  the  form,
       action : expected output.




       12.2.1  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''ccccaaaatttt''''


       These tests require the file t1 and the commands cd and diff.




       12.2.1.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       cd local home directory: none
       cat t1 >t2; diff t1 t2:  null
       cat t1 t2 >t3; cat t1 t1 >t4; diff t4 t3: null

       REMOTE MACHINE
       cd remote home directory: none
       cat t1 >t2; diff t1 t2:  null
       cat t1 t2 >t3; cat t1 t1 >t4; diff t4 t3: null



       HP Internal Use Only          - 103 -                        2/11/88







       NFS System Test Plan                                   Functionality



       cat t1(full remote name) >t2; diff t1 t2: null
       cat t1(full remote name) t2 >t3;
          cat t1(full remote name) t1(full remote name) >t4; diff t4 t3: null
       cat t1 >t2(full remote name); diff t1 t2: null
       cat t1(full remote name) >t2(full remote name); diff t1 t2: null

       cd local home directory: none
       cat t1(full remote name) >t2; diff t1(full remote name) t2: null
       cat t1 >t2(full remote name); diff t1 t2(full remote name): null
       cat t1(full remote name) >t2(full remote name);
          diff t1(full remote name) t2(full remote name): null

       ADDITIONAL TESTS with ".." in path name
       cd $LOCALDIR/d1 : none
       cat ../d2/t1 > t2; diff $LOCALDIR/d2/t1 t2 : null
       cat t1 > ../d2/t2; diff t1 $LOCALDIR/d2/t2 : null
       cd $REMOTEDIR/d1 : none
       cat ../d2/t1 > t2; diff $REMOTEDIR/d2/t1 t2 : null
       cat t1 > ../d2/t2; diff t1 $REMOTEDIR/d2/t2 : null
       cat t1 ../d2/t2 > t3
          cat t1 $REMOTEDIR/d2/t2 > t4
          diff t3 t4 : null
       cd $LOCALDIR/d1 : none
       cat $REMOTEDIR/d2/../d1/t1 > t2; diff $REMOTEDIR/d1/t1 t2 : null
       cat t1 > $REMOTEDIR/d2/../d1/t2; diff t1 $REMOTEDIR/d1/t2 : null
       cat $REMOTEDIR/d1/../d2/t1 > $REMOTEDIR/d1/../d2/t3;
          diff $REMOTEDIR/d2/t1 $REMOTEDIR/d2/t3 : null
       cd $REMOTEDIR/d1 : none
       cat $LOCALDIR/d2/../d1/t1 > t2; diff $LOCALDIR/d1/t1 t2 : null
       cat t1 > $LOCALDIR/d1/../d2/t2; diff t1 $LOCALDIR/d2/t2 : null
       cat $LOCALDIR/d1/../d2/t1 > $LOCALDIR/d1/../d2/t3;
          diff $LOCALDIR/d2/t1 $LOCALDIR/d2/t3 : null




       12.2.1.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       /* only t1 exists on the local and remote home directories */
       cd local home directory: none
       cat t2 >t3: cat: cannot open t2
       cat t1 >t1: cat: input t1 is output

       REMOTE MACHINE
       cd remote home directory: none
       cat t2 >t3: cat: cannot open t2
       cat t1 >t1: cat: input t1 is output

       /*the following tests use the full remote pathnames */



       HP Internal Use Only          - 104 -                        2/11/88







       NFS System Test Plan                                   Functionality



       cd local home directory: none
       cat t2 >t3: cat: cannot open t2
       cat t1 >t1 : cat: input t1 is output




       12.2.2  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''ccccdddd''''


       The cd command is used to set the current working directory.  It  is
       used  for  both local directories and remote directories.  It should
       work as in the HP-UX reference manual.

       These tests will use the  commands:  pwd,  chmod.   The  tests  will
       always use pwd to see if the cd worked.  The chmod is only to see if
       it works right with the incorrect permission on the directory.  This
       set of tests is executed for both the Bourne and C shells.




       12.2.2.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       The tests will be of the pattern:
       "cd XX;pwd" in order to see if they worked.

       LOCAL MACHINE
       home directory: path from local root
       parent of home: path from local root
       home directory: path from local root
       subdir of home: path from local root
       subdir: path from local root
       to parent:  path from local root
       to parent:  path from local root
       to parent(till at root):    path from local root
       local root to local root:   path from local root
       REMOTE MACHINE
       root of remote: path from remote root
       down to users of remote:    path from remote root
       down to a subdir: path from remote root
       up to parent in remote: path from remote root
       up to parent in remote: path from remote root
       to parent(till at root):    path from local root
       from root to root in remote:  path from remote root
       back to a directory on local: path from local root
       home directory: path from local root
       nonroot of remote:   path from remote root





       HP Internal Use Only          - 105 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.2.2.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       local home: path from root
       invalid subdir: path from root
       invalid full local path:    path from root
       invalid full remote path:   path from root
       valid directory,but no "x" permission: path from root
       REMOTE MACHINE
       remote home:   path from root
       invalid subdir: path from root
       invalid full local path:    path from root
       invalid full remote path:   path from root
       valid directory,but no "x" permission: path from root




       12.2.3  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''cccchhhhmmmmoooodddd''''


       These tests use the commands cd, ll, rm, mkdir, cp, and sed.




       12.2.3.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       cd local home directory: none
       /* get to a directory with only file t1 in it */
       chmod 4000 t1; ll | sed ->>> ---s------
       chmod 2000 t1; ll | sed ->>> ------s---
       chmod 1000 t1; ll | sed ->>> ----------
       chmod 0400 t1; ll | sed ->>> -r--------
       chmod 0200 t1; ll | sed ->>> --w-------
       chmod 0100 t1; ll | sed ->>> ---x------
       chmod 0040 t1; ll | sed ->>> ----r-----
       chmod 0020 t1; ll | sed ->>> -----w----
       chmod 0010 t1; ll | sed ->>> ------x---
       chmod 0004 t1; ll | sed ->>> -------r--
       chmod 0002 t1; ll | sed ->>> --------w-
       chmod 0001 t1; ll | sed ->>> ---------x
       rm t1;mkdir d1
       chmod 4000 d1; ll | sed ->>> d--s------
       chmod 2000 d1; ll | sed ->>> d-----s---
       chmod 1000 d1; ll | sed ->>> d---------
       chmod 0400 d1; ll | sed ->>> dr--------
       chmod 0200 d1; ll | sed ->>> d-w-------



       HP Internal Use Only          - 106 -                        2/11/88







       NFS System Test Plan                                   Functionality



       chmod 0100 d1; ll | sed ->>> d--x------
       chmod 0040 d1; ll | sed ->>> d---r-----
       chmod 0020 d1; ll | sed ->>> d----w----
       chmod 0010 d1; ll | sed ->>> d-----x---
       chmod 0004 d1; ll | sed ->>> d------r--
       chmod 0002 d1; ll | sed ->>> d-------w-
       chmod 0001 d1; ll | sed ->>> d--------x
       rmdir d1

       REMOTE MACHINE
       cd remote home directory: none
       /* remove all files out of the home directory but t1 */
       chmod 4000 t1; ll | sed ->>> ---s------
       chmod 2000 t1; ll | sed ->>> ------s---
       chmod 1000 t1; ll | sed ->>> ----------
       chmod 0400 t1; ll | sed ->>> -r--------
       chmod 0200 t1; ll | sed ->>> --w-------
       chmod 0100 t1; ll | sed ->>> ---x------
       chmod 0040 t1; ll | sed ->>> ----r-----
       chmod 0020 t1; ll | sed ->>> -----w----
       chmod 0010 t1; ll | sed ->>> ------x---
       chmod 0004 t1; ll | sed ->>> -------r--
       chmod 0002 t1; ll | sed ->>> --------w-
       chmod 0001 t1; ll | sed ->>> ---------x
       rm t1;mkdir d1
       chmod 4000 d1; ll | sed ->>> d--s------
       chmod 2000 d1; ll | sed ->>> d-----s---
       chmod 1000 d1; ll | sed ->>> d---------
       chmod 0400 d1; ll | sed ->>> dr--------
       chmod 0200 d1; ll | sed ->>> d-w-------
       chmod 0100 d1; ll | sed ->>> d--x------
       chmod 0040 d1; ll | sed ->>> d---r-----
       chmod 0020 d1; ll | sed ->>> d----w----
       chmod 0010 d1; ll | sed ->>> d-----x---
       chmod 0004 d1; ll | sed ->>> d------r--
       chmod 0002 d1; ll | sed ->>> d-------w-
       chmod 0001 d1; ll | sed ->>> d--------x
       cd local home directory: none
       /* get to a directory with only file t1(full remote path name) in it */
       chmod 4000 t1(full remote path name); ll | sed ->>> ---s------
       chmod 2000 t1(full remote path name); ll | sed ->>> ------s---
       chmod 1000 t1(full remote path name); ll | sed ->>> ----------
       chmod 0400 t1(full remote path name); ll | sed ->>> -r--------
       chmod 0200 t1(full remote path name); ll | sed ->>> --w-------
       chmod 0100 t1(full remote path name); ll | sed ->>> ---x------
       chmod 0040 t1(full remote path name); ll | sed ->>> ----r-----
       chmod 0020 t1(full remote path name); ll | sed ->>> -----w----
       chmod 0010 t1(full remote path name); ll | sed ->>> ------x---
       chmod 0004 t1(full remote path name); ll | sed ->>> -------r--
       chmod 0002 t1(full remote path name); ll | sed ->>> --------w-
       chmod 0001 t1(full remote path name); ll | sed ->>> ---------x



       HP Internal Use Only          - 107 -                        2/11/88







       NFS System Test Plan                                   Functionality



       rm t1(full remote path name);mkdir d1(full remote path name)
       chmod 4000 d1(full remote path name); ll | sed ->>> d--s------
       chmod 2000 d1(full remote path name); ll | sed ->>> d-----s---
       chmod 1000 d1(full remote path name); ll | sed ->>> d---------
       chmod 0400 d1(full remote path name); ll | sed ->>> dr--------
       chmod 0200 d1(full remote path name); ll | sed ->>> d-w-------
       chmod 0100 d1(full remote path name); ll | sed ->>> d--x------
       chmod 0040 d1(full remote path name); ll | sed ->>> d---r-----
       chmod 0020 d1(full remote path name); ll | sed ->>> d----w----
       chmod 0010 d1(full remote path name); ll | sed ->>> d-----x---
       chmod 0004 d1(full remote path name); ll | sed ->>> d------r--
       chmod 0002 d1(full remote path name); ll | sed ->>> d-------w-
       chmod 0001 d1(full remote path name); ll | sed ->>> d--------x





       12.2.3.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       /* Only the file t1 exists on the local and remote directories */
       LOCAL MACHINE
       cd local home directory: none
       chmod 8000 t1: "chmod: invalid mode"
       chmod 0800 t1: "chmod: invalid mode"
       chmod 9999 t1: "chmod: invalid mode"
       chmod  777 t2: "chmod: no access"

       REMOTE MACHINE
       cd remote home directory: none
       chmod 8000 t1: "chmod: invalid mode"
       chmod 0800 t1: "chmod: invalid mode"
       chmod 9999 t1: "chmod: invalid mode"
       chmod  777 t2: "chmod: no access"
       cd local home directory: none
       chmod 8000 t1(full remote path name): "chmod: invalid mode"
       chmod 0800 t1(full remote path name): "chmod: invalid mode"
       chmod 9999 t1(full remote path name): "chmod: invalid mode"
       chmod  777 t2: "chmod: no access"




       12.2.4  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''ccccpppp''''


       where target is either a file or a directory. If there is  only  one
       file specified, then the target can be a nondirectory name.  In both
       cases, the target can be a directory.




       HP Internal Use Only          - 108 -                        2/11/88







       NFS System Test Plan                                   Functionality



       These tests use the commands: cd, mkdir, and diff.




       12.2.4.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       cd local home directory: none
       /* remove all files out of the home directory but t1 */
       mkdir subdir: none
       cp t1 t2; diff t1 t2: null
       cp t1 subdir; diff t1 subdir/t1: null
       cp t1(a full remote pathname) t2; diff t1(a full remote pathname) t2: null
       cp t1 t2(a full remote pathname); diff t1 t2(a full remote pathname): null
       cp t1(a full remote pathname) t2(a full remote pathname);
          diff t1(a full remote pathname) t2(a full remote pathname): null
       cp t1(a full remote pathname) t2(directory);
            diff t1(a full remote pathname) t2/t1: null
       cp t1 t2(a full remote pathname directory);
            diff t1 t2(a full remote pathname)/t1: null
       cp t1(a full remote pathname) t2(a full remote pathname directory);
          diff t1(a full remote pathname) t2(a full remote pathname directory)/t1: null

       REMOTE MACHINE
       cd remote home directory: none
       /* remove all files out of the home directory but t1 */
       mkdir subdir: none
       cp t1 t2; diff t1 t2: null
       cp t1 subdir; diff t1 subdir/t1: null
       cp t1(a full local pathname) t2; diff t1(a full local pathname) t2: null
       cp t1 t2(a full local pathname); diff t1 t2(a full local pathname): null
       cp t1(a full local pathname) t2(a full local pathname);
          diff t1(a full local pathname) t2(a full local pathname): null
       cp t1(a full local pathname) t2(directory);
            diff t1(a full local pathname) t2/t1: null
       cp t1 t2(a full local pathname directory);
            diff t1 t2(a full local pathname)/t1: null

       cd local home directory: none
       /* remove all files out of the home directory but t1 */
       mkdir subdir: none
       cp t1(a full remote pathname) t2; diff t1(a full remote pathname) t2: null
       cp t1 t2(a full remote pathname); diff t1 t2(a full remote pathname): null
       cp t1(a full remote pathname) t2(a full remote pathname);
          diff t1(a full remote pathname) t2(a full remote pathname): null
       cp t1(a full remote pathname) t2(directory);
            diff t1(a full remote pathname) t2/t1: null
       cp t1 t2(a full remote pathname directory);
            diff t1 t2(a full remote pathname)/t1: null



       HP Internal Use Only          - 109 -                        2/11/88







       NFS System Test Plan                                   Functionality



       cp t1(a full remote pathname) t2(a full remote pathname directory);
          diff t1(a full remote pathname) t2(a full remote pathname directory)/t1: null

       ADDITIONAL TESTS with ".." in path name
       cd $LOCALDIR/d1 : none
       cp ../d2/t1 t2; diff $LOCALDIR/d2/t1 t2 : null
       cp t1 ../d2/t2; diff t1 $LOCALDIR/d2/t2 : null
       cd $REMOTEDIR/d1 : none
       cp ../d2/t1 t2; diff $REMOTEDIR/d2/t1 t2 : null
       cp t1 ../d2/t2; diff t1 $REMOTEDIR/d2/t2 : null
       cp t1 ../d2/t2 t3
          cp t1 $REMOTEDIR/d2/t2 t4
          diff t3 t4 : null
       cd $LOCALDIR/d1 : none
       cp $REMOTEDIR/d2/../d1/t1 t2; diff $REMOTEDIR/d1/t1 t2 : null
       cp t1  $REMOTEDIR/d2/../d1/t2; diff t1 $REMOTEDIR/d1/t2 : null
       cp $REMOTEDIR/d1/../d2/t1 $REMOTEDIR/d1/../d2/t3;
          diff $REMOTEDIR/d2/t1 $REMOTEDIR/d2/t3 : null
       cd $REMOTEDIR/d1 : none
       cp $LOCALDIR/d2/../d1/t1  t2; diff $LOCALDIR/d1/t1 t2 : null
       cp t1 $LOCALDIR/d1../d2/t2; diff t1 $LOCALDIR/d2/t2 : null
       cp $LOCALDIR/d1/../d2/t1 $LOCALDIR/d1/../d2/t3;
          diff $LOCALDIR/d2/t1 $LOCALDIR/d2/t3 : null




       12.2.4.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       /* for these, only t1, t2, t3, and d1 (a directory) exist in the
          home directories                   */
       LOCAL MACHINE
       cd local home directory: none
       cp t1 t2 t4: "cp: t4 not found"
       cp t1 t2 t3: "Usage: {mv|cp|ln} f1 f2
                  {mv|cp|ln} f1 ... fn d
                  mv d1 d2"
       cp d1 d2: just as above
       cp t4 d1: "cp: cannot access t4"

       REMOTE MACHINE
       cd remote home directory: none
       cp t1 t2 t4: "cp: t4 not found"
       cp t1 t2 t3: "Usage: {mv|cp|ln} f1 f2
                  {mv|cp|ln} f1 ... fn d
                  mv d1 d2"
       cp t1(full local pathname) t2 t4: "cp: t4 not found"
       cp t1(full local pathname) t2 t3: "Usage: {mv|cp|ln} f1 f2
                        {mv|cp|ln} f1 ... fn d
                         mv d1 d2"



       HP Internal Use Only          - 110 -                        2/11/88







       NFS System Test Plan                                   Functionality



       cp t1(full local pathname) t2 t4(full local pathname): "cp: t4 not found"
       cp t1(full local pathname) t2 t3(full local pathname):
              "Usage: {mv|cp|ln} f1 f2
                 {mv|cp|ln} f1 ... fn d
             mv d1 d2"

       cd local home directory: none
       cp t1(full remote pathname) t2 t4: "cp: t4 not found"
       cp t1(full remote pathname) t2 t4(full remote pathname): "cp: t4 not found"
       cp t1 t2 t3(full remote pathname nonexistent file):
             "Usage: {mv|cp|ln} f1 f2
                {mv|cp|ln} f1 ... fn d
                 mv d1 d2"
       cp t1(full remote pathname) t2 t4(full remote pathname): "cp: t4 not found"
       cp t1(full remote pathname) t2 t3(full remote pathname nonexistent file):
            "Usage: {mv|cp|ln} f1 f2
               {mv|cp|ln} f1 ... fn d
               mv d1 d2"





       12.2.5  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''ffffiiiinnnndddd''''


       Format: in HP-UX Reference manual

       These tests use the commands: cd and mkdir.




       12.2.5.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       The following tests are for having the working directory  as  either
       local or remote

       find all occurrences of a file name in a path name

       find all occurrences of a file name in 2 path names

       file name has a normal shell argument syntax *;  with  \  the  shell
       will not expand * but 'find' will; note that 'ls' will not.

       find with -perm option

       find with -type option

       find with option -linkn



       HP Internal Use Only          - 111 -                        2/11/88







       NFS System Test Plan                                   Functionality



       find with -user option - user id - user name

       find with -group option - group name - group id

       find with -size option

       find with -atime, -mtime, -ctime

       find with -exec and -ok option

       find with optional parameter -cpio

       find with optional parameter -ncpio

       find with optional parameter -newer

       find with optional primaries in an expression

       find with -inum option

       The following tests are for full remote pathnames with local working
       directory.

       find all occurrences of a file name in a path name

       find all occurrences of a file name in 2 path names

       file name has a normal shell argument syntax *;  with  \  the  shell
       will not expand * but 'find' will; note that 'ls' will not.

       find with -perm option

       find with -type option

       find with option -linkn

       find with -user option -user username -user id

       find with -group option -group name -group id

       find with -size option

       find with -atime, -mtime, -ctime

       find with -exec and -ok option

       find with optional parameter -newer

       find with optional primaries in an expression

       find with -inum option



       HP Internal Use Only          - 112 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.2.6  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''llllssss''''





       12.2.6.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       ls : appropriate response
       ls -a : appropriate response
       ls -A : appropriate response
       ls -l : appropriate response
       ls -s : appropriate response
       ls -d dir1 : appropriate response
       ls full_local_pathname : appropriate response
       ls -a full_local_pathname : appropriate response
       ls -A full_local_pathname : appropriate response
       ls -l full_local_pathname : appropriate response
       ls -s full_local_pathname : appropriate response
       ls -d full_local_pathname/dir1 : appropriate response
       cd full_remote_pathname : appropriate response
       ls : appropriate response
       ls -a : appropriate response
       ls -A : appropriate response
       ls -l : appropriate response
       ls -s : appropriate response
       ls -d dir1 : appropriate response
       cd full_local_pathname : appropriate response
       ls full_remote_pathname : appropriate response
       ls -a full_remote_pathname : appropriate response
       ls -A full_remote_pathname : appropriate response
       ls -l full_remote_pathname : appropriate response
       ls -s full_remote_pathname : appropriate response
       ls -d full_remote_pathname/dir1 : appropriate response




       12.2.7  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''mmmmkkkkddddiiiirrrr''''


       This should take either  a  part  (i.e.  assuming  current  path  to
       current  directory)  or  a  full  name on either the local or remote
       system.

       These tests will use cd, chmod, and ls commands.







       HP Internal Use Only          - 113 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.2.7.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       These tests should be run in this order:
       LOCAL MACHINE
       home directory: none
       make subdir:   list with subdir included
       cd to subdir:  none
       make subdir:   list with only subdir
       up to parent:  none
       make subdir with full pathname: list with both subdirs
       REMOTE MACHINE
       home remote directory:  none
       make subdir:   list with subdir included
       cd to subdir:  none
       make subdir:   list with only subdir
       up to parent:  none
       make subdir with full remote pathname: list with both subdirs




       12.2.7.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       home directory: none
       make subdir:   none
       make existing subdir:   "mkdir: cannot make directory xxx"
       make subdir with wrong pathname (wrong internal node):
             "mkdir: cannot access xxx/."
       make a subdir without "w" access in current: "mkdir: cannot access ."
       REMOTE MACHINE
       cd to remote dir: none
       make subdir:   none
       make existing subdir:   "mkdir: cannot make directory xxx"
       make subdir with wrong pathname (wrong internal node "ndir/xxx"):
             "mkdir: cannot access xxx/."
       make a subdir without "w" access in current: "mkdir: cannot access ."
       make subdir with wrong full pathname (wrong internal node):
             "mkdir: cannot access xxx/."
       make a subdir without "w" access in full pathname:
             "mkdir: cannot access xxx/."




       12.2.8  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''ppppwwwwdddd''''


       Format: pwd



       HP Internal Use Only          - 114 -                        2/11/88







       NFS System Test Plan                                   Functionality



       These tests will occur in the pattern of "cd XX;pwd"  to  check  pwd
       after  cds.  This command requires the use of the command cd.  These
       tests must be executed with all supported shells (currently, /bin/sh
       and /bin/csh).




       12.2.8.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       The pwd command should give the proper pathname from the root of the
       local  system.   These  tests specify the conditions for the cds and
       the result of the subsequent pwd.  These assume  all  the  cds  work
       correctly.

       These tests should be run in this order:
       home directory: path from local root
       parent of home: path from local root
       root of remote: path from local root
       down to users of remote: path from local root
       down to a subdir: path from local root
       up to parent in remote: path from local root
       up to parent in remote: path from local root
       from root to root in remote: path from local root
       back to a directory on local: path from local root
       home directory: path from local root




       12.2.8.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

       The following is done both through a mount point and locally.
       cd /a/b/c; chmod 0 /a/b; pwd : "pwd: cannot open .."




       12.2.9  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''rrrrmmmm''''


       These tests use the commands cd, cp, mkdir, and ls.


       12.2.9.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e
       LOCAL SYSTEM
       rm single file; ls:  one fewer file
       rm several files; ls:   several fewer files
       rm -r directory;ls:  no more directory
       rm -r ../directory;ls:  no more files in the tree



       HP Internal Use Only          - 115 -                        2/11/88







       NFS System Test Plan                                   Functionality



       rm -f file with no write permission;   ls: no more file
       rm -ri directory; ls:   once leaving it and once not
       REMOTE SYSTEM
       cd remote home: none
       rm single file; ls:  one fewer file
       rm several files; ls:   several fewer files
       rm -r directory;ls:  no more directory
       rm -r ../directory;ls:  no more files in the tree
       rm -f file with no write permission;   ls: no more file
       rm -ri directory; ls:   once leaving it and once not
       REMOTE SYSTEM
       cd local home: none
       rm single file(full pathname); ls:  one fewer file
       rm several files; ls(full pathname):   several fewer files
       rm -r directory; ls(full pathname): no more directory
       rm -f file with no write permission(full pathname);   ls: no more file


       12.2.9.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e
       LOCAL MACHINE
       no arguments: usage message
       nonexistent file(t2):   "rm: t2 non_existent"
       directory has no write permission:  "rm: t1 not removed"
       component of the path has no search permission: "rm: t1 non-existent"




       12.2.10  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''rrrrmmmmddddiiiirrrr''''


       This command requires the use of cd, ls, and mkdir.


       12.2.10.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e
       LOCAL MACHINE
       cd home: none
       mkdir subdir: none
       rmdir subdir; ls: no subdir!
       REMOTE MACHINE
       cd remote directory: none
       mkdir subdir: none
       rmdir subdir;ls: no subdir!
       cd home: none
       mkdir remote;ls remote: subdir
       rmdir remote;ls remote: nosubdir!


       12.2.10.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e





       HP Internal Use Only          - 116 -                        2/11/88







       NFS System Test Plan                                   Functionality



       /* file xxx is the erroneous pathname */
       LOCAL MACHINE
       cd home: none
       rmdir nonexisting subdir: "rmdir: xxx non-existent"
       rmdir subdir with no "w" in parent: "rmdir: xxx: no permission"
       rmdir nonempty subdir: "rmdir: xxx not empty"
       REMOTE MACHINE
       cd remote directory: none
       rmdir nonexisting subdir: "rmdir: xxx non-existent"
       rmdir subdir with no "w" in parent: "rmdir: xxx: no permission"
       rmdir nonempty subdir: "rmdir: xxx not empty"
       cd home: none
       rmdir nonexisting remote subdir: "rmdir: xxx non-existent"
       rmdir remote subdir with no "w" in parent: "rmdir: xxx: no permission"
       rmdir nonempty remote subdir: "rmdir: xxx not empty"




       12.2.11  TTTThhhheeee ccccoooommmmmmmmaaaannnndddd ''''ttttoooouuuucccchhhh''''


       These tests use the commands: mkdir, rm, and cd.


       12.2.11.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       touch a single file with no optional parm.
        Verify that a, m and c times are updated to current time.

       touch multiple files with no optional parameter.
        Check each file's times to verify time update.

       touch -a update access time.
        Make sure mtime was not modified.

       touch -m updates modification.
        Make sure atime was not modified.

       touch -c prevents creating of file if not existing
        Check touch return code.












       HP Internal Use Only          - 117 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.3  SSSSeeeeccccttttiiiioooonnnn 1111MMMM TTTTeeeessssttttssss


       RESPONSIBLE ENGINEER: Jeff Elison

       AUTHOR: Steve Booth


       12.3.1  mmmmoooouuuunnnntttt((((1111MMMM))))  The inclusion of NFS in  the  HP-UX  kernel  will
       require  a  more  sophisticated  mount  command.  The following test
       scenarios will attempt to  uncover  defects  in  the  updated  mount
       command.   All of these tests assume the attempted mount of a remote
       machine's file system over NFS.  The "remote" machine may in fact be
       the local machine.


         Test mount with various combinations of read and write sizes.  Because
         of known limitations in NFS design, these read/write sizes should be
         at least 1024.  For each combination, run the quick regression tests.
         For example, try mount -o rsize=1031,wsize=1987 ... .

         The optional parameters (rsize,wsize,retry,timeo,retrans) should be
         tested with both legal and illegal values.  Illegal values should
         generate an EINVAL error.  Legal values should behave as defined;
         legal/illegal values should be obtained from the manual pages.

         Unrecognized options should generate an error.  Try some.

         The "port=NFS_PORT" option should work. Any port specification
         other than the actual NFS port number should hang the mount command.
         For instance, mount -o port=2000 ... should hang.

         Try to mount a machine which is currently down:
             mount -o bg,retry=1 ...          - should give up after 1 retry
             mount -o fg,retry=1 ...          - should give up after 1 retry
             mount -o soft,retry=1 ...        - should give up after 1 retry

             mount -o hard,retry=4,intr ...   - the hard and retry options
                                                appear to be mutually exclusive
                                                see if such is the case

         Mount to a machine which is currently up:
             mount -o rw ...
                 try to read/write files; normal behavior is expected
             mount -o ro ...
                 try to create a remote file
             mount -o suid ...
             mount -o nosuid ...
                 create a remote, executable file called <file>,
                     owned by user "x" (NOT root), with mode 4755,
                     which prints out the current effective user id



       HP Internal Use Only          - 118 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 as user "y" (other than "x") try to execute <file>

                 the suid case should execute as "x"
                 the nosuid case should print an error message, and then
                    execute the script as "y"

         Remove /etc/exports (or equivalent) from the remote machine,
         then try to mount it.

         Make an entry in /etc/checklist for a remote system which is up,
         and another which is down, then execute:
             mount -a -t nfs

         Disallow a node from mounting itself by allowing access only by a
         specific client which is NOT the local node;  at the same time,
         test that the "continuation line" feature works as advertised in
         exports(4).
               /etc/exports should contain (both lines start in column 1):
                  / <newline>
                  <space><space><tab><local hostname>xyzzy
               now try to mount the local node to itself; should work

         With the following in /etc/exports:
              / group1
         execute the following tests (see netgroups(4) for more info):
              # test 1
              in /etc/netgroup, have 1 line: "group1 (<hostname>,,)"
              try to mount the local node to itself; should work
              # test 2
              in /etc/netgroup, have 2 lines:
                  group1 group2
                  group2 (<hostname>,,)
              try to mount the local node to itself; should work
              # test 3
              in /etc/netgroup, have 1 line:
                  group1 (<hostname>,,<bogus domainname>)
              try to mount the local node to itself; should fail
              # test 4
              in /etc/netgroup, have 1 line:
                  group1 (<hostname>,<any userid>,)
              try to mount the local node to itself; should work
              # test 5
              in /etc/netgroup, have 1 line:
                  group1 (<hostname>,,-)
              try to mount the local node to itself; should fail
              # test 6
              in /etc/netgroup, have 1 line:
                  group1 (,,)
              try to mount the local node to itself; should work
              # test 7
              in /etc/netgroup, have 1 line:



       HP Internal Use Only          - 119 -                        2/11/88







       NFS System Test Plan                                   Functionality



                  group1 (-,,)
              try to mount the local node to itself; should fail
              # test 8
              in /etc/netgroup, have 1 line:
                  group1 (,-,)
              try to mount the local node to itself; should work


       12.3.2  uuuummmmoooouuuunnnntttt((((1111MMMM))))

         Mount the same remote machine on several different local directories.
         After executing "umount -h <remote nodename>", all should be
         umounted.

         Mount several remote machines onto local directories, then execute
         umount -t nfs.



       12.4  SSSSeeeeccccttttiiiioooonnnn 2222 TTTTeeeessssttttssss


       RESPONSIBLE ENGINEER: Jim Hunter

       This is the NFS functional test plan for HP-UX intrinsics (Section 2
       of  the brick) for Series 300.  In describing the test cases many of
       these sections use the form, action : expected output.



       12.4.1  aaaacccccccceeeessssssss((((2222))))

       Format: int access(path, )
          char *path;
          int ;


       These tests use the calls: creat and chdir.



       12.4.1.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE

       chdir LOCALDIR
       creat files and directories with read, write, execute, all, and no permissions
        (t1(d1), t2(d2), t3(d3), t4(d4), t5(d5) respectively): none

                 test#      description                              expect response




       HP Internal Use Only          - 120 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 1          access file with  04                     no error
                 2          access file with  02                     no error
                 3          access file with  01                     no error
                 4          access file with  00                     no error
                 5          access directory with  04                no error
                 6          access directory with  02                no error
                 7          access directory with  01                no error
                 8          access directory with  00                no error


                                      REMOTE MACHINE

       chdir REMOTEDIR
       creat files and directories with read, write, execute, all, and no permissions
        (t1(d1), t2(d2), t3(d3), t4(d4), t5(d5) respectively): none

                 test#      description                              expect response

                 9-16       same as tests 1-8                        no error


       chdir LOCALDIR
       creat files and directories with read, write, execute, all, and no permissions
        (t1(d1), t2(d2), t3(d3), t4(d4), t5(d5) respectively): none
       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 17-24      same as tests 1-8                        no error



       12.4.1.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 25         a component of the path not a directory  ENOTDIR
                 26         read permission is requested for null    ENOENT
                            path name
                 27         write permission is requested for null   ENOENT
                            path name
                 28         execute permission is requested for null ENOENT
                            path name
                 29         existence requested for null path        ENOENT
                 30         the named file does not exist            ENOENT
                 31         search permission is denied on a         EACCES
                            component of the path prefix
                 32         permission bits of the filenode do not   EACCES



       HP Internal Use Only          - 121 -                        2/11/88







       NFS System Test Plan                                   Functionality



                            permit the requested access
                 33         path points outside of the process's     EFAULT
                            allocated address space


                                      REMOTE MACHINE


                 test#      description                              expect response

                 34-42      same as tests 25-33                      same

       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 43         a component of the path prefix is not    ENOTDIR
                            a directory
                 44         the named file does not exist            ENOENT
                 45         search permission is denied on a         EACCES
                            component of the path prefix
                 46         permission bits of the filenode do not   EACCES
                            permit the requested access: EACCES
                 47         path points outside of the process's     EFAULT
                            allocated address space



       12.4.2  cccchhhhddddiiiirrrr((((2222))))

       Format: int chdir (path)
                 char *path;


       These test use chmod.



       12.4.2.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 1          chdir to LOCALDIR                        no error
                 2          chdir to parent of LOCALDIR (..)         no error
                 3          chdir to LOCALDIR                        no error
                 4          chdir to subdir of LOCALDIR              no error
                 5          chdir to next subdir                     no error
                 6          chdir to parent of subdir (..)           no error



       HP Internal Use Only          - 122 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 7          chdir from LOCALDIR to REMOTE root       no error


                                      REMOTE MACHINE


                 test#      description                              expect response

                 8-14       same as tests 1-7                        no error



       12.4.2.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


                 test#      description                              expect response

                 15         chdir to invalid subdir ("INVALID")      ENOENT
                 16         invalid component in local path          ENOTDIR
                 17         chdir to existing file on remote         ENOTDIR
                 18         valid directory with no "x" permission   EACCES
                 19         chdir with null path name                ENOENT
                 20         invalid full local path                  ENOENT
                 21         invalid subdir (does not exist)          ENOENT
                 22         invalid full remote path                 ENOENT
                 23         invalid full local path (really a file)  ENOTDIR
                 24         invalid full remote path (really a file) ENOTDIR
                 25         full remote path name with no "x" perm   EACCES
                 26         null name                                ENOENT



       12.4.3  cccchhhhmmmmoooodddd((((2222))))

       Format: chmod(path, mode)
                 char *path;
                 int mode;


       These tests use the library calls: chdir, creat, unlink, and fstat.



       12.4.3.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE

                                      (regular file)

                 test#      description                              expect response




       HP Internal Use Only          - 123 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 1          chmod 4000 t1; fstat gives same back     no error
                 2          chmod 2000 t1; fstat gives same back     no error
                 3          chmod 1000 t1; fstat gives same back     no error
                 4          chmod 0400 t1; fstat gives same back     no error
                 5          chmod 0200 t1; fstat gives same back     no error
                 6          chmod 0100 t1; fstat gives same back     no error
                 7          chmod 0040 t1; fstat gives same back     no error
                 8          chmod 0020 t1; fstat gives same back     no error
                 9          chmod 0010 t1; fstat gives same back     no error
                 10         chmod 0004 t1; fstat gives same back     no error
                 11         chmod 0002 t1; fstat gives same back     no error
                 12         chmod 0001 t1; fstat gives same back     no error
                 13         chmod 0000 t1; fstat gives same back     no error
                 14         chmod 0777 t1; no "r" permissions but    no error
                            owner.


                                      LOCAL MACHINE

                                      (directory file)

                 test#      description                              expect response

                 15-28      same as tests 1-14 except directory      no error


                                      REMOTE MACHINE

                                      (regular file)

                 test#      description                              expect response

                 29-42      same as tests 1-14                       no error


                                      REMOTE MACHINE

                                      (directory file)

                 test#      description                              expect response

                 43-56      same as tests 1-14 except directory      no error












       HP Internal Use Only          - 124 -                        2/11/88







       NFS System Test Plan                                   Functionality



       /* remote directory with only file t1 in it */
       /* the following tests use the full remote path name */

                                      (regular file)

                 test#      description                              expect response

                 57-70      same as tests 1-14                       no error


                                      (directory file)

                 test#      description                              expect response

                 71-84      same as tests 1-14 except directory      no error



       12.4.3.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 85         component of prefix name is not a        ENOTDIR
                            directory
                 86         named file does not exist                ENOENT
                 87         no "x" permission on a component of      EACCES
                            the path name
                 88         null path name                           ENOENT


                                      REMOTE MACHINE


                 test#      description                              expect response

                 89         component of prefix name is not a        ENOTDIR
                            directory
                 90         named file does not exist                ENOENT
                 91         no "x" permission on a component of the  EACCES
                            path name
                 92         chmod 0777; no "r" permission and not    EACCES
                            owner

       /*These all use full remote path name */

                 test#      description                              expect response

                 93-96      same as tests 89-92                      same



       HP Internal Use Only          - 125 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.4.4  cccchhhhoooowwwwnnnn((((2222))))

       Format: int chown(path, owner, group)
                 char *path;
                 int owner;
                 int group;


       This test will only work between hp-ux nodes.  If the remote node is not
       hp-ux (e.g., Sun) then EPERM should always be returned.  A check will be made
       in the test to decide the proper response based on the remote node's type.

       12.4.4.1  _T_e_s_t__f_o_r__r_e_s_p_o_n_s_e_s__i_n__R_E_M_O_T_E_D_I_R

                                      REMOTE MACHINE

       cd to REMOTEDIR

                 test#      description                              expect response

                 1          chown of file                            no error
                 2          chown of directory                       no error
                 3          chown of file owned by somebody else     EPERM
                 4          chown of directory owned by somebody     EPERM
                            else
                 5          file does not exist                      ENOENT
                 6          component of path name not a directory   ENOTDIR
                 7          no "x" permission for component of       EACCES
                            path name



       12.4.4.2  _T_e_s_t__f_o_r__r_e_s_p_o_n_s_e_s__w_h_i_l_e__i_n__L_O_C_A_L_D_I_R

       cd to LOCALDIR
       /* using full path name */

                 test#      description                              expect response

                 8-14       same as tests 1-7                        no error



       12.4.5  cccchhhhrrrrooooooootttt((((2222)))) ((((SSSSUUUUPPPPEEEERRRRUUUUSSSSEEEERRRR))))

       Format: int chroot(path)
                 char *path;







       HP Internal Use Only          - 126 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.4.5.1  _T_e_s_t_s__f_o_r__r_e_s_p_o_n_s_e_s__i_n__R_E_M_O_T_E_D_I_R


                 test#      description                              expect response

                 1          component of path name not a directory   ENOTDIR
                 2          chroot to nonexistent directory          ENOENT
                 3          chroot to a remote directory             no error
                 4          chroot to LOCAL root                     ENOENT



       12.4.5.2  _T_e_s_t_s__f_o_r__r_e_s_p_o_n_s_e_s__i_n__L_O_C_A_L_D_I_R

       /* following tests use full path name */

                 test#      description                              expect response

                 5-8        same as tests 1-4                        ENOTDIR



       12.4.6  cccclllloooosssseeee((((2222))))

       Format: int close(fildes)
                 int fildes;



       12.4.6.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 1          close file opened O_RDONLY               no error
                 2          close file opened WRONLY                 no error
                 3          close "rw" file opened WRONLY            no error
                 4          close file opened RDONLY in a            no error
                            no write directory


                                      REMOTE MACHINE


                 test#      description                              expect response

                 5-8        same as tests 1-4                        no error





       HP Internal Use Only          - 127 -                        2/11/88







       NFS System Test Plan                                   Functionality



                                      REMOTE MACHINE

                                      (full path name)

                 test#      description                              expect response

                 9-12       same as tests 1-4                        no error



       12.4.6.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 13         cd LOCALDIR                              no error
                 14         creat file and close it twice            EBADF
                 15         close negative integer  (-1)             EBADF
                 16         close negative integer  (-11)            EBADF


                                      REMOTE MACHINE


                 test#      description                              expect response

                 17         cd REMOTEDIR                             no error
                 18         creat file and close it twice            EBADF
                 19         close negative integer  (-1)             EBADF
                 20         close negative integer  (-11)            EBADF



       12.4.7  ccccrrrreeeeaaaatttt((((2222))))

       Format: int creat(path, mode)
                 char *path;
                 int mode;


       This creates an ordinary file or prepares  to  rewrite  an  existing
       file.  These tests require commands: cd, mkdir, and ll.










       HP Internal Use Only          - 128 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.4.7.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

       cd LOCALDIR;mkdir subdir;cd subdir: none
       /* need a directory with no entries */
       create files:
       t04000, t02000, t01000, t00400, t00200, t00100, t00040, t00020, t00010,
       t00004, t00002, t00001 with the corresponding modes
       Then ll is executed to see if the results are correct

                 test#      description                              expect response

                 1          creat file with mode 04000               no error
                 2          creat file with mode 02000               no error
                 3          creat file with mode 01000               no error
                 4          creat file with mode 00400               no error
                 5          creat file with mode 00200               no error
                 6          creat file with mode 00100               no error
                 7          creat file with mode 00040               no error
                 8          creat file with mode 00020               no error
                 9          creat file with mode 00010               no error
                 10         creat file with mode 00004               no error
                 11         creat file with mode 00002               no error
                 12         creat file with mode 00001               no error
                 13         creat file with mode 00777               no error
                 14         creat file with mode 00000               ????????


                                      REMOTE MACHINE


       cd REMOTEDIR;mkdir subdir;cd subdir: none
       /* need a directory with no entries */
       create files:
       t04000, t02000, t01000, t00400, t00200, t00100, t00040, t00020, t00010,
       t00004, t00002, t00001 with the corresponding modes
       Then ll is executed to see if the results are correct

                 test#      description                              expect response

                 15-28      same as tests 1-14                       no error














       HP Internal Use Only          - 129 -                        2/11/88







       NFS System Test Plan                                   Functionality



       cd LOCALDIR;mkdir subdir;cd subdir: none
       /* need a directory with no entries */
       create files on remote using full path name:
       t04000, t02000, t01000, t00400, t00200, t00100, t00040, t00020, t00010,
       t00004, t00002, t00001 all with full path name, with the corresponding modes
       Then ll    on the remote directory is executed to see if the results are correct

                 test#      description                              expect response

                 29-42      same as 1-14                             no error



       12.4.7.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE

       cd LOCALDIR/subdir (which is empty)

                 test#      description                              expect response

                 43         creat file with component of path prefix ENOTDIR
                            not a directory
                 44         creat file with component of path prefix ENOENT
                            nonexistent
                 45         creat file with no "x" permission on a   EACCES
                            component
                 46         creat file with null path name           ENOENT
                 47         creat nonexistent file in directory      EACCES
                            with no "w" permission
                 48         creat existing file with no "w"          EACCES
                            permission
                 49         creat existing file which is a directory EISDIR
                 50         creat >= MAX files                       EMFILE
                 51         creat file with pointer to path being 0  EFAULT


                                      REMOTE MACHINE


       cd REMOTEDIR/subdir

                 test#      description                              expect response

                 52-60      same as 43-51                            same









       HP Internal Use Only          - 130 -                        2/11/88







       NFS System Test Plan                                   Functionality



       cd LOCALDIR/subdir/subdir;creat files on remote using full path name

                 test#      description                              expect response

                 61         creat file with component of path prefix ENOTDIR
                            not a directory
                 62         creat file with component of path prefix ENOENT
                            nonexistent
                 63         creat file with no "x" permission on a   EACCES
                            component
                 64         creat file with null path name           ENOENT
                 65         creat nonexistent file in directory      EACCES
                            with no "w" permission
                 66         creat existing file with no "w"          EACCES
                            permission
                 67         creat existing file which is a directory EISDIR
                 68         creat >= MAX files                       EMFILE



       12.4.8  dddduuuupppp((((2222))))

       Format: int dup(fildes)
                 int fildes;


       The required library calls are: creat, fstat, and chdir



       12.4.8.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE

       cd LOCALDIR

                 test#      description                              expect response

                 1          creat file;dup,compare file descriptors; no error
                            compare fields by fstat


                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 2          creat file;dup,compare file descriptors; no error
                            compare fields by fstat



       HP Internal Use Only          - 131 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 3          creat file(using the full remote         no error
                            path name); dup (using the full remote
                            path name), compare the file descriptors;
                            same fields by fstat



       12.4.8.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


                 test#      description                              expect response

                 4          creat >= MAX files                       EMFILE
                 5          use negative file descriptor (-1)        EBADF



       12.4.9  eeeexxxxeeeecccc((((2222))))

       Formats: int execl (path, arg0, arg1, ...,argn, 0)
                char *path, *arg0, *arg1, ..., *argn;

                int execv (path, argv)
                char *path, *argv[];

                int execle (path, arg0, arg1, ...,argn, 0, envp)
                char *path, *arg0, *arg1, ..., *argn, *envp[];

                int execve (path, argv, envp)
                char *path, *argv[], *envp[];

                int execlp (path, arg0, arg1, ...,argn, 0)
                char *path, *arg0, *arg1, ..., *argn;

                int execvp (path, argv)
                char *path, *argv[];



       12.4.9.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

       These tests are chained together. Each test program executes  itself
       a certain number of times and then the next one

                                      LOCAL MACHINE

       cd LOCALDIR

                 test#      description                              expect response

                 1-4        execl executed 4 times                   no error



       HP Internal Use Only          - 132 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 5-8        execv executed 4 times                   no error
                 9-12       execle executed 4 times                  no error
                 13-16      execve executed 4 times                  no error
                 17-20      execlp executed 4 times                  no error
                 21-24      execvp executed 4 times                  no error


                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 25-28      execl executed 4 times                   no error
                 29-32      execv executed 4 times                   no error
                 33-36      execle executed 4 times                  no error
                 37-40      execve executed 4 times                  no error
                 41-44      execlp executed 4 times                  no error
                 45-48      execvp executed 4 times                  no error

               49-54        test setuid by mounting remote file systemno error
                            with setuid option then have each exec type
                            access a file that will require the setuid
                            capability.


       cd LOCALDIR; execute from remote dir using full path name

                 test#      description                              expect response

                 55-84   same as tests 25-54                         no error



       12.4.9.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


       cd LOCALDIR Each error condition is produced once for execl,  execv,
       execle, execve, execlp, execvp

                 test#      description                              expect response

                 73-78      component of path prefix does not exist  ENOENT
                 79-84      component of path prefix not a directory ENOTDIR
                 85-90      search permission is denied for a        EACCES
                            directory in path prefix
                 91-96      not an ordinary file                     EACCES
                 97-102     not executable                           EACCES



       HP Internal Use Only          - 133 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 103-106    file does not exist                      ENOENT
               107-112      test setuid by mounting remote file systemEACCES
                            WITHOUT setuid option then have each exec type
                            access a file that will require the setuid
                            capability.


                                      REMOTE MACHINE


       cd REMOTEDIR
       Each error condition is produced  once  for  execl,  execv,  execle,
       execve, execlp, execvp

                 test#      description                              expect response

                 113-152    same as tests 73-112                     same



       12.4.10  ffffcccchhhhmmmmoooodddd((((2222))))

       Format: fchmod(fd, mode)
                 int fd, mode;


       This test will only work between two hp-ux nodes.  The tests will always
       fail with EPERM to a non hp-ux machine (e.g., Sun).  A check will be made
       within the tests to determine the remote node's type in order to test for
       the proper results.
                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 1          fchmod of a file to 4000                 no error
                 2          fchmod of a file to 2000                 no error
                 3          fchmod of a file to 1000                 no error
                 4          fchmod of a file to 0400                 no error
                 5          fchmod of a file to 0200                 no error
                 6          fchmod of a file to 0100                 no error
                 7          fchmod of a file to 0040                 no error
                 8          fchmod of a file to 0020                 no error
                 9          fchmod of a file to 0010                 no error
                 10         fchmod of a file to 0004                 no error
                 11         fchmod of a file to 0002                 no error
                 12         fchmod of a file to 0001                 no error
                 13         fchmod of a file to 0000                 no error




       HP Internal Use Only          - 134 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 test#      description                              expect response

                 14-26      same as tests 1-13 expect directory      no error

       cd LOCALDIR; user full path name to remote

                 test#      description                              expect response

                 26-38      same as tests 1-13                       no error
                 38-60      same as tests 1-13 except directory      no error



       12.4.11  ffffcccchhhhoooowwwwnnnn((((2222))))

       Format: int fchown(fd, owner, group)
                 int fildes, group;


       This test will only work between hp-ux nodes.  If the remote node is not
       hp-ux (e.g., Sun) then EPERM should always be returned.  A check will be made
       in the test to decide the proper response based on the remote node's type.
                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 1          fchown of a file (user 100)              no error
                 2          fchown of a directory (user 100)         no error
                 3          fchown of a file not owned               EPERM
                 4          fchown of a directory not owned          EPERM


       cd LOCALDIR; fopen using full path name to remote

                 test#      description                              expect response

                 5-8        same as tests 1-4                        same



       12.4.12  ffffccccnnnnttttllll((((2222))))

       Format: int fcntl(fildes, cmd, arg)
                 int fildes, cmd, arg;


       These tests use the calls: open.




       HP Internal Use Only          - 135 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.4.12.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 1-6        F_DUPFD for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 7-12       F_GETFD for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 13-18      F_SETFD for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 19-24      F_GETFL for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 25-30      F_SETFL for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)


                                      REMOTE MACHINE


                 test#      description                              expect response

                 31-36      F_DUPFD for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 37-42      F_GETFD for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 43-48      F_SETFD for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 49-54      F_GETFL for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 54-60      F_SETFL for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)


       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 61-66      F_DUPFD for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 67-72      F_GETFD for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 73-78      F_SETFD for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 79-84      F_GETFL for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)
                 85-90      F_SETFL for files opened by:             no error
                            creat, open, dup, fcntl, pipe(both)




       HP Internal Use Only          - 136 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.4.12.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


       cd LOCALDIR

                 test#      description                              expect response

                 91         F_DUPFD invalid file descriptor (-1)     EBADF
                 92         F_DUPFD invalid file descriptor (21)     EBADF
                 93         F_DUPFD and 20 files are already open    EMFILE
                 94         F_DUPFD and arg is negative (-1)         EINVAL
                 95         F_DUPFD and arg is negative (-1001)      EINVAL
                 96         F_DUPFD and arg is invalid               EINVAL


                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 97-102     same as tests 91-96                      same

       /* all of the following tests use the full remote path name */

       cd LOCALDIR

                 test#      description                              expect response

                 103-108    same as tests 91-96                      same



       12.4.13  ffffssssttttaaaatttt((((2222))))

       Format: int fstat(fildes, buf)
                 int fildes;
                 struct stat *buf;













       HP Internal Use Only          - 137 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.4.13.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


       cd LOCALDIR

                 test#      description                              expect response

                 1          check stats of one file (could be        no error
                            modified by touch, etc.)

                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 2          check stats of one file (could be        no error
                 modified by touch, etc.)

       /* all of the following tests use the full remote path name */

       cd LOCALDIR

                 test#      description                              expect response

                 3          check stats of one file (could be        no error
                            modified by touch, etc.)



       12.4.13.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 4          fildes not a valid open file descriptor  EBADF
                 5          buf points to an invalid address         EFAULT


                                      REMOTE MACHINE


                 test#      description                              expect response

                 6          fildes not a valid open file descriptor  EBADF
                 7          buf points to an invalid address         EFAULT



       HP Internal Use Only          - 138 -                        2/11/88







       NFS System Test Plan                                   Functionality



       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 8          buf points to an invalid address         EFAULT



       12.4.14  ffffttttrrrruuuunnnnccccaaaatttteeee((((2222))))

       Format: ftruncate(fd, length)
                 int fd, length;



       12.4.14.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


       These tests make files of various sizes and then truncate them

                 test#      description                              expect response

                 1          ftruncate 5 files to size 1              no error
                 2          ftruncate 5 files to size 100            no error
                 3          ftruncate 5 files to size 1000           no error


                                      REMOTE MACHINE


       cd REMOTEDIR
       These tests make files of various sizes and then truncate them

                 test#      description                              expect response

                 4-6        same as tests 1-3                        no error

       cd LOCALDIR; use full path name to remote
       These tests make files of various sizes and then truncate them

                 test#      description                              expect response

                 7-9        same as tests 1-3                        no error



       12.4.14.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE



       HP Internal Use Only          - 139 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 test#      description                              expect response

                 1          bad file descriptor                      EBADF
                 2          bad address                              EFAULT


                                      REMOTE MACHINE


                 test#      description                              expect response

                 1          bad file descriptor                      EBADF
                 2          bad address                              EFAULT



       12.4.15  iiiiooooccccttttllll((((2222))))

       Format: ioctl(fildes, request, arg)
                 int fildes, request;


       This test should always fail over nfs.

       IMPLEMENT TIME:  1.0  md



       12.4.16  lllliiiinnnnkkkk((((2222))))

       Format: int link(path1,path2)
                 char *path1, path2;


       The required library calls are: creat,chdir.



       12.4.16.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e__n_o_n__S_U_P_E_R__u_s_e_r

                                      LOCAL MACHINE


       cd LOCALDIR

                 test#      description                              expect response

                 1          link file t2 to file t1                  no error


                                      REMOTE MACHINE



       HP Internal Use Only          - 140 -                        2/11/88







       NFS System Test Plan                                   Functionality



       cd REMOTEDIR

                 test#      description                              expect response

                 2          link file t2 to file t1                  no error

       cd LOCALDIR; use full path names to remote

                 test#      description                              expect response

                 3          link file t2 to file t1                  no error



       12.4.16.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e__f_o_r__n_o_n__S_U_P_E_R__u_s_e_r

                                      LOCAL MACHINE


       /* for the following try to link t2 to file t1 with errors as follows */

                 test#      description                              expect response

                 4          component of path1 is not a directory    ENOTDIR
                 5          component of path2 is not a directory    ENOTDIR
                 6          component of path1 does not exist        ENOENT
                 7          component of path2 does not exist        ENOENT
                 8          component of path1 denies "x" permission EACCES
                 9          component of path2 denies "x" permission EACCES
                 10         file of path1 does not exist             ENOENT
                 11         file of path2 exists                     EEXIST
                 12         path2 points to a null path name         ENOENT
                 13         The requested link requires writing in   EACCES
                            a directory with a mode that denies write
                            permission
                 14         path1 points outside of the process's    EFAULT
                            allocated address space
                 15         path2 points outside of the process's    EFAULT
                            allocated address space
                 16         path1 is null                            ENOENT
                 17         path2 is null                            ENOENT


                                      REMOTE MACHINE


       /* for the following try to link t2 to file t1 with errors as follows */

                 test#      description                              expect response

                 18-31      same as tests 4-17                       same



       HP Internal Use Only          - 141 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 32         path1 be local machine and path2 be      EXDEV
                            remote
                 33         path2 be local machine and path1 be      EXDEV
                            remote

       /* do the following with full path name from local machine */

                 test#      description                              expect response

                 34-47      same as tests 4-17                       same
                 48         path1 be local machine and path2 be      EXDEV
                            remote
                 49         path2 be local machine and path1 be      EXDEV
                            remote



       12.4.17  lllloooocccckkkkffff((((2222))))

       Format: lockf(fildes, function, size)
                 int fildes, function;


       This should always return an error for remote files.

       IMPLEMENT TIME:  1.0  md



       12.4.18  llllsssseeeeeeeekkkk((((2222))))

       Format: long lseek(fildes, offset, whence)
                 int fildes;
                 long offset;
                 int whence;


       The required library calls are: creat, open, dup.




       12.4.18.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 1          open to read ;size 0;whence 0            no error
                 2          open to read ;size 1;whence 0            no error



       HP Internal Use Only          - 142 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 3          open to read ;size 2;whence 0            no error
                 4          open to read ;size 511 ;whence 0         no error
                 5          open to read ;size 512 ;whence 0         no error
                 6          open to read ;size 513 ;whence 0         no error
                 7          open to read ;size 1023;whence 0         no error
                 8          open to read ;size 1024;whence 0         no error
                 9          open to read ;size 1025;whence 0         no error
                 10         open to read ;size 9999;whence 0         no error
                 11-20      repeat tests 1-10 with whence 1          no error
                 21-30      repeat tests 1-10 with whence 2          no error
                 31-60      repeat tests 1-30 with open for write    no error
                 61         mix getdirentries and lseek to read      no error
                            a directory
                 62         open for write; seek way out; close;     no error
                            open for read; read zeros


                                      REMOTE MACHINE


       chdir REMOTEDIR

                 test#      description                              expect response

                 63-124     same as tests 1-62                       no error

       /* do the following tests using the full remote path name */
       cd LOCALDIR

                 test#      description                              expect response

                 125-186    same as tests 1-62                       no error



       12.4.18.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE

                                      (open for read)

                 test#      description                              expect response

                 187        fildes not an open file descriptor       EBADF
                 188        fildes is associated with a pipe or      ESPIPE
                            FIFO
                 189        Whence is not 0, 1, or 2:                EINVAL
                            EINVAL and SIGSYS signal
                 190        Whence is -1 EINVAL and SIGSYS signal    EINVAL
                 191        Whence is 0 and offset -1                EINVAL
                 192        Whence is 0 and offset -100              EINVAL



       HP Internal Use Only          - 143 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 193        Whence is 1 and offset -100              EINVAL
                 194        Whence is 2 and offset -100              EINVAL
                 195-202    same as tests 187-194 except open        same
                            for write


                                      REMOTE MACHINE


                 test#      description                              expect response

                 203-216    same as tests 187-202                    same
                            (without test 182 and test 189)

       /* for the following tests use the full remote path name */

                 test#      description                              expect response

                 217-230    same as tests 203-216                    same



       12.4.19  llllssssttttaaaatttt((((2222))))

       Format: int lstat(path, buf)
                 char *path;
                 struct stat *buf;


                                      LOCAL MACHINE


       cd LOCALDIR

                 test#      description                              expect response

                 1          check stats of one file (could be        no error
                            modified by touch, etc.)

                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 2          check stats of one file (could be        no error
                            modified by touch, etc.)
                 3          set up symlink to file; lstat symlink;   no error
                            should be different then original
                            file and size should be equal to



       HP Internal Use Only          - 144 -                        2/11/88







       NFS System Test Plan                                   Functionality



                            number of characters in path name.

       /* all of the following tests use the full remote path name */

       cd LOCALDIR

                 test#      description                              expect response

                 4          check stats of one file (could be        no error
                            modified by touch, etc.)
                 5          set up symlink to file; lstat symlink;   no error
                            should be different then original
                            file and size should be equal to
                            number of characters in path name.



       12.4.19.1  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


       cd LOCALDIR

                 test#      description                              expect response

                 4          component of path not a directory        ENOTDIR
                 5          named file does not exist                ENOENT
                 6          search permission denied for component   EACCES
                            of path name
                 7          path points to invalid address           EFAULT
                 8          path is null                             ENOENT


                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 9-13       same as tests 4-8                        same


       cd LOCALDIR; use full path names to remote

                 test#      description                              expect response

                 14-17      same as tests 4-8                        same





       HP Internal Use Only          - 145 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.4.20  ooooppppeeeennnn((((2222))))

       Format: int open(path,oblag[,mode])
                 char *path;
                 int oflag, mode;


       The required library calls are:                               chdir and fstat.



       12.4.20.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 1          open file for reading only;check status  no error
                 2          open file for writing only;check status  no error
                 3          open file for reading and writing;       no error
                            check status


                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 4-6        same as tests 1-3                        no error
                 7          open file with append mode from two      no error
                            processes.  Write to file from both.
                            Should not get any errors except file
                            contents will be unpredictable

       /* use full remote path name for the following */

                 test#      description                              expect response

                 8-11       same as tests 4-7                        no error



       12.4.20.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response



       HP Internal Use Only          - 146 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 10         component of path prefix is not a        ENOTDIR
                            directory
                 11         O_CREAT is not set and the named file    ENOENT
                            does not exist: ENOENT
                 12         a component of the path prefix denies    EACCES
                            the search permission
                 13         oflag permission is denied for the named EACCES
                            file
                 14         The named file is a directory and oflag  EISDIR
                            is write or read/write
                 15         20 file descriptors are currently open   EMFILE
                 16         the named file is a character special    ENXIO
                            or block special file, and the device
                            associated with this special file does
                            not exist
                 17         Path points outside the process's        EFAULT
                            allocated address space
                 18         E_CREAT and O_EXCL are set, and the      EEXIST
                            named file exists
                 19         O_NDELAY is set, the named file is a     ENXIO
                            FIFO, O_WRONLY is set, and no process
                            has the file open for reading
                 20         Path is null                             ENOENT
                 21         oflag specifies both O_WRONLY and O_RDWR EINVAL


                                      REMOTE MACHINE


       chdir REMOTEDIR

                 test#      description                              expect response

                 22-33      same as tests 10-21                      same
               34           open file on remote file system, remove  EBADF
                            file from remote node and try to access
                            file


       /* use the full remote path name for all the following */

                 test#      description                              expect response

                 35-47      same as tests 22-33                      same



       12.4.21  mmmmkkkkddddiiiirrrr((((2222))))

       Format: mkdir(path, mode)
                 char *path;



       HP Internal Use Only          - 147 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 int mode;


       Will be ported from SSO file system tests.

       IMPLEMENT TIME:  0.25 md



       12.4.22  mmmmoooouuuunnnntttt((((2222))))

       Format: int mount(spec, dir, rwflag)
                 char *spec, *dir;
                 int rwflag;


       This will be ported from the SSO file system tests.
       IMPLEMENT TIME:  1.0  md



       12.4.23  pppprrrreeeeaaaalllllllloooocccc((((2222))))

       Format: int prealloc(fildes, size)
                 int fildes;
                 int size;


                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 1          prealloc 10                              no error
                 2          prealloc a non empty file                ENOTEMPTY
                 3          prealloc too much (-1)                   EFBIG


       cd LOCALDIR; use full path names to remote

                 test#      description                              expect response

                 4-6        same as tests 1-3                        same



       12.4.24  rrrreeeeaaaadddd((((2222))))

       Format: int read(fildes, buf, nbyte)



       HP Internal Use Only          - 148 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 int fildes;
                 char *buf;
                 unsigned nbyte;


       These tests use the calls: chdir, creat, and open.



       12.4.24.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


       cd LOCALDIR

                 test#      description                              expect response

                 1          read 0 bytes from 0 size file            no error
                 2          read 1 byte from 1 byte size file        no error
                 3          read 2 bytes from 2 byte size file       no error
                 4          read 511 bytes from 511 byte size file   no error
                 5          read 512 bytes from 512 byte size file   no error
                 6          read 513 bytes from 513 byte size file   no error
                 7          read 1023 bytes from 1023 byte size file no error
                 8          read 1024 bytes from 1024 byte size file no error
                 9          read 1025 bytes from 1025 byte size file no error
                 10         read 9999 bytes from 9999 byte size file no error
                 11-100     same as 1-10 repeated                    no error
                 101        read 0 byte file 1 byte at a time        no error
                 102        read 1 byte file 1 byte at a time        no error
                 103        read 2 byte file 1 byte at a time        no error
                 104        read 511 byte file 1 byte at a time      no error
                 105        read 512 byte file 1 byte at a time      no error
                 106        read 513 byte file 1 byte at a time      no error
                 107        read 1023 byte file 1 byte at a time     no error
                 108        read 1024 byte file 1 byte at a time     no error
                 109        read 1025 byte file 1 byte at a time     no error
                 110        read 9999 byte file 1 byte at a time     no error


                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 111-220    same as tests 1-110                      no error

       /* all of the following tests use the full remote path name */



       HP Internal Use Only          - 149 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 test#      description                              expect response

                 221-330    same as tests 1-110                      no error



       12.4.24.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 331        fildes is not a valid file descriptor    EBADF
                            by invalid file descriptor
                 332        fildes is not a valid file descriptor    EBADF
                            by only being for writing
                 333        buf points outside the allocated         EFAULT
                            address space: EFAULT


                                      REMOTE MACHINE


       chdir REMOTEDIR

                 test#      description                              expect response

                 334-336    same as tests 331-333                    same

       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 337-339    same as tests 331-333                    same



       12.4.25  rrrrmmmmddddiiiirrrr((((2222))))

       Format: rmdir(path)
                 char *path;


       Ported from SSO file system tests.
       IMPLEMENT TIME:  0.25 md








       HP Internal Use Only          - 150 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.4.26  sssseeeelllleeeecccctttt((((2222))))

       Format: int select(nfds, readfds, writefds, execptfds, timeout)
                 int nfds, *readfds, *writefds, *execptfds;
                 struct timeval *timeout;


                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 1          select on file "t1"                      no error

       /* use full path name from LOCALDIR        */

                 test#      description                              expect response

                 2          select on file "t1"                      no error

       Also ported SSO file system test.
       IMPLEMENT TIME:  0.25 md



       12.4.27  ssssttttaaaatttt((((2222))))

       Format: int stat(path, buf)
                 char *path;
                 struct stat *buf;


       These tests use the call: chdir.



       12.4.27.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 1          check stats of one file (could be        no error
                            modified by touch, etc.)


                                      REMOTE MACHINE




       HP Internal Use Only          - 151 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 test#      description                              expect response

                 2          check stats of one file (could be        no error
                            modified by touch, etc.)

       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 3          check stats of one file (could be        no error
                            modified by touch, etc.)



       12.4.27.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 4          a component of the path prefix is not    ENOTDIR
                            a directory
                 5          the named file does not exist            ENOENT
                 6          search permission is denied for a        EACCES
                            component of the path prefix
                 7          Path points to an invalid address        EFAULT
                 8          Path is null                             ENOENT


                                      REMOTE MACHINE


       chdir REMOTEDIR

                 test#      description                              expect response

                 9-13       same as tests 4-8                        same

       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 14-17      same as tests 4-8                        same



       12.4.28  ttttrrrruuuunnnnccccaaaatttteeee((((2222))))

       Format: truncate(path, length)
                 char *path;



       HP Internal Use Only          - 152 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 int length;



       12.4.28.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

       These tests are the same as those of ftruncate.



       12.4.28.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


                 test#      description                              expect response

                 1          path component not a directory (local)   ENOTDIR
                 2          path component not a directory (remote)  ENOTDIR
                 3          named file does not exist (local)        ENOENT
                 4          named file does not exist (remote)       ENOENT
                 5          component of path denies permission      EACCES
                            (local)
                 6          component of path denies permission      EACCES
                            (remote)
                 7          name file is a directory (local)         EISDIR
                 8          path name too long (local)               ENOENT
                 9          path points out of process's address     EFAULT
                            space (local)
                 10         name file is a directory (remote)        EISDIR
                 11         path name too long (remote)              ENOENT
                 12         path points out of process's address     EFAULT
                            space (remote)


       cd REMOTEDIR

                 test#      description                              expect response

                 1          path component not a directory           ENOTDIR
                 2          named file does not exist                ENOENT
                 3          component of path denies permission      EACCES
                 4          name file is a directory                 EISDIR
                 5          path name too long                       ENOENT
                 6          path points out of process's address     EFAULT
                            space



       12.4.29  uuuunnnnlllliiiinnnnkkkk((((2222))))

       Format: int unlink(path)
                 char *path;



       HP Internal Use Only          - 153 -                        2/11/88







       NFS System Test Plan                                   Functionality



       These tests use the commands chdir, creat, and link.



       12.4.29.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 1-40       creat then unlink the file;no file left  no error
                 41-80      creat,dup the file then unlink           no error


                                      REMOTE MACHINE


       cd REMOTEDIR

                 test#      description                              expect response

                 81-120     same as 1-80                             no error

       cd LOCALDIR; use full path name to remote

                 test#      description                              expect response

                 121-200    same as 1-80                             no error



       12.4.29.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 201        unlink file with component of path       ENOTDIR
                            prefix is not a directory
                 202        unlink file with component of path       ENOENT
                            prefix is nonexistent
                 203        unlink file with no "x" permission on    EACCES
                            a component
                 204        unlink existing file with no "w"         EACCES
                            permission in parent directory
                 205        unlink file with null path name          ENOENT
                 206        unlink file with path pointing outside   EFAULT
                            of process space




       HP Internal Use Only          - 154 -                        2/11/88







       NFS System Test Plan                                   Functionality



                                      REMOTE MACHINE


                 test#      description                              expect response

                 207-202    same as tests 201-206                    same

       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 203-208    same as tests 121-126                    same



       12.4.30  wwwwrrrriiiitttteeee((((2222))))

       Format: int write(fildes, buf, nbyte)
                 int fildes;
                 char *buf;
                 unsigned nbyte;


       These tests use the calls: creat, chdir, close, and open.



       12.4.30.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 1          write 0 bytes                            no error
                 2          write 1 bytes                            no error
                 3          write 2 bytes                            no error
                 4          write 511 bytes                          no error
                 5          write 512 bytes                          no error
                 6          write 513 bytes                          no error
                 7          write 1023 bytes                         no error
                 8          write 1024 bytes                         no error
                 9          write 1025 bytes                         no error
                 10         write 9999 bytes                         no error
                 11-100     repeat tests 1-10                        no error


                                      REMOTE MACHINE


                 test#      description                              expect response



       HP Internal Use Only          - 155 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 101-200    same as tests 1-100                      no error

       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 201-300    same as tests 1-100                      no error



       12.4.30.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e

                                      LOCAL MACHINE


                 test#      description                              expect response

                 301        fildes is not a valued file descriptor   EBADF
                            open for writing by only for reading
                 302        fildes is not a valued file descriptor   EBADF
                            open for writing by invalid file
                            descriptor
                 303        write a huge amount of data              EFBIG


                                      REMOTE MACHINE


                 test#      description                              expect response

                 303-306    same as tests 301-303                    same

       /* all of the following tests use the full remote path name */

                 test#      description                              expect response

                 307-309    same as tests 301-303                    same

       12.5  SSSSeeeeccccttttiiiioooonnnn 3333 TTTTeeeessssttttssss





       12.5.1  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ffffcccclllloooosssseeee''''

       Format: int fclose(stream)
                 FILE *stream;






       HP Internal Use Only          - 156 -                        2/11/88







       NFS System Test Plan                                   Functionality



       These tests use the calls:chdir and fopen.




       12.5.1.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fopen a local file: none
       fclose the file: none

       REMOTE MACHINE
       chdir remote home directory: none
       fopen a file: none
       fclose the file: none

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fopen a remote file: none
       fclose the file: none




       12.5.1.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       incorrect stream: EOF returned

       REMOTE MACHINE
       chdir remote home directory: none
       incorrect stream: EOF returned




       12.5.2  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ffffddddooooppppeeeennnn''''((((3333SSSS))))

       Format: FILE *fopen(fildes, type)
                 int fildes;
                 char *type;



       These tests use the calls: chdir.





       HP Internal Use Only          - 157 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.5.2.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fdopen valid local file: 0 return
          - read only
          - write only
          - read and write

       REMOTE MACHINE
       chdir remote home directory: none
       fdopen valid file: 0 return
          - read only
          - write only
          - read and write

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fdopen valid remote file: 0 return
          - read only
          - write only
          - read and write




       12.5.2.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       too many open files: NULL returned
       incorrect type: NULL returned

       REMOTE MACHINE
       chdir remote home directory: none
       too many open files: NULL returned
       incorrect type: NULL returned

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       too many open files: NULL returned
       incorrect type: NULL returned




       12.5.3  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''fffffffflllluuuusssshhhh''''((((3333SSSS))))

       Format: int fflush(stream)



       HP Internal Use Only          - 158 -                        2/11/88







       NFS System Test Plan                                   Functionality



                 FILE *stream;



       These tests use the calls: fopen and fgetc.




       12.5.3.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fopen a local file: none
       fgetc a char: none
       fflush the file: none

       REMOTE MACHINE
       chdir remote home directory: none
       fopen a file: none
       fgetc a char: none
       fflush the file: none

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fopen a remote file: none
       fgetc a char: none
       fflush the file: none




       12.5.3.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       incorrect stream: EOF returned

       REMOTE MACHINE
       chdir remote home directory: none
       incorrect stream: EOF returned




       12.5.4  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ffffggggeeeettttcccc''''((((3333SSSS))))

       Format: int getc(stream)
                 FILE *stream;



       HP Internal Use Only          - 159 -                        2/11/88







       NFS System Test Plan                                   Functionality



       These tests use the calls: chdir and fopen.




       12.5.4.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fopen a file and fgetc it and see if it got them all: same

       REMOTE MACHINE
       chdir remote home directory: none
       fopen a file and fgetc it and see if it got them all: same

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fopen a file and fgetc it and see if it got them all: same




       12.5.4.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       invalid stream: EOF returned

       REMOTE MACHINE
       chdir remote home directory: none
       invalid stream: EOF returned

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       invalid stream: EOF returned




       12.5.5  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ffffooooppppeeeennnn''''((((3333))))

       Format: FILE *fopen(file-name, type)
                 char *file-name, *type;



       These tests use the calls: chdir.





       HP Internal Use Only          - 160 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.5.5.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fopen valid local file: 0 return
          - read only
          - write only
          - read and write

       REMOTE MACHINE
       chdir remote home directory: none
       fopen valid file: 0 return
          - read only
          - write only
          - read and write

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fopen valid remote file: 0 return
          - read only
          - write only
          - read and write




       12.5.5.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       too many open files: NULL returned
       incorrect type: NULL returned
       fopen file with component of path prefix is not a directory
       O_CREAT is not set and the named file does not exist
       a component of the path prefix denies search permission
       oflag permission denied
       the named file is a directory and the oflag is write
       the named file is a directory and the oflag is read/write

       REMOTE MACHINE
       chdir remote home directory: none
       too many open files: NULL returned
       incorrect type: NULL returned
       fopen file with component of path prefix is not a directory
       O_CREAT is not set and the named file does not exist
       a component of the path prefix denies search permission
       oflag permission denied
       the named file is a directory and the oflag is write
       the named file is a directory and the oflag is read/write



       HP Internal Use Only          - 161 -                        2/11/88







       NFS System Test Plan                                   Functionality



       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       too many open files: NULL returned
       incorrect type: NULL returned
       fopen file with component of path prefix is not a directory
       O_CREAT is not set and the named file does not exist
       a component of the path prefix denies search permission
       oflag permission denied
       the named file is a directory and the oflag is write
       the named file is a directory and the oflag is read/write




       12.5.6  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ffffrrrreeeeaaaadddd''''((((3333))))

       Format: int fread((char *) ptr, sizeof(* ptr),nitems,stream)
                 FILE *stream;



       These tests use the calls: chdir, fopen, and fclose.




       12.5.6.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       open a file: none
       fread stuff and see if it is right: none

       REMOTE MACHINE
       chdir remote home directory: none
       open a file: none
       fread stuff and see if it is right: none

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       open a file: none
       fread stuff and see if it is right: none




       12.5.6.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE



       HP Internal Use Only          - 162 -                        2/11/88







       NFS System Test Plan                                   Functionality



       chdir local home directory: none
       open a file: none
       use invalid stream: null returned

       REMOTE MACHINE
       chdir remote home directory: none
       open a file: none
       use invalid stream: null returned

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       open a file: none
       use invalid stream: null returned




       12.5.7  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ffffrrrreeeeooooppppeeeennnn''''((((3333))))

       Format: FILE *freopen(file-name, type, stream)
                 char *file-name, *type;
                 FILE *stream;



       These tests use the calls: chdir and fopen.




       12.5.7.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fopen valid local file: 0 return
       freopen valid local file: 0 return
          - read only
          - write only
          - read + write

       REMOTE MACHINE
       chdir remote home directory: none
       fopen valid file: 0 return
       freopen valid file: 0 return
          - read only
          - write only
          - read + write

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none



       HP Internal Use Only          - 163 -                        2/11/88







       NFS System Test Plan                                   Functionality



       fopen valid remote file: 0 return
       freopen valid remote file: 0 return
          - read only
          - write only
          - read + write




       12.5.7.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
          /* This condition is tested under fdopen */
          too many open files: NULL returned
       incorrect type: NULL returned

       REMOTE MACHINE
       chdir remote home directory: none
          /* This condition is tested under fdopen */
          too many open files: NULL returned
       incorrect type: NULL returned

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
          /* This condition is tested under fdopen */
          too many open files: NULL returned
       incorrect type: NULL returned




       12.5.8  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ffffwwwwrrrriiiitttteeee''''

       Format: int fwrite((char *) ptr, sizeof(* ptr),nitems,stream)
                 FILE *stream;



       These tests use the calls: chdir, fopen, and fclose.




       12.5.8.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fopen a file: none



       HP Internal Use Only          - 164 -                        2/11/88







       NFS System Test Plan                                   Functionality



       fwrite stuff: none
       fclose and see if the file is the same: same

       REMOTE MACHINE
       chdir remote home directory: none
       fopen a file: none
       fwrite stuff: none
       fclose and see if the file is the same: same

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fopen a file: none
       fwrite stuff: none
       fclose and see if the file is the same: same




       12.5.8.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       /* This test really does no error testing.  The following conditions are all
          tested under section 2 write. */
       LOCAL MACHINE
       chdir local home directory: none
       fopen a file: none
       fwrite lots of stuff at once: none
       fclose and see if the file is the same: same
       use invalid stream: null returned

       REMOTE MACHINE
       chdir remote home directory: none
       fopen a file: none
       fwrite lots of stuff at once: none
       fclose and see if the file is the same: same
       use invalid stream: null returned

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fopen a file: none
       fwrite lots of stuff at once: none
       fclose and see if the file is the same: same
       use invalid stream: null returned




       12.5.9  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ggggeeeettttcccc''''((((3333SSSS))))

       Format: int getc(stream)
                 FILE *stream;



       HP Internal Use Only          - 165 -                        2/11/88







       NFS System Test Plan                                   Functionality



       These tests use the calls: chdir and fopen.




       12.5.9.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fopen a file and getc it and see if it got them all: same

       REMOTE MACHINE
       chdir remote home directory: none
       fopen a file and getc it and see if it got them all: same

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fopen a file and getc it and see if it got them all: same




       12.5.9.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       invalid stream: EOF returned

       REMOTE MACHINE
       chdir remote home directory: none
       invalid stream: EOF returned

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       invalid stream: EOF returned




       12.5.10  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ggggeeeettttcccchhhhaaaarrrr''''((((3333SSSS))))

       Format: int getchar()



       These tests use the calls: chdir and fopen.






       HP Internal Use Only          - 166 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.5.10.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fopen a file  as stdin and getchar it and see if it got them all: same

       REMOTE MACHINE
       chdir remote home directory: none
       fopen a file and getchar it and see if it got them all: same

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fopen a file and getchar it and see if it got them all: same




       12.5.10.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       /* This test really does no error testing.  The following conditions are all
          tested under getc. */
       LOCAL MACHINE
       chdir local home directory: none
       invalid stream: EOF returned

       REMOTE MACHINE
       chdir remote home directory: none
       invalid stream: EOF returned

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       invalid stream: EOF returned




       12.5.11  TTTThhhheeee lllliiiibbbbrrrraaaarrrryyyy ccccaaaallllllll ''''ggggeeeettttwwww''''((((3333SSSS))))

       Format: int getw(stream)
                 FILE *stream;



       These tests use the calls: chdir and fopen.








       HP Internal Use Only          - 167 -                        2/11/88







       NFS System Test Plan                                   Functionality



       12.5.11.1  _T_e_s_t_s__f_o_r__c_o_r_r_e_c_t__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       fopen a file and getw it and see if it got them all: same

       REMOTE MACHINE
       chdir remote home directory: none
       fopen a file and getw it and see if it got them all: same

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       fopen a file and getw it and see if it got them all: same




       12.5.11.2  _T_e_s_t_s__f_o_r__e_r_r_o_r__r_e_s_p_o_n_s_e


       LOCAL MACHINE
       chdir local home directory: none
       invalid stream: EOF returned

       REMOTE MACHINE
       chdir remote home directory: none
       invalid stream: EOF returned

       /* all of the following tests use the full remote pathname */
       chdir local home directory: none
       invalid stream: EOF returned






















       HP Internal Use Only          - 168 -                        2/11/88







       NFS System Test Plan                                         Gateway



       13.  TTTTooooppppoooollllooooggggyyyy////GGGGaaaatttteeeewwwwaaaayyyy TTTTeeeessssttttiiiinnnngggg ((((SSSStttteeeevvvveeee BBBBooooooootttthhhh))))


       HP's series 9K NFS code will be certified through 2 gateways  and  a
       bridge: a SUN workstation, a series 9K workstation, and the McBridge
       (bridge) box from Roseville Networks Division (RND).  NFS  operation
       through  a gateway/bridge will be fully certified only after testing
       fails to find defects in the code.


       ASSUMPTIONS: YP tests exist in a separate subdirectory under
                      the nfs subdirectory; defects associated with
                      a local (same LAN) YP server have been found
                      and fixed.
                    The 'ypset' command will be available to execute
                      the YP functional tests through a gateway.
                    The 9K gateway code has previously been tested
                      and certified w/out NFS interactions
       ISSUES:      responsibility for testing the following
                      configurations:

        _______            ______            _______
       |       |          |      |          |       |
       |  PC   | -------> | Gway | -------> |  9K   |
       |       |          |      |          |       |
        -------            ------            -------
        _______            ______            _______
       |       |          |      |          |       |
       |  9K   | -------> | Gway | -------> |  VAX  |
       |       |          |      |          |       |
        -------            ------            -------



       Gateway/bridge testing will consist of running the quick regression,
       functional, and stress tests between two nodes communicating through
       a  gateway/bridge.   The  two  nodes  will  not  necessarily  be  on
       different physical LAN cables.

       A list of any defects  found  in  HP's  competitors'  code  will  be
       maintained and given to marketing at the end of the project.


       13.1  SSSSUUUUNNNN GGGGaaaatttteeeewwwwaaaayyyy TTTTeeeessssttttssss


       RESPONSIBLE ENGINEER: Jason Zions

       Since the majority of LAN gateways (in the NFS marketplace) are  SUN
       workstations, the majority of gateway testing will be with the SUN.




       HP Internal Use Only          - 169 -                        2/11/88







       NFS System Test Plan                                         Gateway



       13.1.1  qqqquuuuiiiicccckkkk rrrreeeeggggrrrreeeessssssssiiiioooonnnn


       Run continuous 12-hour repetitions of  the  quick  regression  tests
       until they fail to isolate defects.


        _______            _______            _______
       |       |          |       |          |       |
       |  9K   | -------> |  SUN  | -------> |  9K   |
       |       |          |       |          |       |
        -------            -------            -------

       PERFORM TIME:    3.0  md





       13.1.2  ffffuuuunnnnccccttttiiiioooonnnnaaaallll aaaannnndddd ssssttttrrrreeeessssssss tttteeeessssttttssss


       Run continuous 12-hour repetitions  of  the  functional  and  stress
       tests until they fail to isolate defects.


        _______            _______            _______
       |       | -------> |       | -------> |       |
       |  9K   |          |  SUN  |          |  9K   |
       |       | <------- |       | <------- |       |
        -------            -------            -------

       PERFORM TIME:    4.0  md



       13.2  9999KKKK GGGGaaaatttteeeewwwwaaaayyyy TTTTeeeessssttttssss



       RESPONSIBLE ENGINEER: Steve Booth
       ASSUMPTIONS:  SUN gateway testing already in progress; most
                       gateway-related defects already isolated and
                       fixed
                     9K gateway code already tested w/out NFS


       The intent is to isolate NFS defects, NOT 9K gateway defects.






       HP Internal Use Only          - 170 -                        2/11/88







       NFS System Test Plan                                         Gateway



       13.2.1  ffffuuuunnnnccccttttiiiioooonnnnaaaallll aaaannnndddd ssssttttrrrreeeessssssss tttteeeessssttttssss


       Run the functional and stress  tests  overnight  until  all  defects
       (found by the testing) are resolved.


        _______            _______            _______
       |       |          |       |          |       |
       |  9K   | -------> |  9K   | -------> |  SUN  |
       |       |          |       |          |       |
        -------            -------            -------

       PERFORM TIME:    1.0  md




        _______            _______            _______
       |       |          |       |          |       |
       |  SUN  | -------> |  9K   | -------> |  9K   |
       |       |          |       |          |       |
        -------            -------            -------

       PERFORM TIME:    1.0  md



        _______            _______            _______
       |       | -------> |       | -------> |       |
       |  9K   |          |  9K   |          |  9K   |
       |       | <------- |       | <------- |       |
        -------            -------            -------

       PERFORM TIME:    2.0  md



       13.3  MMMMccccBBBBrrrriiiiddddggggeeee TTTTeeeessssttttssss



       RESPONSIBLE ENGINEER: Steve Booth
       DEPENDENCIES: McBridge box available by mid-April
       ASSUMPTIONS:  SUN and 9K  gateway testing already in progress;
                     most gateway-related defects already isolated
                       and fixed
                     McBridge box already tested and working


       It is anticipated that NFS testing via McBridge will be done in late



       HP Internal Use Only          - 171 -                        2/11/88







       NFS System Test Plan                                         Gateway



       April.




       13.3.1  ffffuuuunnnnccccttttiiiioooonnnnaaaallll aaaannnndddd ssssttttrrrreeeessssssss tttteeeessssttttssss


       Run the functional and stress  tests  overnight  until  all  defects
       (found by the testing) are resolved.


        _______            _______            _______
       |       |          |       |          |       |
       |  9K   | -------> |  McB  | -------> |  9K   |
       |       |          |       |          |       |
        -------            -------            -------

       PERFORM TIME:    1.0  md



        _______            _______            _______
       |       |          |       |          |       |
       |  SUN  | -------> |  McB  | -------> |  9K   |
       |       |          |       |          |       |
        -------            -------            -------

       PERFORM TIME:    1.0  md



        _______            _______            _______
       |       | -------> |       | -------> |       |
       |  9K   |          |  McB  |          |  9K   |
       |       | <------- |       | <------- |       |
        -------            -------            -------

       PERFORM TIME:    2.0  md















       HP Internal Use Only          - 172 -                        2/11/88







       NFS System Test Plan                                   Getdirentries



       14.  GGGGeeeennnneeeerrrraaaallll ggggeeeettttddddiiiirrrreeeennnnttttrrrriiiieeeessss ffffuuuunnnnccccttttiiiioooonnnnaaaalllliiiittttyyyy ((((MMMMiiiikkkkeeee SSSShhhhiiiipppplllleeeeyyyy))))

       Getdirentries is now the recommended method of getting entries  from
       a directory.  The tests here should, in most part, be done for local
       directories and then to NFS directories.  When doing the  access  to
       NFS  directories,  the  tests should be done to both a HP node and a
       Sun node as directory formats differ a bit between the two machines,
       but results need to be the same.

       Another part of the test will be to see how useful the man page  is.
       Therefore, there will be no instructions on how to use getdirentries
       or to access  the  directory  entries  inside  the  buffer  that  is
       returned from the call to getdirentries.

       RESPONSIBLE ENGINEER: Jeff Elison
       DEPENDENCIES: Having a HP-UX kernel that supports getdirentries().
       ISSUES:





       14.0.1  IIIInnnnvvvvaaaalllliiiidddd ffffiiiilllleeee ddddeeeessssccccrrrriiiippppttttoooorrrr

       Give getdirentries() an invalid file descriptor and try to read from
       it.  For example, -1 or a file descriptor for which no file has been
       opened.
       RESULT:  getdirentries() should return -1 and errno should be EBADF



       IMPLEMENT TIME:  1.5  md
                          (This is to account for the overhead to
                           establish the whole series of getdirentries tests.)
       PERFORM TIME:    0.25 md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




       14.0.2  VVVVaaaalllliiiidddd ffffiiiilllleeee ddddeeeessssccccrrrriiiippppttttoooorrrr,,,, bbbbuuuutttt ffffoooorrrr aaaa nnnnoooorrrrmmmmaaaallll ffffiiiilllleeee

       Give getdirentries() a valid file descriptor, but have the descriptor refer
       to a normal file.
       RESULT:  getdirentries() should return -1 and errno should be ENOTDIR



       IMPLEMENT TIME:  0.1  md
       PERFORM TIME:    0.1  md



       HP Internal Use Only          - 173 -                        2/11/88







       NFS System Test Plan                                   Getdirentries



       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




       14.0.3  BBBBaaaadddd bbbbuuuuffffffffeeeerrrr ppppooooiiiinnnntttteeeerrrr

       When trying to use getdirentries(), give it  a  bad  value  for  the
       buffer  pointer  (second  parameter).  For example, try -1, 0, 1 and
       4761(just some random non-small integer).
       RESULT:  getdirentries() should return -1 and errno should be EFAULT



       IMPLEMENT TIME:  0.1  md
       PERFORM TIME:    0.1  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




       14.0.4  VVVVaaaarrrryyyy tttthhhheeee bbbbyyyytttteeeessss RRRReeeeqqqquuuueeeesssstttteeeedddd

       Getdirentries() should be requested to return at least a block  size
       worth  of  information.   Asking for less gives unknown results, and
       these results need to be identified.  For local directories, some of
       the  values  may return data.  It is over NFS, that strange behavior
       may occur.  So this test will vary the number of bytes requested  to
       be returned.
       Ask for -1 bytes,  should fail with errno=EINVAL.
       Ask for 0 bytes, should succeed, but return no data.
       Ask for 1 byte, unknown results.
       Ask for 2 bytes, unknown results.
       Ask for 8 bytes, unknown results.
       Ask for 16 bytes, unknown results.
       Ask for 32 bytes(the size of a hp-ux entry), unknown results.
       Ask for 40 bytes(the size of a hp-ux entry plus 8 bytes), unknown results.
       Ask for 256 bytes, unknown results.
       Ask for 512 bytes, unknown results.
       Ask for 1000 bytes(just a bit under the block size of a hp-ux directory),
          unknown results.
       Ask for 1056 bytes(the block size of a hp-ux directory plus 1 entry), unknown
          results.
       RESULT:  See above.



       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.1  md



       HP Internal Use Only          - 174 -                        2/11/88







       NFS System Test Plan                                   Getdirentries



       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




       14.0.5  NNNNoooorrrrmmmmaaaallll uuuussssaaaaggggeeee PPPPaaaarrrrtttt 1111

       Create an empty directory and verify that it only contains  "."  and
       ".."
       RESULT:  should work



       IMPLEMENT TIME:  0.1  md
       PERFORM TIME:    0.1  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




       14.0.6  NNNNoooorrrrmmmmaaaallll uuuussssaaaaggggeeee PPPPaaaarrrrtttt 2222

       Create an empty directory and verify that it only contains  "."  and
       ".."  Now  creat(OS)  files  in  the directory until the size of the
       directory[stat(OS)] grows from 1024 to 2048 making sure you are able
       to always read each entry in the directory.

       RESULT:  should work



       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.1  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




       14.0.7  NNNNoooorrrrmmmmaaaallll uuuussssaaaaggggeeee PPPPaaaarrrrtttt 3333

       Create a large directory (3K in  size).   Read  its  contents  using
       varying  values for the number of bytes requested.  Read it in three
       1K chunks, in two 1.5K chunks and in one 3K chunk.   Make  sure  you
       are able to always read each entry in the directory.

       RESULT:  should work





       HP Internal Use Only          - 175 -                        2/11/88







       NFS System Test Plan                                   Getdirentries



       IMPLEMENT TIME:  0.1  md
       PERFORM TIME:    0.1  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




       14.0.8  LLLLoooonnnngggg ffffiiiilllleeee nnnnaaaammmmeeeessss

       This test will try to read entries that refer  to  files  with  long
       names.   This  can  only be done to a non-HP server over NFS.  A Sun
       will do.  On the server, create several files.  The first file  will
       have  a  name  of  length 251 characters.  The subsequent files will
       have names of  lengths  252,  253,  254  and  255  characters.   Use
       getdirentries()  to  make  sure that the file names can correctly be
       obtained from the remote server.

       RESULT:  should work



       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.1  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's



       14.0.9  CCCCDDDDFFFF''''ssss aaaannnndddd ggggeeeettttddddiiiirrrreeeennnnttttrrrriiiieeeessss

       The test for CDF's and getdirentries will be  to  run  the  previous
       tests  and to use a CDF directory instead of a normal directory.  To
       make a CDF that is a directory, do the following:

       mkdir       the_dir
       chmod  u+s  the_dir
       mkdir       the_dir

       After the tests are concluded the CDF directory can be removed  with
       the following command:

       rm -rf the_dir+

       RESULT:  The results should be the same as the tests done on normal
       directories.



       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    1.0  md



       HP Internal Use Only          - 176 -                        2/11/88







       NFS System Test Plan                                   Getdirentries



       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




















































       HP Internal Use Only          - 177 -                        2/11/88







       NFS System Test Plan                          Hardware Configuration



       15.  HHHHaaaarrrrddddwwwwaaaarrrreeee TTTTeeeessssttttiiiinnnngggg ((((SSSStttteeeevvvveeee BBBBooooooootttthhhh))))


       Hardware testing for the Model 9000 machines will focus on 2  areas:
       amount  of RAM in the machine, and speed of the system disc or other
       mounted (and exported) mass storage device.  Standard configurations
       for  memory  and  disc  device will be tested throughout the quality
       assurance (QA) period, and will not be specifically included in this
       chapter.

       The goal of this testing is to find defects which would not be found
       by testing "standard" configurations.


       15.1  SSSSeeeerrrriiiieeeessss 8888xxxx0000 mmmmaaaacccchhhhiiiinnnneeeessss


       TO BE DEFINED


       15.2  SSSSeeeerrrriiiieeeessss 3333xxxx0000 mmmmaaaacccchhhhiiiinnnneeeessss


       The configurations found in the matrix that follows will be used  in
       conjunction  with  the stress tests (defined in the chapter entitled
       "Stress") and will be executed overnight until all defects found  by
       the tests have been fixed.



       2M  = suggested minimum RAM to be used on the 310/320 during testing
       4M  = suggested minimum RAM to be used on the 330 during testing
       8M  = suggested minimum RAM to be used on the 350 during testing
       4M  = suggested maximum RAM to be used on the 310/320 during testing
       6M  = suggested maximum RAM to be used on the 330 during testing
       10M = suggested maximum RAM to be used on the 350 during testing

           Configuration matrix

                 | 310     320     330     350
           ------+----------------------------
           7935/ |  2M      4M      4M     10M
           7937  |
                 |
           9122  |  4M      2M      6M      8M

       The 9122 is considered one of HP's slower discs,
       while the 7935 and 7937 are considered fast discs.






       HP Internal Use Only          - 178 -                        2/11/88







       NFS System Test Plan                          Hardware Configuration



       Each machine in the above matrix has two  configurations,  one  each
       with  a  "large"  and  "small"  amount  of memory.  For example, the
       series 310's small configuration uses 2Mbytes of memory and  a  7935
       or 7937 disc, and its large configuration uses 4Mbytes of memory and
       a 9122 disc.  These configurations  are  used  in  the  test  matrix
       below.


           Test matrix, client configuration listed first (Client,Server)
               L=large memory configuration
               S=small memory configuration
               W=whatever is available
               x=not tested

                                        Client

                       | 310     320     330     350     SUN
                   ----+------------------------------------
                   310 | S,S      x       x      L,S     W,L
                   320 |  x       x      L,S      x       x
           Server  330 |  x      L,S      x       x      W,L
                   350 | L,S      x       x      L,L     W,S
                   SUN | S,W      x       x      L,W      x
                   VAX | L,W      x       x      S,W      x


       The configurations shown in the test matrix should be sufficient  to
       find the defects relating to NFS/YP-RAM/DISC interactions.

       The LINUS and BUFFALO tape drives are CS80  devices,  and  could  be
       mounted  and  used  as  extremely  slow  mass  storage devices.  The
       scenario is considered bizarre enough not to warrant testing.


       RESPONSIBLE ENGINEERS: Steve Booth, Jeff Elison
       ASSUMPTIONS :   defects found by early invocations of the stress tests
                       have been found and fixed; the code is somewhat stable
       DEPENDENCIES:   availability of 9122, 7935, and 7937 disc drives
       ISSUES:         the PHOENIX card (MS-DOS card) is capable of accessing
                       the HPUX file system, and so can use NFS; the issue is
                       where responsibility lies for testing PHOENIX with NFS,
                       (PHOENIX contact: George Meyer)
       PERFORM TIME:   26.0  md
                       (13 test matrix cases x 2 md per case)










       HP Internal Use Only          - 179 -                        2/11/88







       NFS System Test Plan                                  Long Filenames



       16.  TTTTeeeessssttttssss wwwwiiiitttthhhh lllloooonnnngggg ffffiiiilllleeeennnnaaaammmmeeeessss (((( >>>>11114444 cccchhhhaaaarrrraaaacccctttteeeerrrrssss )))) ((((SSSStttteeeevvvveeee BBBBooooooootttthhhh))))


       NFS compabilility requires that HP machines support  filenames  with
       more  than the traditional maximum of 14 characters, at least across
       NFS boundaries.

       The Series 300, under a proposal current as of 5/28/87, will support
       longer  filenames  ONLY  across NFS boundaries, and will enforce the
       14-character limit locally.  UFS (local) filenames will be truncated
       to a maximum of 14 characters, while NFS filenames will be passed to
       the remote NFS server untouched (maximum of  255  characters).   For
       example, an HP NFS server node will truncate all files it creates on
       the local HP system to a maximum of 14 characters.

       Series 800 machines, as of  5/28/87,  will  support  long  filenames
       locally.


       16.1  TTTTeeeessssttttiiiinnnngggg MMMMeeeetttthhhhooooddddoooollllooooggggyyyy


       A sampling of the existing functional tests will be  copied  into  a
       separate  subdirectory  under  the  "nfs"  directory,  and  will  be
       modified to use long filenames.

       The tests that will be copied/modified are:
           rm, touch, mkdir
           creat, link, open
           rename, symlink (symbolic link tests)

       Behavioral differences will be expected when  these  tests  are  run
       from SUN->HP, HP->HP, and HP->SUN.



       16.2  SSSScccchhhheeeedddduuuulllleeee EEEEssssttttiiiimmmmaaaatttteeeessss,,,, AAAAssssssssuuuummmmppppttttiiiioooonnnnssss



       IMPLEMENT TIME: 2 md  (includes time to characterize SUN/HP differences)
       PERFORM TIME:   5 md
       ASSUMPTIONS: long filename support has been added to the product
                        at least 3 weeks prior to the second Early Bird release
                    a common filename parsing routine exists which is called by
                        all relevant commands
                    a common filename parsing routine exists which is called by
                        all relevant system calls
       RESPONSIBLE ENGINEER: unknown





       HP Internal Use Only          - 180 -                        2/11/88







       NFS System Test Plan                      Memory Configuration Tests



       17.  MMMMeeeemmmmoooorrrryyyy TTTTeeeessssttttssss


       Memory testing will consist of setting up certain memory  parameters
       and then running the functional tests.


       17.1  CCCCoooonnnnffffiiiigggguuuurrrraaaattttiiiioooonnnnssss ttttoooo bbbbeeee rrrruuuunnnn


             A)  300 --> 300
                 300 <-- 300,   achieved by EB3
             B)  800 --> 800
                 800 <-- 800,   achieved by IC3

                 RESPONSIBLE ENGINEER: Thomas Bartz



       17.2  TTTTeeeesssstttt SSSSeeeelllleeeeccccttttiiiioooonnnn


       Following preliminary  setup  of  the  memory  parameters,  the  nfs
       functional  tests  (e.g.,  prog.fu)  will be run in one direction at
       first, and later bidirectionally (one stream and dual streams).


       17.3  SSSSppppeeeecccciiiiaaaallll SSSSeeeettttuuuupppp


           There are some configurable parameters in the  kernel  that  the
       system  administrator  can alter which affect the memory pool.  This
       test plan takes advantage of this ability to artificially alter  the
       network  memory  so  we  can  test  the  system  at  upper  boundary
       conditions.  The parameters used in this  plan  are  'netmemthresh',
       'netmemmax',  and  'nmbclusters'.   The  following paragraphs give a
       brief description of them and the concept of memory reservation.

           'netmemmax'  is  the  maximum  amount  of  memory  that  can  be
       allocated  to  the network.  However, memory is allocated only as it
       is needed.  If "full memory reservation" is in force, then for  each
       connection  established,  the maximum memory that could ever be used
       by that connection is reserved whether or not that  much  memory  is
       required.   When  full  memory  reservation is disabled, connections
       will be established as long as SOME memory exists in the  pool,  but
       only  a  minimum  amount  of  memory is actually allocated.  Then as
       packets are sent and received, additional memory  is  allocated  "on
       the fly" according to the amount of data that must be stored.

           By default, memory is reservation enabled when the system brings
       up  networking.   As  connections  are  established  and  memory  is



       HP Internal Use Only          - 181 -                        2/11/88







       NFS System Test Plan                      Memory Configuration Tests



       reserved, the amount of memory allocated to the network grows.  When
       enough  connections  exist  so the level of allocated memory exceeds
       'netmemthresh', memory reservation is automatically turned off  once
       and forevermore (regardless of the number of connections that are up
       any any time thereafter).

           Whether  memory  reservation  is  in  effect  or  not,  as  each
       connection  is  established,  the  memory  required  to create it is
       compared with the amount of memory remaining in the pool.   Contrary
       to  what  one  may think, this comparison is made with the parameter
       'nmbclusters,' rather than with 'netmemmax.' Nmbclusters  represents
       the  number  of  2kbyte  mbuf clusters which may be allocated to the
       network.  Normally its value is derived directly from netmemmax, but
       one  can  alter  it  through adb to artifically saturate the network
       pool.

           The kernel parameters can be altered by executing

                     adb -k -w /hp-ux /dev/kmem

       to enter adb and making modifications to these variables  in  either
       the   object   file  (/hp-ux)  or  the  core  file  (/dev/kmem),  as
       appropriate, with adb commands. (See adb(1)).  Since /hp-ux  is  the
       kernel  object file, modifications made there will stay intact until
       overwritten, but modifications made to the core file /dev/kmem  will
       only  remain as long as the system is not rebooted.   For the system
       under test, "nm -xv" can be used to determine the addresses for  the
       parameters  to  be  changed, or use the symbols in adb itself.  Once
       the addresses are determined, they can be altered with adb.

            For more  information  regarding  these  parameters  and  their
       effects,  please refer to "Care and Feeding of Your HP-UX Networking
       Memory System," by Peter Notess.



       17.4  PPPPrrrreeeelllliiiimmmmiiiinnnnaaaarrrryyyy MMMMeeeeaaaassssuuuurrrreeeemmmmeeeennnnttttssss


       First, we need to determine the maximum amount of memory  used  when
       running the functional test suite.

           1) Reboot the test system with reservation on (set netmemthresh to
              -1 in /hp-ux).   (Be sure to set netmemmax to a sufficiently large
              value so the system won't run out of memory.  When testing the
              300, this will probably require a 350 with 8M of memory.)

           2) After the system is up and networking is running, do a "netstat -m"
              do see how much memory has been allocated to the network.  (This is
              shown as "___kbytes allocated to network".)   Call this value
              INIT.RSV



       HP Internal Use Only          - 182 -                        2/11/88







       NFS System Test Plan                      Memory Configuration Tests



           3) Run the nfs functional tests to the remote system from the system
              under test.

           4) After the tests have executed (and passed) do another "netstat -m"
              to see how much total memory had to be allocated to the nework to
              execute the functional tests.  Call this value FINAL.RSV.FROM

           5) The amount of additional memory required to run the functional tests
              with reservation on from the system under test is then

                      RSV.FROM = (FINAL.RSV.FROM - INIT.RSV)

           6) Repeat the above tests, but run the functional tests from the remote to
              the system under test.  Determine the additional memory required to
              run the functional tests to the system under test with reservation on,
              RSV.TO

           7) Repeat the above steps after powering up the system without reservation
              (change netmemthresh to 0 in /hp-ux and reboot).  Determine the maximum
              amount of memory that was
              actually used after running the tests by
              reading the "___kbytes allocated to network" line from netstat -m output.
              Call these values NORSV.FROM and NORSV.TO

           NOTE 1:  If the test system is powered up with insufficient memory
                    (especially in the case of reservation on), this process
                    may take a few iterations.  If possible, powerup with more
                    memory (value of netmemmax) than you're sure you'll need.

           NOTE 2:  Record what networking processes you are running on your
                    system and whether running as a ypserver or a ypmaster, etc
                    so another person could duplicate your configuration in the
                    future and use your values for RSV.TO, RSV.FROM, NORSV.TO and
                    NORSV.FROM without having to repeat the above steps.




       17.5  TTTThhhheeee AAAAccccttttuuuuaaaallll TTTTeeeesssstttt


       (1) With reservation on (netmemthresh = -1), boot up the test system
       so that netmemmax exceeds

                 max(FINAL.RSV.FROM, FINAL.RSV.TO) + (0.5 * max(RSV.TO, RSV.FROM))

       This is simply to ensure that we have enough memory available to run
       the  tests  as described below.  After the system is up, also modify
       nmbclusters (in /dev/kmem) to

                       [(FINAL.RSV.FROM + (0.1 * RSV.FROM)) div 2048]



       HP Internal Use Only          - 183 -                        2/11/88







       NFS System Test Plan                      Memory Configuration Tests



       (2) Now execute one stream of the functional tests from  the  system
       under  test  to  the  remote.   All  tests should pass because ample
       memory should be allocated.

       (3) Next execute two streams of the functional tests simultaneously.
       Failures  that occur should be due only to running out of memory and
       the system should handle the problems in a robust manner.

       (4) Without rebooting or changing the system, start a  single  fresh
       stream to the remote.  All tests should pass again.

       (5) Set nmbclusters to

               [(FINAL.RSV.TO + (0.1 * RSV.TO)) div 2048]

       and repeat steps (2)-(4) from the remote to the system under test.

       (6) Repeat steps  1-5  with  reservation  off  (netmemthresh  =  0),
       setting nmbclusters to

               [(FINAL.NORSV.FROM + 0.1 * (NORSV.FROM)) div 2048 ]

       when running the tests FROM the system under test.  Set  nmbclusters
       to

               [(FINAL.NORSV.TO + 0.1 * (NORSV.TO)) div 2048 ]

       when running the tests TO the system under test.


























       HP Internal Use Only          - 184 -                        2/11/88







       NFS System Test Plan                         Native Language Support



       18.  NNNNaaaattttiiiivvvveeee LLLLaaaannnngggguuuuaaaaggggeeee SSSSuuuuppppppppoooorrrrtttt ((((NNNNLLLLSSSS)))) ((((CCCCrrrriiiissssttttiiiinnnnaaaa MMMMaaaahhhhoooonnnn))))


       Native   Language   Support   involves    primarily    two    steps.
       Prelocalization  is  the  modifcation to make use of resources which
       are limited to seven bit characters.   Localization  is  taking  the
       prelocalized  command  and  providing the necessary message catalogs
       and tables to make it run in a particular language such  as  French.
       We will only do the prelocalization step.  The following features of
       Native Language Support (NLS) will be supported:

       o Filename support:

           - We will support 8-bit filenames

           - We will support 16-bit filenames to the extent allowed by  the
             HP-UX kernel.

       o Support for message catalogues

       o Support for local customs

       o Support for language dependent features (if any)

       o Support eight and sixteen bit characters


       RESPONSIBLE ENGINEER: Cristina Mahon
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME: 2 md
       PERFORM TIME:   1 md



       18.1  8888----bbbbiiiitttt ffffiiiilllleeeennnnaaaammmmeeee ssssuuuuppppppppoooorrrrtttt


       Create files with names that contain among themselves  all  possible
       8-bit characters.  Copy those files from an NFS-mounted directory to
       a local directory.  Do an ls of both directories and  compare  their
       contents.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              All the files will have been transferred.







       HP Internal Use Only          - 185 -                        2/11/88







       NFS System Test Plan                         Native Language Support



       18.2  11116666----bbbbiiiitttt ffffiiiilllleeeennnnaaaammmmeeee ssssuuuuppppppppoooorrrrtttt


       Full support for 16-bit filenames is not incorporated in  the  HP-UX
       kernel,  but  many  16-bit  filenames will be correctly interpreted.
       Problems occur if one of  the  16-bit  characters  in  the  filename
       happens  to  have  as  a second byte the byte value equal to "/". In
       that case the HP-UX kernel will not correctly interpret  the  16-bit
       character  because  it  will see the "/".  This test will just try a
       few filenames that do not use a second byte of byte value  equal  to
       "/".   It  is not intended to be a complete test of all possible 16-
       bit filenames.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              All files that do not have a second byte of value "/" will be
       correctly interpreted.



       18.3  MMMMeeeessssssssaaaaggggeeee ccccaaaattttaaaalllloooogggg ssssuuuuppppppppoooorrrrtttt:::: ccccaaaattttaaaalllloooogggg pppprrrreeeesssseeeennnntttt


       A message catalog for a language will be created for an NFS  program
       that  was  prelocalized.   The environment language variable will be
       set for that language and an output message will be  produced.   The
       message   produces  should  be  the  corresponding  message  in  the
       database.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The message should match the database message.



       18.4  MMMMeeeessssssssaaaaggggeeee ccccaaaattttaaaalllloooogggg ssssuuuuppppppppoooorrrrtttt:::: ccccaaaattttaaaalllloooogggg mmmmiiiissssssssiiiinnnngggg


       The environment language  variable  will  be  set  for  a  different
       language  than  n-computer  and  an output message will be produced.
       Since the message catalog for the specific language and program will
       be  missing  the  message  output  should be the original hard-coded
       message.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The message should match the hard-coded message.




       HP Internal Use Only          - 186 -                        2/11/88







       NFS System Test Plan                         Native Language Support



       18.5  MMMMeeeessssssssaaaaggggeeee ccccaaaattttaaaalllloooogggg ssssuuuuppppppppoooorrrrtttt:::: nnnnoooo llllaaaannnngggguuuuaaaaggggeeee ddddeeeeffffiiiinnnneeeedddd


       The environment language variable will not be set. Since there  will
       be  no  language  defined  the message output should be the original
       hard-coded message.  All tests  that  have  run  so  far  using  the
       scaffold have performed this test by default.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The message should match the hard-coded message.



       18.6  LLLLooooccccaaaallll ccccuuuussssttttoooommmmssss ssssuuuuppppppppoooorrrrtttt:::: ccccooooddddeeee rrrreeeeaaaaddddiiiinnnngggg


       Code read all the modules to make sure that any  messages  that  use
       times,  dates,  numbers  or  yes/no  prompts  have  been modified to
       support local customs.

       TYPE OF TEST:
              code review



       18.7  LLLLooooccccaaaallll ccccuuuussssttttoooommmmssss ssssuuuuppppppppoooorrrrtttt:::: eeeexxxxeeeeccccuuuuttttiiiioooonnnn


       Set the environment language variable  to  a  certain  language  and
       produce  a  message  containing  a date from an NFS program that has
       been prelocalized.  The date should match the  format  expected  for
       the language variable defined in the environment.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The date should match the format for the language.



       18.8  LLLLaaaannnngggguuuuaaaaggggeeee ddddeeeeppppeeeennnnddddeeeennnntttt ffffeeeeaaaattttuuuurrrreeeessss ssssuuuuppppppppoooorrrrtttt:::: ccccooooddddeeee rrrreeeeaaaaddddiiiinnnngggg


       Code read all the modules to make sure that any  messages  that  use
       type analysis, shifting, or sorting of characters have been modified
       to use the conventions of the native language.  I can't think of any
       NFS command that uses any of the above.

       TYPE OF TEST:



       HP Internal Use Only          - 187 -                        2/11/88







       NFS System Test Plan                         Native Language Support



              code review



       18.9  8888----bbbbiiiitttt cccchhhhaaaarrrraaaacccctttteeeerrrr ssssuuuuppppppppoooorrrrtttt


       Produce a file containing all possible 8-bit characters and cat  the
       file  from  an  NFS  mounted  directory to another file in the local
       system.  Compare the two files.  They should be identical.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The two files should be identical.



       18.10  11116666----bbbbiiiitttt cccchhhhaaaarrrraaaacccctttteeeerrrr ssssuuuuppppppppoooorrrrtttt


       Produce a file containing all possible  16-bit  characters  for  the
       Japanese  language and cat the file from an NFS mounted directory to
       another file in the local system.   Compare  the  two  files.   They
       should  be identical.  16-bit characters are restricted according to
       the HP-15 standard to characters with a  first  byte  in  the  ascci
       reange  of  129  to 254, and a second byte in the range of 34 to 126
       and 128 to 254.

       TYPE OF TEST:
              functional
       EXPECTED OUTPUT:
              The two files should be identical.





















       HP Internal Use Only          - 188 -                        2/11/88







       NFS System Test Plan                          PC NFS deamon (pcnfsd)



       19.  PPPPCCCC NNNNFFFFSSSS TTTTeeeesssstttt PPPPllllaaaannnn ((((JJJJoooohhhhnnnn DDDDiiiilllllllleeeeyyyy))))


       This chapter briefly covers  the  testing  needed  for  the  PC  NFS
       product; this chapter covers mainly the UNIX side of it, the pcnfsd.
       It is assumed that the PC section will be testing  the  PC  to  UNIX
       functionality.


       19.1  PPPPCCCC ssssiiiiddddeeee PPPPCCCC////NNNNFFFFSSSS tttteeeessssttttiiiinnnngggg

            RESPONSIBLE ENGINEER: Marie Dotts
            ASSUMPTIONS:          The PC section will do PC/NFS testing
            DEPENDENCIES:         A UNIX system and pcnfsd must be available

       The  PC/NFS  testing  should   include   testing   of   all   PC/NFS
       functionality.   We are assuming that someone in the PC section will
       write and run all of these tests; they will need aid from someone on
       the UNIX side.  John Dilley would be the appropriate engineer, since
       he has responsibility for the pcnfsd module.




       19.1.1  NNNNEEEETTTT NNNNAAAAMMMMEEEE ccccoooommmmmmmmaaaannnndddd


       The PC/NFS testing should include testing of  the  PC  authorization
       command, NNNNEEEETTTT NNNNAAAAMMMMEEEE uuuusssseeeerrrr [[[[ppppaaaasssssssswwwwoooorrrrdddd]]]].  This command allows a PC user to
       authenticate himself on the UNIX NFS server system,  causing  future
       accesses  to  proceed  as  the  _u_s_e_r  named  in the command.  Before
       entering this command, the PC/NFS user should be able to access  the
       UNIX system as _n_o_b_o_d_y (UNIX userid -2).  After entering the command,
       the PC/NFS user should be able to access the UNIX system as _u_s_e_r.




       19.1.2  RRRReeeemmmmooootttteeee PPPPrrrriiiinnnntttt SSSSppppoooooooolllliiiinnnngggg



       The PC/NFS user should be able to spool print jobs to  the  printers
       available  on  the  UNIX  NFS host.  The print spooling will use the
       standard HP-UX "lp" interface.  The commands which the  PC/NFS  user
       must  be  able  to  use  are: pppprrrr____iiiinnnniiiitttt: returns the name of the spool
       directory pppprrrr____ssssttttaaaarrrrtttt: spools the given file

       The test for this will probably have to be manual.





       HP Internal Use Only          - 189 -                        2/11/88







       NFS System Test Plan                          PC NFS deamon (pcnfsd)



       19.1.3  PPPPCCCC////NNNNFFFFSSSS pppprrrriiiinnnntttt ssssppppoooooooolllliiiinnnngggg


       This test should probably be  done  manually.   It  is  designed  to
       exercise  the  different  options  available for printing.  The test
       should verify that  the  PPPPRRRR____IIIINNNNIIIITTTT  command  creates  the  appropriate
       directory,  and  returns the correct results.  It should also verify
       that the PPPPRRRR____SSSSTTTTAAAARRRRTTTT command accepts the printer name, user  name,  and
       client  name  options,  and spools the print file correctly.  If the
       file name is not found, PR_START should return  PR_RES_NO_FILE.   If
       it  finds  the  name  with  the  ._s_p_l  suffix, then it should return
       PR_RES_ALREADY, indicating that the file is already  being  printed.
       In  both cases, no new file should be spooled.  If the user names an
       empty file (0  bytes),  it  should  be  removed,  not  spooled,  and
       PR_RES_NULL  should  be returned.  If all the above passes, the file
       should have the ._s_p_l suffix appended to it, and the file  should  be
       spooled using lp.


       19.2  UUUUNNNNIIIIXXXX ssssiiiiddddeeee ppppccccnnnnffffssssdddd tttteeeessssttttiiiinnnngggg

            RESPONSIBLE ENGINEER: John A Dilley
            DEPENDENCIES:         PC/NFS client availabile
            ISSUES:               Who will do PC/NFS testing,
                                  How much will they do?

       The pcnfsd can be most easily  tested  from  a  PC;  if  the  PC/NFS
       testing  includes all of the major functionality of the pcnfsd, then
       few additional tests will be necessary.




       19.2.1  ppppccccnnnnffffssssdddd ssssppppoooooooollll ddddiiiirrrreeeeccccttttoooorrrryyyy ooooppppttttiiiioooonnnn

             IMPLEMENT TIME:  1.0 md
             PERFORM TIME:    2.0 md
             TYPE OF TEST:    functional
             EXPECTED OUTPUT: no output if the test passes

       This test will exercise the only option that the pcnfsd has  --  the
       name of the print spool directory.  Without any options, pcnfsd will
       default to /_u_s_r/_s_p_o_o_l/_l_p;  with  options,  pcnfsd  takes  the  first
       option  as  the  path name to the spool direcotry.  If given a bogus
       path name, pcnfsd should report an error message  and  exit  with  a
       non-zero  exit status.  In all other cases, it should not report any
       errors and should exit with a zero exit status.







       HP Internal Use Only          - 190 -                        2/11/88







       NFS System Test Plan                                     Performance



       20.  PPPPeeeerrrrffffoooorrrrmmmmaaaannnncccceeee TTTTeeeessssttttppppllllaaaannnn ((((GGGGeeeeoooorrrrggggeeee FFFFeeeeiiiinnnnbbbbeeeerrrrgggg))))



       The  major  objectives  in  testing  performance  of the NFS
       software are the following:

               1.  Provide valid data that allow the  comparison of
                   the  performance  of  different  NFS clients and
                   servers.

               2.  Identify  limiting factors in NFS performance on
                   HP-UX and possibly other systems.

       Some general  considerations  in testing  performance of NFS
       systems are the following:

               1.  Eliminate system-dependent variables (e.g.  disc
                   access time and compiler speed).

               2.  Write  tests  that are  easily  portable  to any
                   Unix-like    environment   (e.g.   HP-UX,   Sun,
                   BSD4.x).


       Because  performance  tests will  produce different   results  (e.g.
       timings)  from  one  execution  to the next,  they will be given the
       suffix ".it"  (interactive tests) in the scaffold.  The  tests  will
       be  driven  by  shell  scripts  and/or  C  programs,  however  (i.e.
       automated), and are given a TYPE OF TEST label of  "Performance"  in
       this chapter.

       The elimination of system  dependencies, such as disc  access  time,
       is difficult, if not impossible when  considering  the comparison of
       different  vendors' systems.  What is proposed is that  systems  are
       compared   based on  "typical"  customer configurations.  An example
       is comparing an HP 9000, sold with typical memory and disc,  with  a
       Sun    Microsystems    3/260   with  its  typical  memory  and  disc
       configuration, each with a  similar   amount  of  space   used.   An
       attempt  will be made to obtain  and   compare   systems   that  are
       as  similar  in price/performance as possible.

       Tests written should use the  standard  C  programming  language  or
       shell   scripts.  C programs  that use functions  that are different
       on  HP-UX  and   Sun  or   BSD   systems   should   use  conditional
       compilation  flags  to  make  the  code  easily portable.

       This plan  includes  more than the "MUST"   objectives.   With  each
       test  is  an   indication of its  priority,  must or want.  The must
       objectives are needed to evaluate the  performance with  respect  to
       the  product  objectives.   The  want  objectives  are   useful   to



       HP Internal Use Only          - 191 -                        2/11/88







       NFS System Test Plan                                     Performance



       performance   characterization   if  it  is necessary.

       The test perform time estimates included in this plan do not include
       time  to  gather  the  necessary  equipment  together to perform the
       tests.

       In order to  compare  clients  and  servers  of all  systems tested,
       the  following  matrix  should be tested (MUST boxes contain 'X'):


                       HP      HP      Sun     Sun
           client -->  330     350     3/160   3/260
           server
           ------      ---     ---     -----   -----
                     |      |       |        |
           HP 330    |  X   |       |        |
           ------      ---     ---     -----   -----
                     |      |       |        |
           HP 350    |      |  X    |        |
           ------      ---     ---     -----   -----
                     |      |       |        |
           Sun 3/160 |      |       |   X    |
           ------      ---     ---     -----   -----
                     |      |       |        |
           Sun 3/260 |      |       |        |   X
           ------      ---     ---     -----   -----


       This matrix will result in all systems  tested  against each of  the
       others as both clients and servers.

       This matrix should be updated as performance  information  on  other
       HP computers (e.g., Series 8x0) is defined and needed.


       20.1  FFFFiiiilllleeee aaaacccccccceeeessssssss tttteeeessssttttssss


       The tests in this section will determine the   performance  of  data
       transfers that access remote files.














       HP Internal Use Only          - 192 -                        2/11/88







       NFS System Test Plan                                     Performance



       RESPONSIBLE ENGINEER: George Feinberg
       DEPENDENCIES:
       ISSUES:

           1.  Weighting  of test  results.

               If  systems  vary in  performance  from one  area to
               another, the relative  importance  of the areas must
               be   determined.  This  can  be  based  on  relative
               frequency of use of the area tested.

           2.  Availability of faster disc interface.

               In the time  before  the  release  of NFS a new disc
               interface will be made  available,  called SCSI.  It
               is  supposed to be faster than HP-IB and may need to
               be evaluated.






       20.1.1  FFFFiiiilllleeee ttttrrrraaaannnnssssffffeeeerrrr ((((MMMMUUUUSSSSTTTT))))


       Test the performance of data transfer from file to file over NFS.

       Transfers    must   be   measured    from     client->server     and
       server->client,  with  and  without  the biod  running.  A C program
       that times the  transfer  and is capable of varying the   read/write
       block size  should be  sufficient  for this test.

       Files of various sizes must be used.

       IMPLEMENT TIME: .5 days
       PERFORM TIME: .25 days/case.
       TYPE OF TEST:  Performance
       EXPECTED OUTPUT:  File  transfer rates in bytes/second (read
                         and write).





       20.1.2  EEEExxxxeeeecccc ooooffff rrrreeeemmmmooootttteeee ffffiiiilllleeeessss ((((MMMMUUUUSSSSTTTT))))


       Test the performance of the system call, exec(2).

       This  test   is   different   from   file   transfer   in   that  it



       HP Internal Use Only          - 193 -                        2/11/88







       NFS System Test Plan                                     Performance



       transfers  data from disc to memory, not disc.  It also will request
       data in large amounts, not in stdio buffer sizes.

       The test should be a C program that times multiple exec's of  remote
       files.   Different   files  should  be  used  to change the size and
       eliminate cacheing from the test.

       IMPLEMENT TIME: 1 day
       PERFORM TIME: .25 days/case
       TYPE OF TEST:  Performance
       EXPECTED OUTPUT:  File exec  times in  bytes/second (similar
                         to read).





       20.1.3  RRRReeeeaaaadddd aaaannnndddd wwwwrrrriiiitttteeee ooooffff rrrreeeemmmmooootttteeee ffffiiiilllleeeessss uuuussssiiiinnnngggg ssssttttddddiiiioooo BBBBUUUUFFFFSSSSIIIIZZZZ ((((MMMMUUUUSSSSTTTT))))


       Test    the     performance     of      remote-disc->memory      and
       memory->remote-disc    data   transfers   using  the  stdio  library
       functions (fopen(3), fread(3), fwrite(3)).

       This  test is  different  from the exec test in  that  it  will  use
       BUFSIZ  read  and  write  requests.  It is  different  from the file
       transfer  tests in that it does not use the  local disc.

       The test can be a C program that has a large local  buffer  to  read
       into  and  write  out of.  It will use the stdio  library functions,
       fopen(3), fread(3), and fwrite(3), as many of the HP-UX commands do.


       IMPLEMENT TIME: .5 days
       PERFORM TIME: .25 days/case
       TYPE OF TEST:  Performance
       EXPECTED OUTPUT:  Memory<->remote-disc data  transfer  rates
                         in bytes/second.





       20.1.4  RRRRaaaannnnddddoooommmm ffffiiiilllleeee aaaacccccccceeeessssssss ((((WWWWAAAANNNNTTTT))))


       Test the read/write  performance when accessing remote  files  in  a
       random   manner.   This will  disable the  advantages  of read-ahead
       and cacheing.

       This  test   can  be   almost   identical   to   the   above   stdio



       HP Internal Use Only          - 194 -                        2/11/88







       NFS System Test Plan                                     Performance



       read/write   test,   except   that  it  will   not   read  or  write
       sequentially,   but   will   inject   fseek(3)   calls   into    the
       read/writes.


       IMPLEMENT TIME: .75 days
       PERFORM TIME: .25 days/case
       TYPE OF TEST:  Performance
       EXPECTED OUTPUT:  Memory<->remote-disc  data  transfer rates
                         in bytes/second.



       20.2  YYYYeeeelllllllloooowwww PPPPaaaaggggeeeessss ppppeeeerrrrffffoooorrrrmmmmaaaannnncccceeee tttteeeessssttttssss


       The tests in this section will determine the   performance  of  data
       accesses that use the Yellow Pages services.

       The only  MUST  objective  is that  the  time to  perform  a "login"
       be  no   greater   than  the same time on an  equivalent Sun system.
       Since login is  interactive,  this test must be  the  equivalent  of
       the login function, not an actual login.

       The   functions   to  be  tested  to   characterize   Yellow   Pages
       performance (WANT) include yp_match,  yp_first, yp_next, and yp_all.


       RESPONSIBLE ENGINEER: George Feinberg
       DEPENDENCIES:
       ISSUES:

           The database files used in all of the Yellow Pages tests
           must be  identical  to eliminate  variation  due to file
           size.

           At least three  different  file sizes  should be used to
           determine the effect of file size on performance.

           At least three  different  sized key  strings  should be
           used to determine its effect on lookup performance.

           If the Yellow Pages client implements any cacheing, this
           must be considered in the testing strategy.










       HP Internal Use Only          - 195 -                        2/11/88







       NFS System Test Plan                                     Performance



       20.2.1  LLLLooooggggiiiinnnn ppppeeeerrrrffffoooorrrrmmmmaaaannnncccceeee ((((MMMMUUUUSSSSTTTT))))


       Test the performance of login function, or its equivalent.

       The  login   program   interactively   obtains   a  user   name  and
       password   combination,   and then  performs  a lookup  in the file,
       /etc/passwd,  to find a matching entry.  The password file   entries
       are    obtained    one   at  a  time,  via  the   library  function,
       getpwent().  This  implies  that if the  password entry  desired  is
       on  a  remote   system,  the Yellow Pages will be used for each line
       obtained until a match is found.

       It is   suggested   that   to   test   the   performance   of   this
       functionality,  a  username/password  combination be obtained from a
       command line or file by a C program that will perform the   matching
       function   of  the  login   command.   The  program  should call the
       getpwent()  function to obtain password file entries.  This  program
       should  be  run with  remote  passord files of  varying  sizes  with
       the key  strings  in  various places  within the file, and also with
       no matching key.  The lookup time  should be  calculated  and be the
       output of the program.


       IMPLEMENT TIME: 1 day
       PERFORM TIME: .5 days/case
       TYPE OF TEST:  Performance
       EXPECTED OUTPUT:  Average lookup  times  in  seconds for all
                         key sizes and files sizes used.





       20.2.2  YYYYpppp____mmmmaaaattttcccchhhh ppppeeeerrrrffffoooorrrrmmmmaaaannnncccceeee ((((WWWWAAAANNNNTTTT))))


       Test the  performance  of the  library  function,   yp_match,  which
       will  attempt  to  match  a  key string with information in a remote
       database file.

       A C program which times multiple yp_match calls with  various  files
       and key string sizes is sufficient for this test.


       IMPLEMENT TIME: .75 days
       PERFORM TIME: .25 days/case
       TYPE OF TEST:  Performance
       EXPECTED OUTPUT:  Average lookup time in seconds for all key
                         sizes and files sizes used.




       HP Internal Use Only          - 196 -                        2/11/88







       NFS System Test Plan                                     Performance



       20.2.3  YYYYpppp____ffffiiiirrrrsssstttt,,,, yyyypppp____nnnneeeexxxxtttt ppppeeeerrrrffffoooorrrrmmmmaaaannnncccceeee ((((WWWWAAAANNNNTTTT))))


       Test  the  performance  of  the  library  functions,   yp_first  and
       yp_next,  which will access a remote  database one line at a time.

       A C  program   which   times   multiple   reads  of  entire   remote
       database    files   using   the   yp_first   and   yp_next   library
       functions is sufficient for this test.


       IMPLEMENT TIME: .75 days
       PERFORM TIME: .25 days/case
       TYPE OF TEST:  Performance
       EXPECTED OUTPUT:  Average file read times  in  bytes/seconds
                         for all file sizes used.





       20.2.4  YYYYpppp____aaaallllllll ppppeeeerrrrffffoooorrrrmmmmaaaannnncccceeee ((((WWWWAAAANNNNTTTT))))


       Test the performance of the library function,   yp_all,  which  will
       read a remote database file in one operation.

       A C  program   which   times   multiple   reads  of  entire   remote
       database  files  using  the yp_all  function is sufficient  for this
       test.


       IMPLEMENT TIME: .75 days
       PERFORM TIME: .25 days/case
       TYPE OF TEST:  Performance
       EXPECTED OUTPUT:  Average file  read times in  bytes/seconds
                         for all file sizes used.

















       HP Internal Use Only          - 197 -                        2/11/88







       NFS System Test Plan                                Quick Regression



       21.  QQQQuuuuiiiicccckkkk RRRReeeeggggrrrreeeessssssssiiiioooonnnn ((((JJJJeeeeffffffff EEEElllliiiissssoooonnnn))))



       21.1  GGGGooooaaaallllssss


       a) effective set of tests
       b) easy to run
       c) runs fairly quickly - approx. 20 minutes


       21.2  BBBBaaaassssiiiicccc TTTTeeeesssstttt CCCCoooonnnnffffiiiigggguuuurrrraaaattttiiiioooonnnn

                      ________                  ________
                     |        | -------------> |   9K   |
                     |  9K    |                |   or   |
                     |        | <------------- |  SUN   |
                      --------                  --------


       21.3  VVVViiiittttaaaallll SSSSttttaaaattttiiiissssttttiiiiccccssss


       RESPONSIBLE ENGINEER: Jeff Elison
       IMPLEMENT TIME:  9.0  md
       PERFORM TIME:    6.0  md


       TYPE OF TESTS: shortened versions of a subset of the functional tests
       EXPECTED OUTPUT: no failed messages in ...scaf/RESULTS/<resultsfile>


       21.4  DDDDeeeevvvveeeellllooooppppmmmmeeeennnntttt SSSSttttrrrraaaatttteeeeggggyyyy


       a) Will start by porting rfa test suite. 20md
       b) Modify tests for differing file system functionality.  (e.g.
          cd does not behave the same with NFS) 2md
       c) Add tests for NFS specific functionality.  (mount, umount) 3md
       d) Add appropriate tests from the NerFS functional tests. 2md

       Most of the tests chosen for the Quick Regression Test Suite will
       be from section 2 of the brick pages.  Since the commands in section
       1 and section 3 rely on the commands in section 2, this will be the
       more efficient set of tests for exercising the system.








       HP Internal Use Only          - 198 -                        2/11/88







       NFS System Test Plan                                  Recoverability



       22.  NNNNFFFFSSSS RRRReeeeccccoooovvvveeeerrrryyyy TTTTeeeessssttttssss ((((JJJJiiiimmmm HHHHuuuunnnntttteeeerrrr))))


       RESPONSIBLE ENGINEER: Jim Hunter



       22.1  DDDDIIIISSSSCCCCUUUUSSSSSSSSIIIIOOOONNNN



       22.1.1  IIIInnnnttttrrrroooodddduuuuccccttttiiiioooonnnn

       The objective of the recoverability tests is to subject the NFS code
       to  a  series  of scenarios that simulate a variety of failure modes
       possible in normal use.  These failure modes include:

               o+ user code errors (invalid  parameters,  incorrect  request
                 sequencing, bad pointers, etc.)

               o+ failed mount attempts,

               o+ remote machine (server or client) failure,

               o+ lost network data,

               o+ interrupts,

               o+ and non-fatal device errors.

       Inorder to quantify the error paths covered, these tests  should  be
       run  at  least  once  on  a BFA kernel.  User code errors and failed
       mount  attempts  are  handled  in  the  NFS  functional  tests.   In
       addition,   because   of   the   complexity   of   the  yellow  page
       functionality,  recoverability  tests  for  yellow  pages  will   be
       discussed in a separate section.



       22.1.2  SSSSccccooooppppeeee ooooffff tttthhhheeee tttteeeessssttttssss

       The success or failure of the tests will  be  determined  using  the
       criteria  outlined  below and if appropriate, an analysis of the end
       state of the system.

               o+ The system should not crash or hang  on  account  of  user
                 space or remote-node errors/failures.

               o+ The service integrity should be preserved.





       HP Internal Use Only          - 199 -                        2/11/88







       NFS System Test Plan                                  Recoverability



               o+ The networking state  of  the  involved  nodes  should  be
                 equivalent to the start state.



       22.1.3  IIIImmmmpppplllleeeemmmmeeeennnnttttaaaattttiiiioooonnnn ggggooooaaaallllssss

       Because of the nature of these tests, it  will  NOT  be  a  goal  to
       automate or integrate these tests into the scaffold environment.



       22.1.4  DDDDeeeeppppeeeennnnddddeeeennnncccciiiieeeessss

       ISSUE: NerFS group must buy off on making the transmission error tool.

       Many of the tests will require a kernel-level mechanism  to  produce
       the  desired  error  conditions.   This  mechanism  will  have to be
       provided by the NerFS project group.  The example  statement  "every
       third"  implies  a  random  event,  (e.g.  1  out  of  3, randomly).
       Development of the error-producing mechanism is NOT included in  the
       time estimates that follow.



       22.2  TTTTrrrraaaannnnssssmmmmiiiissssssssiiiioooonnnn eeeerrrrrrrroooorrrrssss


       The following test scenarios will depend on a mechanism  to  produce
       the following error conditions.

            [1]  Drop a user definable ratio of in-bound NFS packets  (e.g.
                 every third)

            [2]  Drop a user  definable  ratio  of  out-bound  NFS  packets
                 (e.g. every third)

            [3]  Simulate a remote machine dying by dropping  all  in-bound
                 NFS packets

            [4]  Simulate a local machine dying by dropping  all  out-bound
                 NFS packets

            [5]  Send duplicate NFS packets



       22.2.1  DDDDaaaattttaaaa LLLLoooossssssss////CCCCoooorrrrrrrruuuuppppttttiiiioooonnnn

       Verify that the NFS  functional  tests  are  implemented  such  that
       transmission  errors  that  manifest themselves as data loss or data



       HP Internal Use Only          - 200 -                        2/11/88







       NFS System Test Plan                                  Recoverability



       corruption are detected by the tests and reported.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    0.25 md



       22.2.2  SSSSeeeerrrrvvvveeeerrrr ffffaaaaiiiilllluuuurrrreeee

       Test NFS for proper reporting of transmission errors  by  causing  a
       trigger  on  a  requester  system  to  drop  all future in-bound NFS
       packets and run one instance of the  NFS  functional  tests  on  the
       requester  system.   Note  that  this test will require a soft mount
       otherwise the commands will just hang.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    0.5  md



       22.2.3  RRRReeeeqqqquuuueeeesssstttteeeerrrr ffffaaaaiiiilllluuuurrrreeee

       Test NFS for proper reporting of transmission errors  by  causing  a
       trigger  on  a requester system to drop all future out-bound packets
       and run one instance of the NFS  functional  tests  on  a  requester
       system.  must

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    0.5  md



       22.2.4  RRRReeeeqqqquuuueeeesssstttteeeerrrr LLLLoooosssstttt PPPPaaaacccckkkkeeeettttssss

       Test that the NFS network product handles transmission errors  in  a
       manner  completely  transparent  to the user by dropping every third
       in-bound NFS packet on the requester node.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    0.5  md



       22.2.5  SSSSeeeerrrrvvvveeeerrrr LLLLoooosssstttt PPPPaaaacccckkkkeeeettttssss

       Test that the NFS network product handles transmission errors  in  a
       manner  completely  transparent  to the user by dropping every third
       out-bound NFS packet on the requester node.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    0.5  md



       HP Internal Use Only          - 201 -                        2/11/88







       NFS System Test Plan                                  Recoverability



       22.2.6  DDDDuuuupppplllliiiiccccaaaatttteeee SSSSeeeerrrrvvvveeeerrrr PPPPaaaacccckkkkeeeettttssss

       Test that the NFS network product handles transmission errors  in  a
       manner  completely transparent to the user by duplicating every out-
       bound NFS packet on the server node.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    0.5  md



       22.2.7  DDDDuuuupppplllliiiiccccaaaatttteeee RRRReeeeqqqquuuueeeesssstttteeeerrrr PPPPaaaacccckkkkeeeettttssss

       Test that the NFS network product handles transmission errors  in  a
       manner  completely transparent to the user by duplicating every out-
       bound NFS packet on the requester node.

       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    0.5  md



       22.3  PPPPoooowwwweeeerrrr FFFFaaaaiiiilllluuuurrrreeee


       Power failure or other major disruptions on an HP NFS (server)  node
       shall  affect  other  nodes  on  the  LAN  only  to  the extent that
       currently active NFS "connections" to that  node  are  down  and  no
       further use of the node as a remote file system is possible.

       TEST CONFIGURATION

             node A               node B
            ---------   cp       ---------
            |  9K   |----------->| Cert. |
            |       | (A -> B)   |       |
            ---------            ---------
                 |
                 |                  node C
                 |       cp        ---------
                 ----------------->|  9K   |  (node to power down)
                  (C <- A)       ---------



       22.3.1  CCCClllliiiieeeennnntttt ppppoooowwwweeeerrrr ffffaaaaiiiilllluuuurrrreeee

       Mount node B's file system on node A and node  A's  file  system  on
       node C.  Then while copying a large block of data on node A (e.g., a
       cp of duration greater than 1 minute) to node B and node C from node
       A,  power  down node C.  Verify that the transfer between node A and



       HP Internal Use Only          - 202 -                        2/11/88







       NFS System Test Plan                                  Recoverability



       node B is completed successfully and that the state of node A and  B
       are correct.

       IMPLEMENT TIME:  0.25 md
       PERFORM TIME:    0.5  md



       22.3.2  SSSSeeeerrrrvvvveeeerrrr ppppoooowwwweeeerrrr ffffaaaaiiiilllluuuurrrreeee

       Hard mount node B's file system to node A.  Begin a  transfer  of  a
       large  block  of data (e.g., a cp of duration greater than 1 minute)
       from node B to node A.  (on node A) Power down node B for  1  minute
       then  power  node B back up.  Verify that the correct error messages
       are  reported  on  node  A  and  that  the  transfer  is   completed
       successfully.

       IMPLEMENT TIME:  0.25 md
       PERFORM TIME:    0.5  md



       22.4  SSSShhhhuuuutttt----ddddoooowwwwnnnn


       TEST CONFIGURATION

             node A               node B
            ---------   cp       ---------
            | 9K  1 |----------->| Cert. |
            ---------            ---------
                 |
                 |                  node C
                 |       cp        ---------
                 ----------------->| 9K  2 |  (node to kill daemons/processes on)
                                   ---------



       22.4.1  KKKKiiiillllllll ddddaaaaeeeemmmmoooonnnnssss////pppprrrroooocccceeeesssssssseeeessss

       While copying a large block of data (e.g., a cp of duration  greater
       than  1  minute)  between  a  server  9000  (node  A)  and  a client
       certification node (node B), and between A and another  client  9000
       (node  C), kill the appropriate daemons/processes on C.  Verify that
       the transfer to the certification node is completed successfully.

       IMPLEMENT TIME:  0.25 md
       PERFORM TIME:    0.5  md





       HP Internal Use Only          - 203 -                        2/11/88







       NFS System Test Plan                                  Recoverability



       22.5  DDDDiiiisssscccc ffffaaaaiiiilllluuuurrrreeee


       TEST CONFIGURATION

             node A               node B
            ---------   cp       ---------
            | 9K  1 |----------->| Cert. |
            ---------            ---------
                 |
                 |                  node C
                 |       cp        ---------
                 ----------------->| 9K  2 |  (node to power disc down)
                                   ---------



       22.5.1  DDDDiiiisssscccc ppppoooowwwweeeerrrr ffffaaaaiiiilllluuuurrrreeee

       While copying a large block of data (e.g., a cp of duration  greater
       than  1  minute)  between  a  server  9000  (node  A)  and  a client
       certification node (node B), and between A and another  client  9000
       (node C), power down the disc on C.  Verify that the transfer to the
       certification node is completed successfully.

       IMPLEMENT TIME:  0.25 md
       PERFORM TIME:    0.25 md



























       HP Internal Use Only          - 204 -                        2/11/88







       NFS System Test Plan                                     Reliability



       23.  RRRReeeelllliiiiaaaabbbbiiiilllliiiittttyyyy ((((JJJJeeeeffffffff EEEElllliiiissssoooonnnn))))



       23.1  GGGGooooaaaallllssss


       a) 24 hour reliability
       b) 48 hour reliability
       c) 120 hour reliability
       d) Maintain a log of failures/crashes


       23.2  BBBBaaaassssiiiicccc TTTTeeeesssstttt CCCCoooonnnnffffiiiigggguuuurrrraaaattttiiiioooonnnn


       a) 24 hour reliability configuration:
                    ________                  ________
                   |        | -------------> |        |
                   |  9K    |                |  9K    |
                   |        | <------------- |        |
                    --------                  --------

       b) 48 hour reliability configuration:
                 ________                ________                ________
                |        | -----------> |        | -----------> |        |
                |  9K    |              |  9K    |              |  9K    |
                |        | <----------- |        | <----------- |        |
                 --------                --------                --------

       b) 120 hour reliability configuration:
                 ________                ________                ________
                |        | -----------> |        | -----------> |        |
                |  9K    |              |  9K    |              |  9K    |
                |        | <----------- |        | <----------- |        |
                 --------                --------                --------


       23.3  VVVViiiittttaaaallll SSSSttttaaaattttiiiissssttttiiiiccccssss


       RESPONSIBLE ENGINEER: Jeff Elison
       PERFORM TIME:   45.0  md
       a)  24 hour - 20 md
       b)  48 hour - 10 md
       c) 120 hour - 15 md
       TYPE OF TESTS: quick regression, functional tests, stress tests, and
                      special cases
       EXPECTED OUTPUT: no failed messages in ...scaf/RESULTS/<resultsfile>





       HP Internal Use Only          - 205 -                        2/11/88







       NFS System Test Plan                                     Reliability



       23.4  DDDDeeeevvvveeeellllooooppppmmmmeeeennnntttt SSSSttttrrrraaaatttteeeeggggyyyy


       a) 24 hour reliability
       Phase I: Quick Regression Suite  5md
       Phase II: Stress Suite subset    5md
       Phase III: Functionality Suite   5md
       Phase IV: all of the above       5md

       b) 48 hour reliability               10md
       Quick Regression, Functionality, Stress subset, and special cases

       c) 120 hour reliability              15md
       Quick Regression, Functionality, Stress subset, and special cases








































       HP Internal Use Only          - 206 -                        2/11/88







       NFS System Test Plan                                          Rename



       24.  NNNNFFFFSSSS aaaannnndddd tttthhhheeee rrrreeeennnnaaaammmmeeee(((()))) ssssyyyysssstttteeeemmmm ccccaaaallllllll ((((MMMMiiiikkkkeeee SSSShhhhiiiipppplllleeeeyyyy))))

       The  rename(from,  to)  system  call  will  change  the  name  of  a
       file(from) to a new name(to).  If the new name refers to an existing
       file, the existing file will be purged.  This should only work  when
       both file names are remote on the same node.  We have no interest in
       files that are on the local node.

       Since this is a system call, a C program could be  used  to  do  the
       testing.   It  may  be possible that the "mv" command will adapt the
       use of rename instead of link()  and  unlink()  which  is  presently
       used.   I  will specify for now that the rename system call is used,
       but this will be for documentational purposes.   The  implementation
       may be different.

       I am not trying to specify the names of the files  to  be  used,  so
       there  will  be  no consideration in fitting into the scaffold or in
       terms of concurrent testing.  I will adapt the convention of  "from"
       to  refer  to  the file that the rename of to be done on and "to" to
       refer to the file that the "from" file  is  to  be  named.   I  will
       prepend  "/mnt/..." to indicate that the files are on a remote node.
       I also will assume that the appropriate "mount remote_node:/   /mnt"
       will have been done.

       I have added tests for CDF's to the rename tests.

       These tests will explore doing rename in situations where the "from"
       and "to" files may or may not exist.

       RESPONSIBLE ENGINEER: Steve Booth
       DEPENDENCIES: Having a HP-UX kernel that supports rename().
       ISSUES:




       24.1  TTTThhhheeee  ffffrrrroooommmm  ffffiiiilllleeee eeeexxxxiiiissssttttssss


       /mnt/from exists, /mnt/to does not exist
       rename(/mnt/from, /mnt/to)
       RESULT:  should work

       /mnt/from exists, /mnt/to exists
       rename(/mnt/from, /mnt/to)
       RESULT:  should work

       with no write permission in parent directory of "from"
       /mnt/from exists, /mnt/to does not exist
       rename(/mnt/from, /mnt/to)
       RESULT:  should not work, errno = EACCES, should check on



       HP Internal Use Only          - 207 -                        2/11/88







       NFS System Test Plan                                          Rename



                the existence of "to"

       with no write permission in parent directory of "from"
       /mnt/from exists, /mnt/to exists
       rename(/mnt/from, /mnt/to)
       RESULT:  should not work, errno = EACCES, should check on
                the existence of "to"

       with no write permission in parent directory of "to"
       /mnt/from exists, /mnt/to does not exist
       rename(/mnt/from, /mnt/to)
       RESULT:  should not work, errno = EACCES, should check on
                the existence of "to" and "from"

       with no write permission in parent directory of "to"
       /mnt/from exists, /mnt/to exists
       rename(/mnt/from, /mnt/to)
       RESULT:  should not work, errno = EACCES, should check on
                the existence of "to" and "from"


       IMPLEMENT TIME:  1.5  md
                          (This is to account for the overhead to
                           establish the whole series of rename tests.)
       PERFORM TIME:    0.25 md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




       24.2  TTTThhhheeee  ffffrrrroooommmm  ffffiiiilllleeee ddddooooeeeessss nnnnooootttt eeeexxxxiiiisssstttt


       /mnt/from does not exist, /mnt/to does not exist
       rename(/mnt/from, /mnt/to)
       RESULT:  should not work, errno=ENOENT, check on the existence of "to"

       /mnt/from does not exist, /mnt/to exists
       rename(/mnt/from, /mnt/to)
       RESULT:  should not work, errno=ENOENT, check on the existence of "to"

       IMPLEMENT TIME:  0.1  md
       PERFORM TIME:    0.1  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's








       HP Internal Use Only          - 208 -                        2/11/88







       NFS System Test Plan                                          Rename



       24.3  TTTThhhheeee  ffffrrrroooommmm  ffffiiiilllleeee eeeexxxxiiiissssttttssss aaaannnndddd iiiissss aaaa ddddiiiirrrreeeeccccttttoooorrrryyyy


       acting as non-Super User
       /mnt/from_dir exists, /mnt/to_dir does not exist
       rename(/mnt/from_dir, /mnt/to_dir)
       RESULT:  should not work, errno=EPERM

       acting as non-Super User
       /mnt/from_dir exists, /mnt/to_dir exists
       rename(/mnt/from_dir, /mnt/to_dir)
       RESULT:  should not work, errno=EPERM

        NNNNOOOOTTTTEEEE::::  The following super user tests should be executed twice:
       (1) do everything as superuser except the rename call, and
       (2) do nothing as superuser except the rename call.
       The results in both cases should be identical.

       acting as Super User AND both parent directories of "from_dir"
       and "to_dir" have permissions of 0755 (this is to keep
       "nobody" from having write permission )
       /mnt/from_dir exists, /mnt/to_dir does not exist
       rename(/mnt/from_dir, /mnt/to_dir)
       RESULT:  should not work, errno=EACCES

       acting as Super User AND both parent directories of "from_dir"
       and "to_dir" have permissions of 0777 (this is to eliminate any
       problems with being "nobody" with NFS)
       /mnt/from_dir exists, /mnt/to_dir does not exist
       rename(/mnt/from_dir, /mnt/to_dir)
       RESULT:  should work

       acting as Super User AND both parent directories of "from_dir"
       and "to_dir" have permissions of 0777 (this is to eliminate any
       problems with being "nobody" with NFS)
       /mnt/from_dir exists, /mnt/to_dir exists and is an empty directory
       rename(/mnt/from_dir, /mnt/to_dir)
       RESULT:  should work

       acting as Super User AND both parent directories of "from_dir"
       and "to_dir" have permissions of 0777 (this is to eliminate any
       problems with being "nobody" with NFS)
       /mnt/from_dir exists, /mnt/to_dir exists and is a
       directory with entries
       rename(/mnt/from_dir, /mnt/to_dir)
       RESULT:  should not work, errno=ENOTEMPTY

       acting as Super User AND both parent directories of "from_dir"
       and "to" have permissions of 0777 (this is to eliminate any
       problems with being "nobody" with NFS)
       /mnt/from_dir exists, /mnt/to exists and is a file



       HP Internal Use Only          - 209 -                        2/11/88







       NFS System Test Plan                                          Rename



       rename(/mnt/from_dir, /mnt/to)
       RESULT:  should not work, errno=ENOTDIR

       IMPLEMENT TIME:  0.5  md
       PERFORM TIME:    0.5  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT: See the above RESULT's




       24.4  TTTThhhheeee ffffiiiilllleeeessss aaaarrrreeee oooonnnn ddddiiiiffffffffeeeerrrreeeennnntttt nnnnooooddddeeeessss


       /from exists on local node, /mnt/to does not exist on remote node
       rename(/from, /mnt/to)
       RESULT:  should not work, errno=EXDEV

       /from exists on local node, /mnt/to exists on remote node
       rename(/from, /mnt/to)
       RESULT:  should not work, errno=EXDEV

       /mnt/from exists on remote node, /to does not exist on local node
       rename(/mnt/from, /to)
       RESULT:  should not work, errno=EXDEV

       /mnt/from exists on remote node, /to exists on local node
       rename(/mnt/from, /to)
       RESULT:  should not work, errno=EXDEV

       /mnt/from exists on remote node a, /mnt_1/to does not exist
       on remote node b
       rename(/mnt/from, /mnt_1/to)
       RESULT:  should not work, errno=EXDEV

       /mnt/from exists on remote node a, /mnt_1/to exists on remote node b
       rename(/mnt/from, /mnt_1/to)
       RESULT:  should not work, errno=EXDEV


       IMPLEMENT TIME:  0.5  md
       PERFORM TIME:    0.5  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT: See above RESULT's










       HP Internal Use Only          - 210 -                        2/11/88







       NFS System Test Plan                                          Rename



       24.5  MMMMiiiisssscccceeeellllllllaaaannnneeeeoooouuuussss aaaaddddddddiiiittttiiiioooonnnnaaaallll tttteeeessssttttssss ((((SSSStttteeeevvvveeee BBBBooooooootttthhhh))))


       a component of the FROM pathname past the mount point is
       not a directory (e.g., /mnt/<file1>/file2 instead of /mnt/<dir>/file2)
       RESULT: should not work, errno=ENOTDIR

       FROM is the parent directory of TO
       (e.g., rename /mnt/FROM /mnt/FROM/TO)
       RESULT: should not work, errno=EINVAL

       TO is the parent directory of FROM
       (e.g., rename /mnt/FROM /mnt/TO/FROM)
       RESULT: should not work, errno=ENOTDIR

       FROM and TO are the same DIRECTORY
       (e.g., rename /mnt/FROMdir /mnt/FROMdir)
       RESULT: should not work, errno=EINVAL

       FROM and TO are the same FILE
       (e.g., rename /mnt/FROM /mnt/FROM)
       RESULT: should not work, errno=EINVAL

       TO exists, is a directory, and is a mount point
       (e.g., rename /mnt/FROMDIR /mnt/MOUNTPOINT)
       RESULT: should not work, errno=EBUSY

       component of TO is a symbolic link
       RESULT: should work


       IMPLEMENT TIME: 0.5 md
       PERFORM TIME:   0.5 md
       TYPE OF TEST: functional
       EXPECTED OUTPUT: See above RESULT lines




       24.6  GGGGeeeennnneeeerrrraaaallll ffffuuuunnnnccccttttiiiioooonnnnaaaalllliiiittttyyyy ooooffff rrrreeeennnnaaaammmmeeee wwwwiiiitttthhhh CCCCDDDDFFFF''''ssss


       CDF's are Context Dependent Files.  If you have not dealt with them,
       please  look  at  the  6.0  ERS  for  an explanation as they are too
       complicated to explain in here.  Just  for  information,  a  CDF  is
       created  by doing a mkdir and then a chmod on the new directory.  To
       remove it, you must give the explicit name of the CDF including  the
       "+" at the end of the name.

       Example:
           mkdir  the_cdf



       HP Internal Use Only          - 211 -                        2/11/88







       NFS System Test Plan                                          Rename



           chmod u+s  the_cdf

           rm -r  the_cdf+
       Once you change mod the directory, you will not see it in  a  ls  as
       long as it has nothing in it.  This can be quite confusing.

       This collection of tests have been written for CDF's.   The  scripts
       are  not set up to run in the scaffold.  They have an echo line that
       describes each test.  The scripts assume that a file  name  will  be
       passed in to them.  These scripts presently run locally.  After, the
       scripts are in the scaffold, they should be run with a  remote  file
       using  a  full  path  name  and  also run with a remote file that is
       relative to a remote current directory.


       echo Rename a cdf to (an empty) cdf that exists
       # RESULT The first cdf should replace the second cdf.
       mkdir $1
       chmod u+s $1
       mkdir new_$1
       chmod u+s new_$1
       cat >$1 <<zztop
       hostname cdf
       zztop
       cat >new_${1}+/default <<zztop
       default to die
       zztop
       h=`ls new_${1}+`
       rename $1  new_$1
       h1=`ls new_${1}+`
       echo this $h
       echo should equal $h1
       echo this should print hostname cdf
       cat new_$1
       rm -r ${1}+ new_${1}+

       echo Rename a cdf to a file that exists
       # RESULT The cdf should replace the file.
       mkdir $1
       chmod u+s $1
       cat >$1 <<zztop
       hostname cdf
       zztop
       touch file_$1
       rename $1  file_$1
       echo this should print hostname cdf
       cat file_$1
       rm -r ${1}+ file_${1}

       echo Make a cdf and rename it into another cdf that is empty
       #RESULT  The file in the first cdf should move into the second cdf



       HP Internal Use Only          - 212 -                        2/11/88







       NFS System Test Plan                                          Rename



       #RESULT  A side effect should be that at first the empty cdf will not be
       #RESULT  listed by a ls.  After the rename, the second cdf will be listed
       #RESULT  by a ls, but the first cdf will no longer be listed.
       mkdir $1
       chmod u+s $1
       cat >$1 <<zztop
       hostname cdf
       zztop
       h=`ll ${1}+`
       mkdir new_$1
       chmod u+s new_$1
       rename $1  new_$1
       h1=`ll new_${1}+`
       echo this $h
       echo should equal $h1
       rm -r ${1}+ new_${1}+

       echo Make a cdf with two contexts.  Rename it to a another cdf and rename it again
       #RESULT:  The hostname context will be first renamed and then the default
       #RESULT:  context will then be renamed.
       mkdir $1
       chmod u+s $1
       cat >$1 <<zztop
       hostname cdf
       zztop
       cat >${1}+/default <<zztop
       default cdf
       zztop
       mkdir new_$1
       chmod u+s new_$1
       rename $1 new_$1
       echo hostname cdf   should be printed
       cat new_$1
       echo
       echo default cdf    should be printed
       cat $1
       rename $1 new_$1
       echo
       echo default cdf    should be printed
       cat new_$1
       rm -r ${1}+ new_${1}+

       echo Make a cdf with two contexts.  Rename it to just another file
       #RESULT  The hostname context will be renamed to be an ordinary file leaving
       #RESULT  the cdf with just the default context.
       mkdir $1
       chmod u+s $1
       cat >$1 <<zztop
       hostname cdf
       zztop
       cat >${1}+/default <<zztop



       HP Internal Use Only          - 213 -                        2/11/88







       NFS System Test Plan                                          Rename



       default cdf
       zztop
       rename $1 afile
       echo hostname cdf   should be printed
       cat afile
       echo
       echo The ll should fail
       ll afile+
       rename $1 afile
       echo This ll should work
       ll ${1}+
       echo
       echo default cdf    should be printed
       cat afile
       rm -r ${1}+ afile

       echo Make a cdf with two contexts and rename it using the + to create a new cdf
       #RESULT  This will create a new cdf with both of the contexts inside it.
       mkdir $1
       chmod u+s $1
       cat >$1 <<zztop
       hostname cdf
       zztop
       cat >${1}+/default <<zztop
       default cdf
       zztop
       h=`ll ${1}+`
       rename ${1}+ new_$1
       h1=`ll new_${1}+`
       echo this $h
       echo should equal $h1
       rm -r  new_${1}+

       echo Make a cdf, change the permission of the directory and try to do a rename
       #RESULT  Without write permission, the rename should fail.
       mkdir $1
       chmod u+s $1
       cat >$1 <<zztop
       hostname cdf
       zztop
       chmod -w .
       echo These two rename s should fail
       rename $1 new_$1
       rename ${1}+ newer_$1
       ll ${1}+
       chmod 0777 .
       echo Should not be able to rm new_$1 or newer_$1
       rm -r ${1}+ new_$1 newer_$1






       HP Internal Use Only          - 214 -                        2/11/88







       NFS System Test Plan                                          Rename



       IMPLEMENT TIME:  0.6  md
       PERFORM TIME:    0.5  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's




       24.7  RRRReeeennnnaaaammmmiiiinnnngggg ccccddddffff bbbbeeeettttwwwweeeeeeeennnn nnnnooooddddeeeessss


       This is similar to the tests of renaming files on different nodes.
       mkdir /from
       chmod u+s /from
       touch /from
       /from does not exist, /mnt/to does not exist
       rename(/from, /mnt/to)
       rm -r /from+
       RESULT:  should not work, errno=EXDEV

       mkdir /mnt/from
       chmod u+s /mnt/from
       touch /mnt/from
       /mnt/from does not exist, /to does not exist
       rename(/mnt/from, /to)
       rm -r /mnt/from+
       RESULT:  should not work, errno=EXDEV


       IMPLEMENT TIME:  0.3  md
       PERFORM TIME:    0.1  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:  See above RESULT's





















       HP Internal Use Only          - 215 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



       25.  RRRRPPPPCCCC ccccoooommmmmmmmaaaannnnddddssss ((((JJJJoooohhhhnnnn DDDDiiiilllllllleeeeyyyy))))

       25.1  rrrrppppcccciiiinnnnffffoooo TTTTeeeesssstttt PPPPllllaaaannnn


       This chapter covers the rrrrppppcccciiiinnnnffffoooo  command.   The  main  use  of  this
       command  is  to list information about _R_P_C services present on hosts
       in the local network.  It  can  also  be  used  to  determine  which
       services are active (ready) and which are not.  Note: this test plan
       goes into some detail about the rrrrppppcccciiiinnnnffffoooo options  to  be  tested;  in
       general,  my  test plans will not go into this detail, it will be up
       to the implementer to come up with the individual, appropriate  test
       cases.


       25.1.1  rrrrppppcccciiiinnnnffffoooo ooooppppttttiiiioooonnnnssss

             RESPONSIBLE ENGINEER:  John A Dilley
             ASSUMPTIONS:           Module to be tested is functional




       25.1.1.1  _n_o__o_p_t_i_o_n_s


             IMPLEMENT TIME:   0.25 md
             PERFORM TIME:     1.0 md
             TYPE OF TEST:     functional
             EXPECTED OUTPUT:  no output if the test passes
       Test rrrrppppcccciiiinnnnffffoooo with no options.   It  should  print  the  usage  error
       message on stderr and exit with a non-zero status.



       25.1.1.2  _b_a_d__o_p_t_i_o_n

             IMPLEMENT TIME:   0.25 md
             PERFORM TIME:     1.0 md
             TYPE OF TEST:     functional
             EXPECTED OUTPUT:  no output if the test passes
       Test rrrrppppcccciiiinnnnffffoooo with any option besides "-p", "-u" or "-t".  It  should
       print  the  usage  error  message on stderr and exit with a non-zero
       status.  Test rrrrppppcccciiiinnnnffffoooo with a hostname.   It should print  the  usage
       message.



       25.1.1.3  _-_p__h_o_s_t

             IMPLEMENT TIME:   0.75 md



       HP Internal Use Only          - 216 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



             PERFORM TIME:     2.25 md
             TYPE OF TEST:     functional
             EXPECTED OUTPUT:  no output if the test passes
       Test the -p option without a host name.   It  should  print  portmap
       information  about  the  local  host.   Test  the  -p option with an
       invalid host name.  It should print an error message and exit with a
       non-zero status.  Test the -p option with two host names:
       rpcinfo -p host host
       It should print an error message and exit with  a  non-zero  status.
       Test  the -p option with a valid host name.  It should print portmap
       information about the named host.  Test the -p option with  a  valid
       host name that doesn't have /etc/portmap running on it.



       25.1.1.4  _-_u__h_o_s_t__p_r_o_g_r_a_m__[_v_e_r_s_i_o_n_]

             IMPLEMENT TIME:   0.25 md
             PERFORM TIME:     1.0 md
             TYPE OF TEST:     functional
             EXPECTED OUTPUT:  no output if the test passes
       Test the -u option without a host or program name.  It should  print
       the  usage  error message on stderr and exit with a non-zero status.
       Test the -u option with an invalid host name.  It  should  print  an
       error  message  and exit with a non-zero status.  Test the -u option
       with a valid host name, but invalid program name.  It should print a
       message  that the program is not available.  Test the -u option with
       a valid host and program name.  It should print the a  message  that
       the program is ready and waiting.



       25.1.1.5  _-_t__h_o_s_t__p_r_o_g_r_a_m__[_v_e_r_s_i_o_n_]

             IMPLEMENT TIME:   0.25 md
             PERFORM TIME:     1.0 md
             TYPE OF TEST:     functional
             EXPECTED OUTPUT:  no output if the test passes
       Test the -t option without a host or program name.  It should  print
       the  usage  error message on stderr and exit with a non-zero status.
       Test the -t option with an invalid host name.  It  should  print  an
       error  message  and exit with a non-zero status.  Test the -t option
       with a valid host name, but invalid program name.  It should print a
       message  that the program is not available.  Test the -t option with
       a valid host and program name.  The following tests  were  added  to
       increase BFA coverage:
       rpcinfo -t host progname
       rpcinfo -t host <unknown progname>
       rpcinfo -t host prognum
       rpcinfo -t <unknown host> prognum
       rpcinfo -t host prognum versnum



       HP Internal Use Only          - 217 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



       rpcinfo -t host prognum badversnum

       25.2  rrrruuuupppp TTTTeeeesssstttt PPPPllllaaaannnn


       This chapter covers the rrrruuuupppp command.  The main use of  this  command
       is  to  list information about the hosts on the network, such as how
       long they have been up, how many users are active on the system, and
       what  the  load average is.  It provides much the same functionality
       as the Berkeley rrrruuuuppppttttiiiimmmmeeee  command.   The  main  distinction  is  that
       Berkeley  rrrruuuuppppttttiiiimmmmeeee  uses  a  database  of values collected from hosts
       sending broadcast packets, one a minute (or so), and  therefore  the
       database  may  be  out of date.  The rrrruuuupppp command, on the other hand,
       polls all the hosts on the network each  time  it  is  run,  so  the
       values should be more accurate.


       25.2.1  rrrruuuupppp              ooooppppttttiiiioooonnnnssss                         RESPONSIBLE
       ENGINEER:                               John         A        Dilley
                 ASSUMPTIONS:                                        module
       to be tested is functional




       25.2.1.1  _n_o__o_p_t_i_o_n_s


                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test rrrruuuupppp with no options.  It should print information about all the
       hosts  on the network that are running the rstatd.  This test should
       look for the local host in the output;  if  it's  present  the  test
       passes.   Note that the local host MUST be running the rstatd daemon
       for this test to pass.




       25.2.1.2  _b_a_d__o_p_t_i_o_n

                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test rrrruuuupppp with any option besides "-l",  "-h"  or  "-t".   It  should
       print  the  usage  error  message on stderr and exit with a non-zero
       status.  Run rrrruuuupppp with the -d option and no arguments.




       HP Internal Use Only          - 218 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



       25.2.1.3  _g_o_o_d__o_p_t_i_o_n_s

                     IMPLEMENT TIME:                                 0.75 md
                     PERFORM TIME:                                   1.5 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test rrrruuuupppp with all combinations of the valid  options  listed  above.
       Test  with zero hosts, the local host, and then the local host and a
       remote host.  In all cases, information about the local host  should
       be  present  in  the output.  The above options are used to sort the
       output according to different values; it would  be  rather  easy  to
       verify  that  the values are indeed sorted, but it is not clear that
       this is worthwhile,  since  this  would  basically  be  testing  the
       qqqqssssoooorrrrtttt(((())))  library  call.   Test  rrrruuuupppp with the -d option followed by a
       host name and the -d option followed by a number.



       25.3  RRRRssssttttaaaattttdddd tttteeeesssstttt ppppllllaaaannnn


       The functionality of the rstat daemon is covered by the  rup  tests.
       The  following tests were added to increase the BFA coverage for the
       rstat daemon:


         1.  Use pmap_conf with the "-p" option to call rpc.rstatd, program
             100001,  versions  1,  2  and  3,   procedure  0  (NULL_PROC),
             procedure 2 and procedure 3 (not defined, it will execute  the
             default case on the case statement).


       25.4  rrrruuuusssseeeerrrrssss TTTTeeeesssstttt PPPPllllaaaannnn


       This chapter covers the  rrrruuuusssseeeerrrrssss  command.   The  main  use  of  this
       command  is  to list information about what users are on each of the
       hosts on the network, and how long they have been idle.  It provides
       much  the same functionality as the Berkeley rrrrwwwwhhhhoooo command.  The main
       distinction  is  that  Berkeley  rrrrwwwwhhhhoooo  uses  a  database  of  values
       collected  from  hosts  sending  broadcast packets, one a minute (or
       so), and therefore the database may be  out  of  date.   The  rrrruuuusssseeeerrrrssss
       command,  on the other hand, polls all the hosts on the network each
       time it is run, so the values should be more accurate.


       25.4.1  rrrruuuusssseeeerrrrssss            ooooppppttttiiiioooonnnnssss                        RESPONSIBLE
       ENGINEER:                               John         A        Dilley
                 ASSUMPTIONS:                                        module
       to be tested is functional




       HP Internal Use Only          - 219 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



       25.4.1.1  _n_o__o_p_t_i_o_n_s


                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test rrrruuuusssseeeerrrrssss with no options.  It should print information about  the
       hosts  on the network.  Look for the local host; if it's present the
       test passes.




       25.4.1.2  _b_a_d__o_p_t_i_o_n

                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test rrrruuuusssseeeerrrrssss with any option besides "-l", "-h", "a", "-i", or  "-u".
       It  should  print  the usage error message on stderr and exit with a
       non-zero status.  Use the "-d" option with no parameters.  Also, run
       rrrruuuusssseeeerrrrssss with all the following options together: "-i", "-u", "-h" and
       a hostname.



       25.4.1.3  _g_o_o_d__o_p_t_i_o_n_s

                     IMPLEMENT TIME:                                 1.25 md
                     PERFORM TIME:                                   1.25 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test rrrruuuusssseeeerrrrssss with all combinations of the valid options listed above.
       Run  rrrruuuusssseeeerrrrssss  with  the  "-d"  option and a hostname.  Test with zero
       hosts, the local host, and then the local host and  a  remote  host.
       In  all cases, information about the local host should be present in
       the output.  It  should  be  sufficient  to  merely  check  for  the
       presence  of  the  local  host  and  current  user name; the options
       control the format or order of the output.  It might  be  worthwhile
       to  see  if  they fit the desired pattern, but checking the order or
       values in the output is unnecessary.











       HP Internal Use Only          - 220 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



       25.5  RRRRuuuusssseeeerrrrssssdddd tttteeeesssstttt ppppllllaaaannnn


       The functionality of the rusers daemon  is  covered  by  the  rusers
       tests.   The following tests were added to increase the BFA coverage
       for the rusers daemon:


         1.  Use pmap_conf  with  the  "-p"  option  to  call  rpc.rusersd,
             program  100002,  versions  1  and  2  with  procedure  4 (not
             defined,  it  will  execute  the  default  case  on  the  case
             statement).


       25.6  rrrrwwwwaaaallllllll TTTTeeeesssstttt PPPPllllaaaannnn


       This chapter covers the rrrrwwwwaaaallllllll command.  The main use of this command
       is  to  broadcast  a  message  to  all users on all the hosts on the
       network.  It provides much the same functionality  as  the  Berkeley
       wwwwaaaallllllll  command.   The  main  distinction  is  that Berkeley wwwwaaaallllllll only
       broadcasts messages to users on the local host.


       25.6.1  rrrrwwwwaaaallllllll             ooooppppttttiiiioooonnnnssss                        RESPONSIBLE
       ENGINEER:                               John         A        Dilley
                 ASSUMPTIONS:                                        module
       to be tested is functional




       25.6.1.1  _n_o__o_p_t_i_o_n_s


                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test rrrrwwwwaaaallllllll with no options.  It should print the usage error message
       on stderr and exit with a non-zero status.




       25.6.1.2  _b_a_d__o_p_t_i_o_n

                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes



       HP Internal Use Only          - 221 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



       Test rrrrwwwwaaaallllllll with any option besides "-h" or "-n".   It  should  print
       the  usage  error message on stderr and exit with a non-zero status.
       Note: this test should not attempt to use  the  "-d"  option,  since
       this  is  often  used as an undocumented "debug" option.  Call rrrrwwwwaaaallllllll
       with a bogus host name.  Call rrrrwwwwaaaallllllll with a message  that  is  longer
       than 1024 characters.



       25.6.1.3  _g_o_o_d__o_p_t_i_o_n_s

                     IMPLEMENT TIME:                                 0.5 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test rrrrwwwwaaaallllllll with all combinations of the valid options listed  above.
       Test with the local host, and then the local host and a remote host.
       Test with one or more network groups containing the local host.   In
       all cases, a message should be written to all terminals on the local
       host.  This test should probably be done  manually.   Caution:  this
       test  could  mess  up  tests  running on other hosts using rlogin or
       telnet, since they will  not  be  expecting  broadcast  messages  to
       appear in their output!



       25.7  RRRRwwwwaaaalllllllldddd tttteeeesssstttt ppppllllaaaannnn


       The functionality of the rwall daemon is covered by the rwall tests.
       The  following tests were added to increase the BFA coverage for the
       rwall daemon:


         1.  Use pmap_conf with the "-p" option to call rpc.rwalld, program
             100008,  version  1  procedure 4 (not defined, it will execute
             the default case on the case statement).

       25.8  sssshhhhoooowwwwmmmmoooouuuunnnntttt TTTTeeeesssstttt PPPPllllaaaannnn


       This chapter covers the sssshhhhoooowwwwmmmmoooouuuunnnntttt command.  The  main  use  of  this
       command is to list information about the file systems mounted on the
       local host, or other hosts on the network.   It  provides  much  the
       same  functionality  as  the mmmmoooouuuunnnntttt command.  The main distinction is
       that mmmmoooouuuunnnntttt only looks on the local host, and is  unable  to  display
       remote host mount table information.







       HP Internal Use Only          - 222 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



       25.8.1  sssshhhhoooowwwwmmmmoooouuuunnnntttt           ooooppppttttiiiioooonnnnssss                      RESPONSIBLE
       ENGINEER:                               John         A        Dilley
                 ASSUMPTIONS:                                        module
       to be tested is functional




       25.8.1.1  _n_o__o_p_t_i_o_n_s


                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test sssshhhhoooowwwwmmmmoooouuuunnnntttt with no options.  It should  show  the  mounted  file
       systems for the local host.




       25.8.1.2  _b_a_d__o_p_t_i_o_n

                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test sssshhhhoooowwwwmmmmoooouuuunnnntttt with any option  besides  "-a",  "-d"  or  "-e".   It
       should  print the usage error message on stderr and exit with a non-
       zero status.  Test with more than one host name.   It  should  print
       the  usage  error message on stderr and exit with a non-zero status.
       Note: this test should not attempt to use  the  "-d"  option,  since
       this is often used as an undocumented "debug" option.  Run sssshhhhoooowwwwmmmmoooouuuunnnntttt
       with two host names.  Run sssshhhhoooowwwwmmmmoooouuuunnnntttt when portmap is not running.



       25.8.1.3  _g_o_o_d__o_p_t_i_o_n_s

                     IMPLEMENT TIME:                                 0.75 md
                     PERFORM TIME:                                   1.75 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test sssshhhhoooowwwwmmmmoooouuuunnnntttt with all combinations of  the  valid  options  listed
       above.   Test  with  the local host, and then a remote host.  In all
       cases it should show information about the  exported  file  systems.
       It  would  be  appropriate  to  verify this information by using the
       local mmmmoooouuuunnnntttt command, either directly or  via  rrrreeeemmmmsssshhhh  on  the  remote
       host.   This  is to verify that sssshhhhoooowwwwmmmmoooouuuunnnntttt is telling the truth about
       the mounted file systems.




       HP Internal Use Only          - 223 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



       25.9  sssspppprrrraaaayyyy TTTTeeeesssstttt PPPPllllaaaannnn


       This chapter covers the sssspppprrrraaaayyyy command.  The main use of this command
       is to send a bunch of packets at a remote host, and measure how many
       of them were lost,  and  how  long  it  took  for  them  all  to  be
       transmitted.   This  is  to  allow  rudimentary  network performance
       measurements to be performed.


       25.9.1  sssspppprrrraaaayyyy ooooppppttttiiiioooonnnnssss
                 RESPONSIBLE ENGINEER:                               John A Dilley
                 ASSUMPTIONS:                                        module to be tested is functional




       25.9.1.1  _n_o__o_p_t_i_o_n_s


                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test sssspppprrrraaaayyyy with no options.  It should print the usage error message
       on stderr and exit with a non-zero status.




       25.9.1.2  _b_a_d__o_p_t_i_o_n

                     IMPLEMENT TIME:                                 0.25 md
                     PERFORM TIME:                                   1.0 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test sssspppprrrraaaayyyy with any option besides "-c" or "-l".   It  should  print
       the  usage  error message on stderr and exit with a non-zero status.
       Test with more than one host name.  It should print the usage  error
       message  on stderr and exit with a non-zero status.  Note: this test
       should not attempt to use the "-d" option, since this is often  used
       as an undocumented "debug" option.  This test should try to do:

       spray -l <number>, no hostname
       spray bogusname
       spray <bogus IP>








       HP Internal Use Only          - 224 -                        2/11/88







       NFS System Test Plan                                    RPC Commands



       25.9.1.3  _g_o_o_d__o_p_t_i_o_n_s

                     IMPLEMENT TIME:                                 0.5 md
                     PERFORM TIME:                                   2.5 md
                     TYPE OF TEST:                                   functional
                     EXPECTED OUTPUT:                                no output if the test passes
       Test sssspppprrrraaaayyyy with all combinations of the valid options listed  above.
       Test  with  the  local  host,  and then a remote host.  Test with an
       Internet address.  In all cases it should show information about the
       number  of  packets  dropped,  and  the throughput of the underlying
       subsystem.  It will probably be sufficient to check to see that  the
       output  is present.  There is no good reason to parse through it and
       check the values, since they will be different with each invocation.
       It  might be interesting to manually run sssspppprrrraaaayyyy a few times to see if
       HP-UX spray performance is up to the level of the  Suns.   We  would
       hope it would be.



       25.9.1.4  _W_i_t_h__i_n_c_o_r_r_e_c_t__s_i_z_e_s

                     IMPLEMENT TIME:                                 0.5 md
                     PERFORM TIME:                                   2.5 md
                     TYPE OF TEST:                                   functional
       Test sssspppprrrraaaayyyy as follows:

       spray -l 8846 host
       spray -l 1513 host
       This will work but the lenghts used will be rounded to their closest
       allowed length (8845 and 1514).



       25.10  SSSSpppprrrraaaayyyydddd tttteeeesssstttt ppppllllaaaannnn


       The functionality of the spray daemon is covered by the spray tests.
       The  following tests were added to increase the BFA coverage for the
       spray daemon:


         1.  Use pmap_conf with the "-p" option to call rpc.sprayd, program
             100012, version 1 procedure 0 (NULL_PROC) and procedure 4 (not
             defined,  it  will  execute  the  default  case  on  the  case
             statement).









       HP Internal Use Only          - 225 -                        2/11/88







       NFS System Test Plan                                        Security



       26.  SSSSeeeeccccuuuurrrriiiittttyyyy ((((DDDDaaaannnn SSSSiiiimmmmuuuullllaaaa))))


       This section of the system test plan addresses security  testing  of
       the NFS product.  Obviously, NFS can be no more secure than the Un*x
       system that underlies it. This test plan attempts to insure that  no
       additional  security  holes  are  introduced.  There are a number of
       security problems that are inherent in Sun's initial design of  NFS.
       In  these  cases,  the  problems will be addressed on a case-by-case
       basis since complete fixes may not be possible.

       Four general areas of the  NFS  product  will  be  exercised  in  an
       attempt to isolate possible security holes.  These areas are

                 1) File access permissions,

                 2) UID and GID restrictions,

                 3) Yellow Pages and related system files, and

                 4) PCNFS.

       The security tests will be managed and maintained in  the  NFS  test
       scaffold  and  will  rely  on  the  scaffold  environment  for their
       execution environment.  Whenever possible, tests will  be  leveraged
       from the functional test suite.

       NOTE:  Due to schedule constraints, the effort planned  for  writing
       this  section  of  the  system  test  plan and for writing/executing
       security tests has been limited.



       26.1  FFFFiiiilllleeee aaaannnndddd ddddiiiirrrreeeeccccttttoooorrrryyyy aaaacccccccceeeessssssss ppppeeeerrrrmmmmiiiissssssssiiiioooonnnnssss


       A critical portion of system security is  file  access  permissions.
       The  tests  described  in  this  section  exercise  read, write, and
       execute capabilities of directories and regular files.  These  tests
       will attempt to manipulate remote files and directories, and will be
       executed with root and normal user UIDs. Each test in  this  section
       is  designed  to fail in a predicted manner.  Essentially, if a test
       succeeds,  it  has  successfully  breached  the  system's   intended
       security.


               RESPONSIBLE ENGINEER: Dan Simula

               DEPENDENCIES:
                            The security test suite is intended to be run on a
                            remote file system (i.e., "cd"'d to a remotely mounted



       HP Internal Use Only          - 226 -                        2/11/88







       NFS System Test Plan                                        Security



                            file system).

                            NFS does not allow root capabilities to be exported to
                            remote file systems.  For this reason all root tests,
                            which attempt remote file and directory access, fail.

               ISSUES:



       26.1.1  RRRReeeemmmmooootttteeee ffffiiiilllleeee rrrreeeeaaaaddddssss bbbbyyyy oooowwwwnnnneeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt to read a file that does not have  owner  read  permissions.
       Test is run by owner or is executed set UID owner.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated.



       26.1.2  RRRReeeemmmmooootttteeee ffffiiiilllleeee rrrreeeeaaaaddddssss bbbbyyyy ggggrrrroooouuuupppp mmmmeeeemmmmbbbbeeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt to read a file that does not have  group  read  permissions.
       Test is run by member of group or is executed set GID group.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
                 TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated



       26.1.3  RRRReeeemmmmooootttteeee ffffiiiilllleeee rrrreeeeaaaaddddssss bbbbyyyy ooootttthhhheeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt to read a file that does not have  other  read  permissions.
       The  test  is  executed  by  a user who does not have owner or group
       access to the file.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated



       26.1.4  RRRReeeemmmmooootttteeee ffffiiiilllleeee wwwwrrrriiiitttteeeessss bbbbyyyy oooowwwwnnnneeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt  to  write  to  a  file  that  does  not  have  owner  write
       permissions.  Test  is  executed by the owner or is executed set UID



       HP Internal Use Only          - 227 -                        2/11/88







       NFS System Test Plan                                        Security



       owner.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated



       26.1.5  RRRReeeemmmmooootttteeee ffffiiiilllleeee wwwwrrrriiiitttteeeessss bbbbyyyy ggggrrrroooouuuupppp mmmmeeeemmmmbbbbeeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt  to  write  to  a  file  that  does  not  have  group  write
       permissions.  The  test  is  executed  by  a  member  of group or is
       executed set GUID group.
                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated



       26.1.6  RRRReeeemmmmooootttteeee ffffiiiilllleeee wwwwrrrriiiitttteeeessss bbbbyyyy ooootttthhhheeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt  to  write  to  a  file  that  does  not  have  other  write
       permissions.  The test is executed by a user who does not have owner
       or group access to the file.
                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated



       26.1.7  RRRReeeemmmmooootttteeee ddddiiiirrrreeeeccccttttoooorrrryyyy aaaacccccccceeeessssssss bbbbyyyy oooowwwwnnnneeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt to "cd" to a directory that  does  not  have  owner  execute
       permissions. Test is run by owner or is executed set UID owner.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EACCESS is generated.



       26.1.8  RRRReeeemmmmooootttteeee ddddiiiirrrreeeeccccttttoooorrrryyyy aaaacccccccceeeessssssss bbbbyyyy ggggrrrroooouuuupppp mmmmeeeemmmmbbbbeeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt to "cd" to a directory that  does  not  have  group  execute
       permissions.  Test  is run by member of group or is executed set GID
       group.




       HP Internal Use Only          - 228 -                        2/11/88







       NFS System Test Plan                                        Security



                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EACCESS is generated



       26.1.9  RRRReeeemmmmooootttteeee ddddiiiirrrreeeeccccttttoooorrrryyyy aaaacccccccceeeessssssss bbbbyyyy ooootttthhhheeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt to "cd" to a directory that  does  not  have  other  execute
       permissions.  The test is executed by a user who does not have owner
       or group access to the directory.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EACCESS is generated



       26.1.10  RRRReeeemmmmooootttteeee ffffiiiilllleeee rrrreeeeaaaaddddssss bbbbyyyy oooowwwwnnnneeeerrrr ((((rrrrooooooootttt))))

       Attempt to read to a file that does not have owner read permissions.
       The file is owned by root and the test is executed by root.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated.



       26.1.11  RRRReeeemmmmooootttteeee ffffiiiilllleeee rrrreeeeaaaaddddssss bbbbyyyy ggggrrrroooouuuupppp mmmmeeeemmmmbbbbeeeerrrr ((((rrrrooooooootttt))))

       Attempt to read to a file that does not have group read permissions.
       The test is executed by root where root is a member of group.
                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated.



       26.1.12  RRRReeeemmmmooootttteeee ffffiiiilllleeee rrrreeeeaaaaddddssss bbbbyyyy ooootttthhhheeeerrrr ((((rrrrooooooootttt))))

       Attempt to read to a file that does not have other read permissions.
       The  file  is  owned  by a non-root user and root must not be in the
       group. The test is executed by root.
                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional



       HP Internal Use Only          - 229 -                        2/11/88







       NFS System Test Plan                                        Security



               EXPECTED OUTPUT: test passes if EPERM is generated.



       26.1.13  RRRReeeemmmmooootttteeee ffffiiiilllleeee wwwwrrrriiiitttteeeessss bbbbyyyy oooowwwwnnnneeeerrrr ((((rrrrooooooootttt))))

       Attempt to write a file that does not have owner write  permissions.
       The file is owned by root and test is run by root.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated.



       26.1.14  RRRReeeemmmmooootttteeee ffffiiiilllleeee wwwwrrrriiiitttteeeessss bbbbyyyy ggggrrrroooouuuupppp mmmmeeeemmmmbbbbeeeerrrr ((((rrrrooooooootttt))))

       Attempt to write a file that does not have group write  permissions.
       The test is run by root where root is a group member.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated



       26.1.15  RRRReeeemmmmooootttteeee ffffiiiilllleeee wwwwrrrriiiitttteeeessss bbbbyyyy ooootttthhhheeeerrrr ((((rrrrooooooootttt))))

       Attempt to write a file that does not have other write  permissions.
       The  test  is  executed  by root and root must not be the owner or a
       group member.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated



       26.1.16  RRRReeeemmmmooootttteeee ddddiiiirrrreeeeccccttttoooorrrryyyy aaaacccccccceeeessssssss bbbbyyyy oooowwwwnnnneeeerrrr ((((rrrrooooooootttt))))

       Attempt to "cd" to a directory that  does  not  have  owner  execute
       permissions.  The  directory is owned by root and the test is run by
       root.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated.



       HP Internal Use Only          - 230 -                        2/11/88







       NFS System Test Plan                                        Security



       26.1.17  RRRReeeemmmmooootttteeee ddddiiiirrrreeeeccccttttoooorrrryyyy aaaacccccccceeeessssssss bbbbyyyy ggggrrrroooouuuupppp mmmmeeeemmmmbbbbeeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt to "cd" to a directory that  does  not  have  group  execute
       permissions.  The  test  is  run  by  root where root is a member of
       group.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated



       26.1.18  RRRReeeemmmmooootttteeee ddddiiiirrrreeeeccccttttoooorrrryyyy aaaacccccccceeeessssssss bbbbyyyy ooootttthhhheeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt))))

       Attempt to "cd" to a directory that  does  not  have  other  execute
       permissions.  The test is executed by root where root is neither the
       owner of the directory nor a member of the group.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: test passes if EPERM is generated



       26.2  UUUUIIIIDDDD aaaannnndddd GGGGIIIIDDDD rrrreeeessssttttrrrriiiiccccttttiiiioooonnnnssss


       This portion of the security test plan deals  with  UID  and/or  GID
       restrictions.

       Each test in this section is designed to fail in a predicted manner.
       Essentially,  if  a  test succeeds, it has successfully breached the
       system's intended security.


               RESPONSIBLE ENGINEER: Dan Simula
               DEPENDENCIES:
               ISSUES:



       26.2.1  RRRReeeemmmmooootttteeee ffffiiiilllleeee aaaacccccccceeeessssssss aaaassss ddddiiiissssgggguuuuiiiisssseeeedddd uuuusssseeeerrrr

       As root, change your local UID to that of a known  remote  user  and
       attempt  to  access  (i.e.,  read, write, create, remove) the remote
       user's files.

                 IMPLEMENT TIME:  0.2  md
                 PERFORM TIME:    0.2  md



       HP Internal Use Only          - 231 -                        2/11/88







       NFS System Test Plan                                        Security



               TYPE OF TEST: functional
               EXPECTED OUTPUT:
                            The test will output a failure message if the remote
                            access succeeds.

                  NOTE:
                            This test will always fail.  Identical behavior is
                            inherent to Sun's NFS system.



       26.2.2  UUUUIIIIDDDD mmmmaaaannnniiiippppuuuullllaaaattttiiiioooonnnn vvvviiiiaaaa RRRRPPPPCCCC

       Using the user-level RPC library routines,  create  an  RPC  request
       that  contains  a  false  UID  and  attempts to access a remote file
       system.
                 IMPLEMENT TIME:  0.5  md  (not implemented)
                 PERFORM TIME:    0.5  md
               TYPE OF TEST: functional
               EXPECTED OUTPUT: This should work.  It is a security hole.



       26.3  YYYYPPPP SSSSeeeerrrrvvvviiiicccceeeessss aaaannnndddd rrrreeeellllaaaatttteeeedddd ssssyyyysssstttteeeemmmm ffffiiiilllleeeessss


       The YP services provide centralized administration for one  or  more
       systems  in  a network environment.  The YP services manage the data
       bases that are composed of  a  number  of  security-critical  system
       files  (e.g.,  /etc/passwd,  /etc/hosts, etc).  The ability to break
       the security of the YP services or the YP  databases  constitutes  a
       breach in system security.

       Each test in this section is designed to fail in a predicted manner.
       Essentially,  if  a  test succeeds, it has successfully breached the
       system's intended security.

               RESPONSIBLE ENGINEER: Dan Simula
               DEPENDENCIES:
               ISSUES:



       26.3.1  YYYYeeeelllllllloooowwww PPPPaaaaggggeeeessss SSSSeeeeccccuuuurrrriiiittttyyyy

       Examine Yellow Pages security.  This area is not being addressed due
       to  scheduling  constraints.   Of  note  is  that  YP,  as designed,
       provides NO SECURITY, and indeed has no security objectives.
                 IMPLEMENT TIME:  5.0  md
                 PERFORM TIME:    4.0  md
               TYPE OF TEST: security



       HP Internal Use Only          - 232 -                        2/11/88







       NFS System Test Plan                                        Security



               EXPECTED OUTPUT:



       26.4  PPPPCCCCNNNNFFFFSSSS


       NOTE:  THIS SECTION CONTAINS HIGHLY SENSITIVE SECURITY INFORMATION.

       Sun's PC-NFS product runs on MS-DOS systems and allows  remote  file
       access  capabilities  to UN*X systems (client only).  The pcnfsd(1m)
       daemon provides user authentication to  MS-DOS  users  who  want  to
       access  owned  files  on  UN*X  file  systems.   This  section  will
       concentrate on identifying areas that represent security  risks  for
       the server system (i.e., an HP-UX/NFS server system).

       Each test in this section is designed to fail in a predicted manner.
       Essentially,  if  a  test succeeds, it has successfully breached the
       system's intended security.

               RESPONSIBLE ENGINEER: Dan Simula

               DEPENDENCIES:
                            Since the HP-Vectra does not support the NFS
                            test scaffold, these tests will be run manually
                            or will be included in a PC test scaffold.

               ISSUES:
                            A blatant security hole exists in Sun's original
                            design of NFS.  Any MS-DOS system has the capability
                            to break system security of an NFS server.



       26.4.1  GGGGaaaaiiiinnnn uuuunnnnaaaauuuutttthhhhoooorrrriiiizzzzeeeedddd aaaacccccccceeeessssssss ttttoooo ffffiiiilllleeee ssssyyyysssstttteeeemmmm((((ssss)))) oooonnnn aaaannnnyyyy NNNNFFFFSSSS sssseeeerrrrvvvveeeerrrr

       Attempt to  bypass  the  user-authentication  function  by  directly
       touching the UID field in the PC-NFS system.
                 IMPLEMENT TIME:  1.0  md
                 PERFORM TIME:    1.0  md
               TYPE OF TEST: manual
               EXPECTED OUTPUT:  Unauthorized access to remote file system.












       HP Internal Use Only          - 233 -                        2/11/88







       NFS System Test Plan                           Specific System Tests



       27.  NNNNFFFFSSSS ssssppppeeeecccciiiiffffiiiicccc ssssyyyysssstttteeeemmmm ffffuuuunnnnccccttttiiiioooonnnnssss ((((MMMMiiiikkkkeeee SSSShhhhiiiipppplllleeeeyyyy))))

       This chapter will cover the  testing  to  be  done  for  the  system
       intrinsics  that  were  added  for  NFS.   They are getdomainname(),
       setdomainname(), getfh(), vfsmount(), nfssvc() and async_daemon().

       Most of the  testing  will  done  from  C  programs.   Some  of  the
       intrinsics  are  embedded  inside  NFS  daemons  and have no general
       exposure to the user.  They will have limited  explicit  testing  as
       described  in  this  chapter.   We will rely on the execution of the
       daemons  during  the  normal  execution  of  NFS   to   test   their
       functionality.



       27.1  tttteeeessssttttiiiinnnngggg ggggeeeettttddddoooommmmaaaaiiiinnnnnnnnaaaammmmeeee(((()))) aaaannnndddd sssseeeettttddddoooommmmaaaaiiiinnnnnnnnaaaammmmeeee(((())))


       These intrinsics are used by YP.  The tests will determine  if  they
       properly  set  and return a string that is to be the domainname.  In
       the YP tests, there will be a test to insure  that  this  string  is
       indeed  used by the kernel as the name of the domain it thinks it is
       in on the network.  Finally there will be tests to confirm that  the
       intrinsics function properly under error conditions.

       RESPONSIBLE ENGINEER: Mike Shipley
       DEPENDENCIES: None
       ISSUES:




       27.1.1  SSSSeeeetttt aaaannnndddd ccccoooommmmppppaaaarrrreeee rrrreeeettttuuuurrrrnnnneeeedddd nnnnaaaammmmeeee

       Set the domain name to be a string, get the  string  back  and  then
       compare  the two strings to make sure they are equal. The setting of
       the name needs to be done as super-user.

       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
           The strings should be equal




       27.1.2  EEEErrrrrrrroooorrrr ccccoooonnnnddddiiiittttiiiioooonnnnssss aaaannnndddd CCCCoooorrrrnnnneeeerrrr ccccaaaasssseeeessss

       For the string parameter, pass a pointer of  NULL  to  getdomainname
       and setdomainname.



       HP Internal Use Only          - 234 -                        2/11/88







       NFS System Test Plan                           Specific System Tests



       Try to set up domain names of length -1, 0, 1, 254, 255 and 256.

       With a buffer of size n and a domain name  of  length  n-1,  request
       getdomainname to return a name and set the "namelen" parameter to be
       n-2.  Then examine the buffer to see if  any  attempt  was  made  to
       write past byte number n-2.

       Try to set the domain name with a name of n characters one of  which
       is  the  NULL  character.  Get the name back and see if the returned
       value has only the characters preceding the NULL character or if all
       n  characters  are  returned.  All of the preceding tests need to be
       done as super-user.

       As a non super-user, try to set a domainname.

       IMPLEMENT TIME:  0.5  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
           For NULL pointer, errno should be EFAULT.
           For names of length -1, 0, 1 and 256, the call should
             not work and errno probably will be EINVAL.
           For names of length 1, 254 and 255, the call should
             execute properly and should be compared to the value
             returned in getdomainname.
           For returning a part of a name, only the number of
             bytes requested should be written into the buffer.
           When trying to set the domainname from a group of
             letters with an embedded NULL, one should probably
             be returned only the characters preceding the NULL. ????
           Setting the name as a non super-user will have
             errno set up EPERM.


       27.2  tttteeeessssttttiiiinnnngggg ggggeeeettttffffhhhh(((())))

       This call returns a file handle for an open file.  It is  only  used
       in the mount daemon and has very limited functionality.

       RESPONSIBLE ENGINEER: Mike Shipley
       DEPENDENCIES: None
       ISSUES:




       27.2.1  GGGGeeeetttt aaaa ffffiiiilllleeee hhhhaaaannnnddddlllleeee

       Open a file and pass the file descriptor to getfh().  Open the  same
       file  again  to  get a different file descriptor and then pass it to
       getfh.  The resulting two file handles should be  compared  byte  to



       HP Internal Use Only          - 235 -                        2/11/88







       NFS System Test Plan                           Specific System Tests



       byte.

       Pass gethf() a non valid file descriptor.

       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
           For the valid file descriptor, getfh will return 0
             and the fhandle_t struct should have a value.
           For the case of doing two getfh's, the fhandle_t
             should be the same.
           For a non valid file descriptor, getfh will return
             -1 and errno should be EBADF.





       27.2.2  GGGGeeeetttt aaaa ffffiiiilllleeee hhhhaaaannnnddddlllleeee ffffoooorrrr aaaa CCCCDDDDFFFF

       Create the file of concern as a CDF.  This is done by the following:

       mkdir      the_file
       chmod u+s  the_file

       Now basically repeat the previous test.  Don't bother to do the  non
       valid  file descriptor.  Open a file and pass the file descriptor to
       getfh().   Open  the  same  file  again  to  get  a  different  file
       descriptor  and  then  pass  it  to  getfh.   The resulting two file
       handles should be compared byte to byte.


       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
           For the valid file descriptor, getfh will return 0
             and the fhandle_t struct should have a value.
           For the case of doing two getfh's, the fhandle_t
             should be the same.



       27.3  tttteeeessssttttiiiinnnngggg vvvvffffssssmmmmoooouuuunnnntttt(((())))

       Testing vfsmount() requires that many things such as connections and
       file  handles  be already established before calling vfsmount.  This
       is done in the mount command,  so  taking  the  command  source  and
       changing  code  inside  the  command  source  is the way to exercise
       vfsmount() as compared to  trying  to  write  a  test  program  from



       HP Internal Use Only          - 236 -                        2/11/88







       NFS System Test Plan                           Specific System Tests



       scratch.   This  system  call is NOT something that an ordinary user
       can just throw into a program.  The only way it  will  get  used  is
       through the mount command, so extreme stressing of all parameters is
       of less importance than with other system calls.

       RESPONSIBLE ENGINEER: Mike Shipley
       DEPENDENCIES: Obtaining the command source from ISO
       ISSUES:




       27.3.1  NNNNoooonnnn ssssuuuuppppeeeerrrruuuusssseeeerrrr aaaacccccccceeeessssssss

       Try to execute vfsmount without being superuser.   Also  create  the
       program from the mount source that will do the testing of vfsmount.

       IMPLEMENT TIME:  1.5  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
           vfsmount should return -1 and errno should equal EPERM




       27.3.2  BBBBaaaadddd ffffiiiilllleeee hhhhaaaannnnddddlllleeee

       Give vfsmount a bad file handle in the nfs_args struct.   This  file
       handle would refer to the remote file system to be mounted.

       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
           vfsmount should return -1 and errno should equal ENOENT




       27.3.3  MMMMoooouuuunnnntttt aaaa ddddiiiirrrreeeeccccttttoooorrrryyyy ttttwwwwiiiicccceeee

       Do a remote mount on a directory.  Then try to  pass  vfsmount  that
       same directory to do a mount on.

       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
           vfsmount should return -1 and errno should equal EBUSY




       HP Internal Use Only          - 237 -                        2/11/88







       NFS System Test Plan                           Specific System Tests



       27.3.4  EEEExxxxeeeerrrrcccciiiissssiiiinnnngggg ooooppppttttiiiioooonnnnssss

       The nfs_args structure that is passed to vfsmount  contains  several
       fields that contains options that vfsmount uses.  These are settable
       with the mount command and SHOULD be tested by ISO.  The  object  of
       this  test is to find out from ISO what options to the mount command
       they are testing and then either get them to test any holes that may
       exist in the option testing or to do the tests here.  We really need
       to make sure that we don't duplicate testing that will  be  done  at
       ISO in the normal command testing.

       IMPLEMENT TIME:  2.0  md
       PERFORM TIME:    1.0  md
       TYPE OF TEST: functional
       DEPENDENCIES: Getting information on the tests that ISO will be
                       doing on the mount command.
       EXPECTED OUTPUT:






       27.3.5  VVVVffffssssmmmmoooouuuunnnntttt aaaannnndddd CCCCDDDDFFFF''''ssss PPPPaaaarrrrtttt 1111

       The following tests look at vfsmount() and CDF.  The  mount  command
       can  be  used  in  these  tests instead of trying to build a special
       program.

       To make a CDF, do the following two steps.  I will treat  these  two
       steps as a script called mkcdf whenever I want to create a CDF.

       mkcdf would look like this:
       mkdir      $1
       chmod u+s  $1

       Create a CDF directory and use it as a mount point.  Then from  this
       mount  point, create a CDF directory on a remote node and do a mount
       of that CDF directory.

       mkcdf  /cdfA               (On node A)
       mkdir  /cdfA               (On node A)
       mount  nodeB:/  /cdfA      (On node A)
       cd  /cdfA/tmp
       touch  x y z               (On node A)
       ls  /cdfA/tmp              (On node A)
       # RESULT  The ls should work properly and return "x y z"
       rm  x y z
       cd

       mkcdf  /cdfA/cdfB          (On node A)



       HP Internal Use Only          - 238 -                        2/11/88







       NFS System Test Plan                           Specific System Tests



       mkdir  /cdfA/cdfB+/default (On node A)
       cd     /cdfA/cdfB          (On node A)
       touch  a b c d e           (On node A)
       cd                         (On node A)
       umount  /cdfA              (On node A)
       mount  nodeB:/cdfB  /cdfA  (On node A)
       ls  /cdfA                  (On node A)
       # RESULT  The ls should work properly and return "a b c d e"
       umount /cdfA               (On node A)
       mount  nodeB:/cdfB+/default  /cdfA   (On node A)
       ls  /cdfA                  (On node A)
       # RESULT  The ls should work properly and return "a b c d e"
       cd /cdfA                   (On node A)
       rm  a b c d e              (On node A)
       cd                         (On node A)
       umount  /cdfA              (On node A)
       mount  nodeB:/  /cdfA      (On node A)
       rm -r /cdfA/cdfB+          (On node A)

       mkcdf  /cdfA/cdfB              (On node A)
       cat >/cdfA/cdfB <<zztop        (On node A)
       xyzzy                          (On node A)
       zztop                          (On node A)
       cdf_context=`ls /cdfA/cdfB+`   (On node A)
       # RESULT cdf_context should be the context of the remote node
       # RESULT There is no way to determine what that context will be.
       # RESULT Most likely it will be the hostname of the remote node.
       # RESULT The only certainty is that is will not be the hostname
       # RESULT of the client node as the context is set by the context
       # RESULT of the nfs server process
       umount  /cdfA                  (On node A)
       rm -r /cdfA+                   (On node A)



       IMPLEMENT TIME:  0.5  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
       See the "# RESULT" lines in the script




       27.3.6  VVVVffffssssmmmmoooouuuunnnntttt aaaannnndddd CCCCDDDDFFFF''''ssss PPPPaaaarrrrtttt 2222

       The following tests look at vfsmount() and CDF.  The  mount  command
       can  be  used  in  these  tests instead of trying to build a special
       program.  This test will involve diskless nodes  and  a  CDF  for  a
       mount point.




       HP Internal Use Only          - 239 -                        2/11/88







       NFS System Test Plan                           Specific System Tests



       To make a CDF, do the following two steps.  I will treat  these  two
       steps as a script called mkcdf whenever I want to create a CDF.

       mkcdf would look like this:
       mkdir      $1
       chmod u+s  $1

       There are 5 nodes involved in this test.  They are as follows:
          NodeA = root server
          NodeB = diskless server
          NodeC = diskless server
          NodeD = a node outside the server
          NodeE = a node outside the server
       The idea is to create a CDF directory on A that can be used by B and
       C to reach D and E.

       mkcdf  /mnt_cdf                                               (On NodeA)
       mkdir  /mnt_cdf+/B                                            (On NodeA)
       mkdir  /mnt_cdf+/C                                            (On NodeA)
       mount  NodeD:/tmp  /mnt_cdf                                   (On NodeB)
       mount  NodeE:/tmp  /mnt_cdf                                   (On NodeC)
       cd  /mnt/cdf                                                  (On NodeB)
       touch a b c d e                                               (On NodeB)
       cd  /mnt/cdf                                                  (On NodeC)
       touch x y z                                                   (On NodeC)
       cd                                                            (On NodeB)
       cd                                                            (On NodeC)
       ls /mnt/cdf                                                   (On NodeB)
       # RESULT  The ls should work and return "a b c d e"
       ls /mnt/cdf                                                   (On NodeC)
       # RESULT  The ls should work and return "x y z"
       cd  /mnt/cdf                                                  (On NodeB)
       rm a b c d e                                                  (On NodeB)
       cd  /mnt/cdf                                                  (On NodeC)
       rm x y z                                                      (On NodeC)
       umount  /mnt_cdf                                              (On NodeB)
       umount  /mnt_cdf                                              (On NodeC)
       rm -r /mnt_cdf+                                               (On NodeA)




       IMPLEMENT TIME:  1.1  md
       PERFORM TIME:    0.3  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
       See the "# RESULT" lines in the script







       HP Internal Use Only          - 240 -                        2/11/88







       NFS System Test Plan                           Specific System Tests



       27.4  tttteeeessssttttiiiinnnngggg nnnnffffssssssssvvvvcccc(((()))) aaaannnndddd aaaassssyyyynnnncccc____ddddaaaaeeeemmmmoooonnnn(((())))

       The system calls of nfssvc and async_daemon are  only  used  in  nfs
       server  daemon  process  and  the  bio  daemons.  They have very few
       options and therefore there will be  little  testing  outside  their
       normal  execution.   If  they are successful in operation, they will
       not return, so we will want to only test  failure  cases.   We  will
       monitor  the  successful  operation of these calls by the successful
       functioning of NFS, BFA numbers and  performance  differences  (when
       the /etc/biod is executed).

       RESPONSIBLE ENGINEER: Mike Shipley
       DEPENDENCIES: None
       ISSUES:




       27.4.1  EEEExxxxeeeeccccuuuuttttiiiioooonnnn wwwwiiiitttthhhhoooouuuutttt nnnneeeettttwwwwoooorrrrkkkkiiiinnnngggg

       Try to execute /etc/nfsd and /etc/biod without having the networking
       powered up.

       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
           Both the nfsd and biod programs should fail to work.
             Error messages unknown. ????




       27.4.2  BBBBaaaadddd ssssoooocccckkkkeeeetttt ffffoooorrrr nnnnffffssssssssvvvvcccc(((())))

       Put nfssvc() in a program and pass it an invalid socket number.

       IMPLEMENT TIME:  0.2  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
           The call to nfssvc should return with a value of -1.
                               The value of errno is unknown, but should be checked
                               to determine if it seems appropriate.   ????










       HP Internal Use Only          - 241 -                        2/11/88







       NFS System Test Plan                                          Stress



       28.  NNNNFFFFSSSS SSSSttttrrrreeeessssssss PPPPllllaaaannnn ((((JJJJiiiimmmm HHHHuuuunnnntttteeeerrrr))))



       28.1  DDDDIIIISSSSCCCCUUUUSSSSSSSSIIIIOOOONNNN




       28.1.1  IIIInnnnttttrrrroooodddduuuuccccttttiiiioooonnnn

       The objective of the stress tests is to isolate defects in  the  NFS
       code  by subjecting it to a wide variety of simultaneous activities.
       The existing functional tests for NFS are single threaded  and  test
       one  functionality at a time. The goal of this chapter is to outline
       a plan to generate tests, under the common umbrella of stress tests,
       to test the robustness of the NFS service.

       It should be noted that the stress tests are being ported  from  the
       IND   stress   tests   for   RFA   on  the  Indigo.   The  estimated
       implementation times are the times needed for each port.



       28.1.2  SSSSccccooooppppeeee ooooffff tttthhhheeee tttteeeessssttttssss

       The success or failure of the tests will  be  determined  using  the
       following criteria outlined below and if appropriate, an analysis of
       the end state of the system.


          o+ The system should not crash or hang.

          o+ The service integrity should be preserved.

          o+ The networking state of the involved nodes should be equivalent
            to the start state.



       28.1.3  MMMMooooddddeeeellll ffffoooorrrr ssssttttrrrreeeessssssss tttteeeessssttttiiiinnnngggg

       The model adopted to stress test the NFS service  characterizes  the
       NFS service along the following dimensions:

          o+ concurrent use of NFS

          o+ resources utilized by NFS

          o+ asynchronous interaction of programs and processes with NFS




       HP Internal Use Only          - 242 -                        2/11/88







       NFS System Test Plan                                          Stress



          o+ load on the nodes


        [1]  Concurrent  use  of  NFS  would  be  invoking  multiple   user
             processes to the same or different destination(s).

        [2]  The  resources  utilized  by  NFS  are  processes,  networking
             memory, vnodes, cpu cycles and paged-out RAM.

        [3]  The focus of  the  asynchronous  tests  is  on  timing-related
             dependencies.   These  tests  will  build  and  tear  down NFS
             "connections" at varying speeds.

        [4]  The load on the nodes is varied by controlling the  amount  of
             background NFS activity.

       The stress environment will be a subset of the points in  this  four
       dimensional  space.   We  may add a fifth dimension to vary how long
       these tests are run.  The choice of the points in the model will  be
       made in a controlled random manner.



       28.1.3.1  _R_e_f_e_r_e_n_c_e__F_r_a_m_e

       The precise definition of the stress environment necessitates a list
       of  system parameters that would be initialized or fixed outside the
       scope of the tests.  This  assumes  a  two  node  model  for  stress
       testing.

       The parameters to consider are:

          o+ Memory size

          o+ The initial load on the node, i.e., no  activity  on  the  node
            other than the standard daemons

          o+ The predefined or default values  of  the  sizes  of  the  file
            table, vnode table, and maximum number of processes

          o+ the activity on the coax and the noise on the coax



       28.1.4  IIIImmmmpppplllleeeemmmmeeeennnnttttaaaattttiiiioooonnnn GGGGooooaaaallllssss

       In order to implement the model outlined above,  the  following  are
       identified as desirable goals:

          o+ Ability to measure results and detect failures.




       HP Internal Use Only          - 243 -                        2/11/88







       NFS System Test Plan                                          Stress



          o+ Flexibility to integrate with the scaffold.

          o+ Ability to choose the dimension  or  dimensions  in  which  the
            tests  are  to  be run.  This would make it easier to implement
            and debug than a monolithic approach.

          o+ Leverage off the existing software as much as possible.



       28.1.4.1  _C_o_n_c_u_r_r_e_n_c_y


          o+ Tests that will initiate NFS activity (i.e. reads  and  writes)
            in parallel to the same node and from the same file(s).



       28.1.4.2  _L_o_a_d

            The load on the nodes will be varied. This is done by

          o+ running NFS functional tests

          o+ Doing intensive reads and writes using cp and/or cmp over NFS.



       28.1.4.3  _T_i_m_e__d_e_p_e_n_d_e_n_c_i_e_s

       The tests in this dimension are designed to subject the  service  to
       fixed and random delays.  This will be accomplished in the following
       ways:

          o+ A fixed or random time delay between  mounting  a  remote  file
            system and using the file system.

          o+ Mount and unmount remote file systems at fixed or  random  time
            intervals.



       28.1.4.4  _R_e_s_o_u_r_c_e__U_t_i_l_i_z_a_t_i_o_n


          o+ Behavior of a node which mounts many file systems  exported  by
            the same remote node.

          o+ Behavior of a node which is a server for many client nodes.





       HP Internal Use Only          - 244 -                        2/11/88







       NFS System Test Plan                                          Stress



          o+ Behavior of a node which is a client of many server nodes.



       28.2  PPPPoooorrrrtttteeeedddd TTTTeeeesssstttt SSSScccceeeennnnaaaarrrriiiioooossss


       RESPONSIBLE ENGINEER: Jim Hunter
       IMPLEMENT TIME:  7.0  md
       PERFORM TIME:    6.0  md

       The test sections (concurrency, load,  and  time  dependencies)  are
       designed to be run independently, serially, or concurrently.



       28.2.1  CCCCoooonnnnccccuuuurrrrrrrreeeennnnccccyyyy


                 test#      description                              expect response

                 1          Initiate 10 simultaneous cp's from same  no error
                            source file to different remote files and
                            cmp to original.
                 2          Same as 1 except reverse local and remoteno error
                 3          Initiate 10 simultaneous cp's from differentno error
                            sized source files to different remote
                            target files and cmp to originals.
                 4          Same as 3 except reverse local and remoteno error
                 5          Initiate 10 ls -R's or remote file systemno error
                 6          Initiate 10 simultaneous instances of theno error
                            NFS functional tests.



       28.2.2  LLLLooooaaaadddd

       The real objective of concurrent activities is to  create  a  varied
       CPU  load  of  40%  to  95% on the local node or remote node or both
       nodes, depending on the individual test case.  The actual number  of
       concurrent  activities  will need to be tuned to provide the desired
       loads.  The numbers indicated here are based on the  current  values
       used for the Indigo RFA stress tests.

       TEST CONFIGURATION: Each machine will act as a client and a server.

                          ----------          ----------
                          | NODE A |<-------->| NODE B |
                          ----------          ----------





       HP Internal Use Only          - 245 -                        2/11/88







       NFS System Test Plan                                          Stress



                 test#      description                              expect response

                 1          One instance of NFS function tests while:no error
                            [1] concurrently copying 5 different sized
                                files over NFS from node A.
                            [2] concurrently performing ls -R of local
                                root and remote machine.
                 2          One instance of NFS functional tests while:no error
                            [1] concurrently copying 10 different sized
                                files over NFS (5 initiated on each
                           node)
                            [2] concurrently performing ls -R of remote
                                root (running on both nodes)
                 3          One instance of NFS functional tests while:no error
                            [1] concurrently copying 10 different sized
                                files over NFS (5 initiated on each
                           node)
                            [2] concurrently performing ls -R of remote
                                root (running on both nodes)
                            [3] concurrently performing ls -R of local
                                root (running on both nodes)




       28.2.3  TTTTiiiimmmmeeee ddddeeeeppppeeeennnnddddeeeennnncccciiiieeeessss


                 test#      description                              expect response

                 1          Mount a remote file system and run NFS   no error
                            functional tests after random intervals
                            of time.
                 2          Mount and unmount remote file systems at no error
                            random intervals of time.
                 3          Mount and unmount remote file systems in no error
                            quick succession.



       28.3  NNNNeeeewwww TTTTeeeesssstttt SSSScccceeeennnnaaaarrrriiiioooossss


       The following are test scenarios not covered in IND's Indigo  stress
       tests.   Because  of their nature, these tests will not be automated
       nor will they be executed from the standard scaffold structure.








       HP Internal Use Only          - 246 -                        2/11/88







       NFS System Test Plan                                          Stress



       28.3.1  TTTToooooooo mmmmaaaannnnyyyy mmmmoooouuuunnnnttttssss

       While copying a large block of data (e.g., a cp of duration  greater
       than  1 minute) from a client 9000 which has mounted as many servers
       as it can (dependent on available network memory, etc),  attempt  to
       mount  one  additional server.  The mount should fail and all of the
       copy operations should complete without errors.

       RESPONSIBLE ENGINEER: Jim Hunter
       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    2.0  md



       28.3.2  MMMMaaaaxxxxiiiimmmmuuuummmm mmmmoooouuuunnnnttttssss wwwwiiiitttthhhh ssssttttrrrreeeessssssss

       Mount as many NFS servers as memory allows, then run one instance of
       the   NFS   functional   tests   (for   24  hours)  to  each  server
       simultaneously.  All tests should complete without errors.

       RESPONSIBLE ENGINEER: Jim Hunter
       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    3.0  md



       28.3.3  MMMMaaaannnnyyyy CCCClllliiiieeeennnnttttssss ttttoooo OOOOnnnneeee SSSSeeeerrrrvvvveeeerrrr

       Have 5 clients mount the same server.  Run one instance of  the  NFS
       functional  tests  (for  24  hours) from each client simultaneously.
       All tests should complete without errors.

       RESPONSIBLE ENGINEER: Jim Hunter
       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    3.0  md



















       HP Internal Use Only          - 247 -                        2/11/88







       NFS System Test Plan                                  Symbolic Links



       29.  NNNNFFFFSSSS aaaannnndddd tttthhhheeee AAAArrrrtttt ooooffff SSSSyyyymmmmbbbboooolllliiiicccc LLLLiiiinnnnkkkkssss ((((MMMMiiiikkkkeeee SSSShhhhiiiipppplllleeeeyyyy))))

       NFS and symbolic links function differently than  RFA  and  symbolic
       links.   Symbolic  links  with  root relative pathnames with NFS are
       relative to the client root.  With RFA, they  are  relative  to  the
       server's  root.  Part of this testing will cover the differences.  I
       want to use NFS to set up remote symbolic links and then use NFS  to
       access  files  through the links.  This will kill two birds with one
       set of tests.  The names of files that I will use  are  just  to  be
       used  in  a symbolic sense and not literally.  They do not take into
       consideration the needs of the scaffold or of any  additions  needed
       to  achieve  the  name  space  independence  that  concurrent  tests
       require.


       29.1  CCCCrrrreeeeaaaattttiiiinnnngggg aaaannnndddd UUUUttttiiiilllliiiizzzziiiinnnngggg SSSSyyyymmmmbbbboooolllliiiicccc LLLLiiiinnnnkkkkssss oooovvvveeeerrrr NNNNFFFFSSSS

       RESPONSIBLE ENGINEER: Steve Booth
       DEPENDENCIES: A kernel from SSO supporting symbolic links
       ISSUES:




       29.1.1  NNNNoooorrrrmmmmaaaallll ccccrrrreeeeaaaattttiiiioooonnnn aaaannnndddd aaaacccccccceeeessssssss

       Mount the remote node (BLAH) on the directory  /mnt.   Create  three
       symbolic  links  on BLAH.  This will test when NFS is used to access
       through a symbolic link, where will the  access  actually  be  made.
       NFS  should  access  relative  to  the  client node (RFA will access
       relative to the server node).
           mount BLAH:/ /mnt

           (ln -s   will create a symbolic link)
           make a symbolic link named /mnt/tmp/a_sym_ln1
           containing  "/mnt/tmp/file1"
           make a symbolic link named /mnt/tmp/a_sym_ln2
           containing  "/tmp/file2"
           make a symbolic link named /mnt/tmp/a_sym_ln3
           containing  "file3"
           make a symbolic link named /tmp/a_sym_ln_loc
           containing /mnt/tmp/file1

           write "REMOTE file1" in /mnt/tmp/file1.
           write "LOCAL file2" in /tmp/file2.
           write "REMOTE file3" in /mnt/tmp/file3
           write "LOCAL file3" in /tmp/file3

           cd /tmp
           read /mnt/tmp/a_sym_ln1, expect "REMOTE file1"
           read /mnt/tmp/a_sym_ln2, expect "LOCAL file2"



       HP Internal Use Only          - 248 -                        2/11/88







       NFS System Test Plan                                  Symbolic Links



           read /mnt/tmp/a_sym_ln3, expect "LOCAL file3"
           read /tmp/a_sym_ln_loc, expect "REMOTE file1"

           cd /mnt/tmp
           read a_sym_ln1, expect "REMOTE file1"
           read a_sym_ln2, expect "LOCAL file2"
           read a_sym_ln3, expect "REMOTE file3"
           read /tmp/a_sym_ln_loc, expect "REMOTE file1"

           write "REMOTE file1 through symlink" in a_sym_ln1
           write "LOCAL file2 through symlink in a_sym_ln2
           write "REMOTE file3 through symlink" in a_sym_ln3
           cd /tmp
           read /mnt/tmp/file1, expect "REMOTE file1 through symlink"
           read /tmp/file2, expect "LOCAL file2 through symlink"
           read /mnt/tmp/file3, expect "REMOTE file3 through symlink"

           rm /tmp/file* /mnt/tmp/file* /tmp/a_sym_ln* /mnt/tmp/a_sym_ln*


       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    0.5  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT: See above




       29.1.2  llllllll tttthhhhrrrroooouuuugggghhhh ssssyyyymmmmbbbboooolllliiiicccc lllliiiinnnnkkkk wwwwiiiitttthhhh NNNNFFFFSSSS

       Create a directory on the remote machine with files in  it.   Do  an
       "ll"  command  through  a  symbolic link and an "ll" through NFS and
       compare the results (the -L option allows ls -l to  work  through  a
       symbolic link).
           mount BLAH:/ /mnt
           cd /tmp
           ln -s /mnt/tmp/dir a_sym_ln1
           mkdir /mnt/tmp/dir
           for i in a b c d e f g h i j k l m n o p q r s t u v w x y z
           do
              touch /mnt/tmp/dir/$i
           done
           ls -l -L a_sym_ln1 >temp1
           ls -l -L /mnt/tmp/dir >temp2
           cmp temp1 temp2
           rmdir -r /mnt/tmp/dir
           rm a_sym_ln1

       IMPLEMENT TIME:  0.5  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional



       HP Internal Use Only          - 249 -                        2/11/88







       NFS System Test Plan                                  Symbolic Links



       EXPECTED OUTPUT: The temp1 and temp2 files should be the same





       29.1.3  RRRReeeeaaaaddddiiiinnnngggg ssssyyyymmmmbbbboooolllliiiicccc lllliiiinnnnkkkkssss wwwwiiiitttthhhh NNNNFFFFSSSS

       Create symbolic links containing path names of varying  lengths  and
       read back their contents using the readlink() system call.  WARNING:
       The information returned by readlink() is NOT null terminated.

           mount BLAH:/ /mnt
           (ln -s   will create a symbolic link)
           make a symbolic link named /mnt/tmp/a_sym_ln1
           containing  "/mnt/tmp/file1"
           do a readlink() on /mnt/tmp/a_sym_ln1,
             expect "/mnt/tmp/file1"

           make a symbolic link named /mnt/tmp/a_sym_ln2
           containing  "/tmp/file2"
           do a readlink() on /mnt/tmp/a_sym_ln2,
             expect "/tmp/file2"

           make a symbolic link named /mnt/tmp/a_sym_ln3
           containing  "file3"
           do a readlink() on /mnt/tmp/a_sym_ln3,
             expect "file3"

           For the next tests, use a C program that calls
           the symlink() system call to create the symbolic links

           make a symbolic link named /mnt/tmp/a_sym_ln4
           containing "/"  (just one character)
           do a readlink() on /mnt/tmp/a_sym_ln4
             expect "/"

           make a symbolic link named /mnt/tmp/a_sym_ln5 to
           contain 1023 characters.
           do a readlink() on /mnt/tmp/a_sym_ln5,
             expect the 1023 characters.

           make a symbolic link named /mnt/tmp/a_sym_ln7 to
           contain 1024 characters.  This should fail to work,
           with errno=ENAMETOOLONG.

           make a symbolic link named /mnt/tmp/a_sym_ln7 to
           contain 1025 characters.  This should fail to work,
           with errno=ENAMETOOLONG.

           make a symbolic link named /mnt/tmp/a_sym_ln8 to



       HP Internal Use Only          - 250 -                        2/11/88







       NFS System Test Plan                                  Symbolic Links



           contain the NULL string,
           do a readlink() on /mnt/tmp/a_sym_ln8,
             expect the NULL.


       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT: See each test case




       29.1.4  TTTTeeeessssttttiiiinnnngggg ffffoooorrrr tttthhhheeee EEEELLLLOOOOOOOOPPPP eeeerrrrrrrroooorrrr

       When parsing a pathname, eventually the  number  of  symbolic  links
       encountered  can  get  to be so large, that an error is returned and
       that error is ELOOP(returned in errno).  So this test is to  see  if
       that  number(whatever  it  is)  is  the  same when parsing pathnames
       locally and over NFS.

           mount BLAH:/  /mnt

           cd /tmp
           ln -s /etc/passwd a_sym_ln0
           open_a_file a_sym_ln0   [This is a C program that returns 0
                                    if it is able to open the file passed
                                    in as an argument or returns the errno
                                    value if unable to open the file]
           ret=$?
           cnt=0
           while ($ret == 0)
           do
              cnt2=$cnt+1      [use expr to do this]
              ln -s a_sym_ln$cnt a_sym_ln$cnt2
              open_a_file a_sym_ln$cnt2
              ret=$?
              cnt=$cnt2
           done
           rm a_sym_ln*
           if ($ret != ELOOP)
              then exit(ERROR:  ELOOP expected and $ret was returned)
           fi

           ln -s /mnt/etc/passwd /mnt/tmp/a_sym_ln0
           open_a_file /mnt/tmp/a_sym_ln0
           ret_nfs=$?
           cnt_nfs=0
           while ($ret_nfs == 0)
           do
              cnt2_nfs=$cnt_nfs+1      [use expr to do this]



       HP Internal Use Only          - 251 -                        2/11/88







       NFS System Test Plan                                  Symbolic Links



              ln -s /mnt/tmp/a_sym_ln$cnt_nfs /mnt/tmp/a_sym_ln$cnt2_nfs
              open_a_file /mnt/tmp/a_sym_ln$cnt2_nfs
              ret_nfs=$?
              cnt_nfs=$cnt_nfs2
           done
           rm /mnt/tmp/a_sym_ln*
           if ($ret_nfs != ELOOP)
              then exit(ERROR:  ELOOP expected and $ret was returned)
           fi

           if ($ret != $ret_nfs)
               then exit(ERROR:  Number of links parsed locally was $ret
                                 Number of links parsed with NFS was $ret_nfs)
               else exit(ELOOP test passes)
           fi


       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT: ELOOP test passes




       29.1.5  RRRReeeeccccuuuurrrrssssiiiivvvveeee ssssyyyymmmmbbbboooolllliiiicccc lllliiiinnnnkkkkssss wwwwiiiitttthhhh NNNNFFFFSSSS

       Create a symbolic link file (through a mount point) to itself.  Then
       access  the  link.   Create  a  2-way indirection, with a local file
       linked to a remote file which is linked to the local file.   Try  to
       access  either of the links.  Create a 3-way indirection, and try to
       access any one of the 3 links.

           mount BLAH:/  /mnt

           ln -s /mnt/tmp/a_sym_ln1 /mnt/tmp/a_sym_ln1
           open_a_file /mnt/tmp/a_sym_ln1
           ret=$?
           rm /mnt/tmp/a_sym_ln1

           ln -s /tmp/a_sym_ln1  /mnt/tmp/a_sym_ln2
           ln -s /mnt/tmp/a_sym_ln2  /tmp/a_sym_ln1
           open_a_file  /mnt/tmp/a_sym_ln2
           ret=$?
           rm /tmp/a_sym_ln1 /mnt/tmp/a_sym_ln2

           ln -s /mnt/tmp/a_sym_ln1 /tmp/a_sym_ln2
           ln -s /tmp/a_sym_ln2 /mnt/tmp/a_sym_ln3
           ln -s /mnt/tmp/a_sym_ln3 /mnt/tmp/a_sym_ln1
           open_a_file /tmp/a_sym_ln2
           ret=$?



       HP Internal Use Only          - 252 -                        2/11/88







       NFS System Test Plan                                  Symbolic Links



           rm /tmp/a_sym_ln1 /tmp/a_sym_ln2 /mnt/tmp/a_sym_ln3

       IMPLEMENT TIME:  0.5  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT: The open_a_file program should return with a value
                        of ELOOP in all cases.





       29.1.6  SSSSyyyymmmmbbbboooolllliiiicccc LLLLiiiinnnnkkkkssss aaaannnndddd CCCCDDDDFFFF''''ssss PPPPaaaarrrrtttt 1111

       The following tests look at symbolic links and CDF's.

       To make a CDF, do the following two steps.  I will treat  these  two
       steps as a script called mkcdf whenever I want to create a CDF.

       mkcdf would look like this:
       mkdir      $1
       chmod u+s  $1

       Repeat the first series of tests for symbolic links,  except  use  a
       CDF symbolic link.

       Mount the remote node (BLAH) on the directory  /mnt.   Create  three
       CDF  symbolic  links  on  BLAH.   This will test when NFS is used to
       access through a symbolic link, where will the  access  actually  be
       made.  NFS should access relative to the client node.
           mount BLAH:/ /mnt

           (ln -s   will create a symbolic link)
           mkcdf  /mnt/tmp/a_sym_ln1
           ln -s  /mnt/tmp/file1  /mnt/tmp/a_sym_ln1
           mkcdf /mnt/tmp/a_sym_ln2
           ln -s  /tmp/file2  /mnt/tmp/a_sym_ln2
           mkcdf /mnt/tmp/a_sym_ln3
           ln -s file3  /mnt/tmp/a_sym_ln3
           mkcdf /tmp/a_sym_ln_loc
           ln -s /mnt/tmp/file1 /tmp/a_sym_ln_loc

           write "REMOTE file1" in /mnt/tmp/file1.
           write "LOCAL file2" in /tmp/file2.
           write "REMOTE file3" in /mnt/tmp/file3
           write "LOCAL file3" in /tmp/file3

           cd /tmp
           read /mnt/tmp/a_sym_ln1, expect "REMOTE file1"
           read /mnt/tmp/a_sym_ln2, expect "LOCAL file2"
           read /mnt/tmp/a_sym_ln3, expect "LOCAL file3"



       HP Internal Use Only          - 253 -                        2/11/88







       NFS System Test Plan                                  Symbolic Links



           read /tmp/a_sym_ln_loc, expect "REMOTE file1"

           cd /mnt/tmp
           read a_sym_ln1, expect "REMOTE file1"
           read a_sym_ln2, expect "LOCAL file2"
           read a_sym_ln3, expect "REMOTE file3"
           read /tmp/a_sym_ln_loc, expect "REMOTE file1"

           write "REMOTE file1 through symlink" in a_sym_ln1
           write "LOCAL file2 through symlink in a_sym_ln2
           write "REMOTE file3 through symlink" in a_sym_ln3
           cd /tmp
           read /mnt/tmp/file1, expect "REMOTE file1 through symlink"
           read /tmp/file2, expect "LOCAL file2 through symlink"
           read /mnt/tmp/file3, expect "REMOTE file3 through symlink"

           rm /tmp/file* /mnt/tmp/file* /tmp/a_sym_ln* /mnt/tmp/a_sym_ln*


       IMPLEMENT TIME:  1.0  md
       PERFORM TIME:    0.5  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT: See above






       IMPLEMENT TIME:  0.5  md
       PERFORM TIME:    0.2  md
       TYPE OF TEST: functional
       EXPECTED OUTPUT:
       See the "# RESULT" lines in the script




















       HP Internal Use Only          - 254 -                        2/11/88







       NFS System Test Plan                                       Usability



       30.  NNNNFFFFSSSS IIIInnnnffffoooorrrrmmmmaaaallll UUUUssssaaaabbbbiiiilllliiiittttyyyy TTTTeeeesssstttt PPPPllllaaaannnn aaaannnndddd RRRReeeessssuuuullllttttssss


       Chuck  Morse  of  CND  Quality/Manufacturing  plans  on  doing   the
       usability testing during the last complete week of March and writing
       up the conclusions during the first part of April.

       Carole Crall (CND Marketing) will  be  writing  the  troubleshooting
       chapter  of  the NFS documentation, the first draft of which will be
       available March 6.  The NFS project life  cycle  [4]  contains  more
       complete information about the NFS documentation.











































       HP Internal Use Only          - 255 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       31.  YYYYeeeelllllllloooowwww PPPPaaaaggggeeeessss FFFFuuuunnnnccccttttiiiioooonnnnaaaalllliiiittttyyyy TTTTeeeessssttttssss ((((JJJJaaaassssoooonnnn ZZZZiiiioooonnnnssss))))

       The  tests  in  this  chapter  were  designed  to  test  the  normal
       functioning and error-handling capabilities of the Yellow Pages (YP)
       software. Because of their nature, failure-recovery and  destructive
       tests  do  not  fit  into  the  scaffold  environment  well  and are
       discussed elsewhere.

       Test cases are based on the HP reference manual pages.

       RESPONSIBLE ENGINEER: Jason Zions

       31.1  YYYYPPPP CCCCoooommmmmmmmaaaannnnddddssss TTTTeeeessssttttssss

       This section contains test outlines for the YP-specific commands, as
       enumerated  in Appendix 1 of the NFS PRD. The tests are divided into
       two subsections based upon the need for superuser (root) privileges.

       Tests in this  section  for  the  YP  servers,  ypserv,  ypbind  and
       rpc.yppasswdd,  are  limited  to  initiation and run-time arguments.
       Their functionality is more thoroughly exercised in the "YP  Library
       Tests" section (see below).

       PERFORM TIME:    6.0  md



       31.1.1  NNNNoooorrrrmmmmaaaallll uuuusssseeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt)))) tttteeeessssttttssss

       Many of these tests are aimed at ensuring commands or options cannot
       be  used  by  non-superusers.  Most  functional  tests appear in the
       following subsection, "Superuser tests." Commands or functions which
       behave identically for superuser and normal user alike are tested in
       this subsection.



       31.1.1.1  _C_o_m_m_a_n_d__d_o_m_a_i_n_n_a_m_e

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       domainname  ->  correct domain name
       domainname bogus  ->  error: not superuser



       31.1.1.2  _C_o_m_m_a_n_d__y_p_b_i_n_d

       DEPENDENCIES:



       HP Internal Use Only          - 256 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       ISSUES:
       IMPLEMENT TIME:  0.1  md

       /etc/ypbind  ->  error: not superuser



       31.1.1.3  _C_o_m_m_a_n_d__y_p_c_a_t


       Verifying the results of the _y_p_c_a_t command requires  access  to  the
       ASCII  source  on  the master server, and hence requires the masters
       /etc be available to the  test  node  (via  NFS,  presumably).  This
       source file is referred to below as [_p_a_s_s_w_d__s_o_u_r_c_e].

       Since the test  node  need  not  be  bound  to  the  master  server,
       comparing ypcat output to the master source implies the YP system is
       in the steady state, i.e.  all  changes  on  the  master  have  been
       propagated to any slave servers.

       The list of nicknames is compiled into the various  yp  commands.  A
       file  should  exist containing a sorted list of nicknames; this file
       is referred to as [_n_i_c_k_n_a_m_e_s].

       These tests use the diff and sort commands.

       DEPENDENCIES:
       ISSUES: Should the output from makedbm -u on  the  master's  map  be
                 used as [map_source] rather than the ASCII source?
       IMPLEMENT TIME:  0.5  md

       ypcat passwd > passwd; sort passwd > f1  ->  no errors
       sort [passwd_source] | diff f1 -  ->  <empty>
       ypcat passwd.byname | sort | diff f1 -  ->  <empty>
       ypcat passwd.byname | diff passwd -  ->  <empty>
       ypcat -d `domainname` passwd | diff passwd -  ->  <empty>
       ypcat -x | sort | diff [nicknames] -  ->  <empty>
       ypcat  ->  error: usage message (no map specified)
       ypcat bogusmapname  ->  error: no such map
       ypcat passwd.byname passwd.byuid  ->  error: usage message
       ypcat -d bogusdomain passwd  ->  error: no such domain
       ypcat -t passwd  ->  error: no such map
       ypcat -d 12345678901234567890123456789012345678901234567890123456789012345
       passwd ->  error: YP domain name exceeds 64 characters
       ypcat -d -> error: usage message
       ypcat -y -> error: usage message








       HP Internal Use Only          - 257 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       31.1.1.4  _C_o_m_m_a_n_d__y_p_m_a_t_c_h


       The definitions of [_p_a_s_s_w_d__s_o_u_r_c_e] and [_n_i_c_k_n_a_m_e_s] may be  found  in
       the section discussing _y_p_c_a_t (above).

       These tests require the following commands:  whoami  diff  grep  cat
       sort

       DEPENDENCIES:
       ISSUES: The actual source  for  [passwd_source]  is  debatable;  see
                 ypcat.
       IMPLEMENT TIME:  0.25 md

       ypmatch -x | sort | diff [nicknames] -  ->  <empty>
       grep `whoami` [passwd_source] > f1;
           ypmatch passwd `whoami` | diff f1 -  ->  <empty>
       cat f1 f1 > f2;
           ypmatch passwd `whoami` `whoami` | diff f2 -  ->  <empty>
       ypmatch passwd bogususer  ->  error: no such entry
       ypmatch -t passwd root  ->  error: no such map
       ypmatch -d bogusdomain passwd root  ->  error: no such domain

       To increase BFA coverage the following tests have been added:

       ypmatch -> usage message
       ypmatch -k key map -> should work
       ypmatch -d -> usage message
       ypmatch -d domain (where domain is longer than 64 characters) ->
         YP domain name exceeds 64 characters
       ypmatch key map (where map is longer than 64 characters) ->
         mapname exceeds 64 characters



       31.1.1.5  _C_o_m_m_a_n_d__y_p_p_a_s_s_w_d


       NOTE: I'm uncertain as to how to verify that the password has indeed
       been  changed on the master.  The yppasswd daemon need not force the
       map to be remade; even if the map is remade, propagation time of the
       map  from  the  master  to  slave servers is uncertain.  It would be
       possible to read the old master ASCII entry,  change  the  password,
       then  reread the master ASCII entry to see if the encrypted password
       did change.  Is this reasonable?

       I'm also uncertain as to the wisdom  of  embedding  a  test  account
       password in the scripts or in any environment file. Any comments?

       DEPENDENCIES:
       ISSUES:



       HP Internal Use Only          - 258 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       IMPLEMENT TIME:  0.25 md

       yppasswd
           wrongpwd
           newpwd
           newpwd  ->  error: incorrect password
       yppasswd
           rightpwd
           pwd1
           pwd2  ->  error: new passwords don't match
       yppasswd `whoami`
           rightpwd
           rightpwd
           rightpwd  ->  <empty>
       yppasswd root  ->  error: not owner (Check before pwd prompts?)
       yppasswd bogususer  ->  error: no such user (Check first?)

       The following tests have been added to increase BFA coverage:

       yppasswd as root
       yppasswd user without changing the password
       yppasswd and give it a bad password
       yppasswd for a user without a password and type short password
       yppasswd and use the following passwords:
             . password without non-numeric characters
             . password with a-z, A-Z and 0-9



       31.1.1.6  _C_o_m_m_a_n_d__y_p_w_h_i_c_h


       The file [_m_a_p-_h_o_s_t__l_i_s_t] contains a list of available maps  and  the
       corresponding  host  names  of  the master servers, in the format of
       output from "ypwhich -m".

       These tests use the following commands: ypget sort diff

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.25 md

       ypget ypservers `ypwhich`  ->  <blank line?>
       ypwhich > f1; ypwhich `hostname` | diff - f1  ->  <empty>
       ypwhich -m | sort | diff -m [map-host_list]  ->  <empty>
       ypwhich -x | sort | diff - [nicknames]  ->  <empty>
       ypwhich -d bogusdomain  ->  error: no such domain
       ypwhich -t -m passwd  ->  error: no such map
       ypwhich -m bogusmap  ->  error: no such map
       ypwhich -t -> same result as ypwhich
       ypwhich -m -t -> same result as ypwhich



       HP Internal Use Only          - 259 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       ypwhich -m 12345678901234567890123456789012345678901234567890123456789012345
       -> error: ypwhich:  mapname exceeds 64 characters
       ypwhich -d 12345678901234567890123456789012345678901234567890123456789012345
       -> error: ypwhich:  YP domain name exceeds 64 characters
       ypwhich -d -> error: usage message
       ypwhich host host -> error: usage message
       ypwhich 12345678901234567890123456789012345678901234567890123456789012345
       -> error: ypwhich:  hostname exceeds 64 characters
       ypwhich -V1 -V2 -> error: usage message
       ypwhich host -m -> error: usage message
       ypwhich -y -> error: usage message
       ypwhich <Internet address> -> same result as ypwhich
       ypwhich 15.-1.-1.-1 -> error: ypwhich:  15.-1.-1.-1 was not found in
       /etc/hosts or the YP hosts map
       ypwhich -V2 -> same result as ypwhich
       ypwhich -V1 -> same result as ypwhich
       ypwhich -V3 -> error: usage message
       ypwhich -m passwd -> same result as ypwhich



       31.1.1.7  _C_o_m_m_a_n_d__m_a_k_e_d_b_m


       Although _m_a_k_e_d_b_m is intended to be executable by  root  only  (owner
       root,  permission  500), there is nothing intrinsic to its operation
       requiring superuser powers.  With this in mind, _m_a_k_e_d_b_m  tests  will
       be  run  by  a  normal user, with the goal of reducing the amount of
       work done by superuser (and hence dangerous) tests.

       [_Y_P__l_i_s_t] is a file containing the sorted list of the  five  special
       YP map keys that makedbm will create.

       Commands used: awk grep sort diff chmod cut

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.25 md

       awk -F: '{print $1, $0}' /etc/passwd | sort > f1
           /* Convert /etc/passwd to makedbm input form */
       makedbm -i InPuT -o OuT -d DoM f1 f2  ->  <empty>
       makedbm -u f2 | sort > f3;
           grep -v YP_ f3 | diff - f1  ->  <empty>
       grep YP_ f3 | cut -d' ' -f1 | diff [YP_list]  ->  <empty>
       makedbm bogusfile f4  ->  error: no such file bogusfile
       chmod -w f2.*; makedbm f1 f2  ->  error: permission denied







       HP Internal Use Only          - 260 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       31.1.1.8  _C_o_m_m_a_n_d__r_p_c_._y_p_p_a_s_s_w_d_d


       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       /usr/etc/rpc.yppasswdd /etc/yp/src/passwd  ->  error: not SU
       The following tests have been added to increase BFA coverage:


         1.  rpc.yppasswdd -lc -> usage message

         2.  rpc.yppasswdd -l -> usage message

         3.  rpc.yppasswdd -l log_file -> usage message

         4.  rpc.yppasswdd -v -> usage message

         5.  rpc.yppasswdd passwd_file passwd_file -> usage message

         6.  rpc.yppasswdd /etc/passwd -l logfile: it does start it

         7.  Use pmap_conf with the  "-p"  option  to  call  rpc.yppasswdd,
             program 100009, version 1, procedure 0 (NULL_PROC).



       31.1.1.9  _C_o_m_m_a_n_d__y_p_m_a_k_e


       Actually, there is no _y_p_m_a_k_e command as such, although  there  is  a
       man  page  for  one.   This  command  is actually a makefile used to
       construct and, optionally, distribute new YP maps to slave  servers.
       It  is  run  only  by the superuser on the master server. Some tests
       appear in the superuser test section below;  others  appear  in  the
       "Destructive YP Tests" chapter. None are executable by normal users.



       31.1.1.10  _C_o_m_m_a_n_d__y_p_i_n_i_t


       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       /etc/ypinit -m  ->  error: not SU
       /etc/ypinit -s host  ->  error: not SU





       HP Internal Use Only          - 261 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       31.1.1.11  _C_o_m_m_a_n_d__y_p_p_o_l_l


       Only minimal functional tests  are  performed  here.  More  complete
       tests may be found in the "Destructive YP Tests" chapter.

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.5  md

       This test can be executed only on the master server.  Using "makedbm
       -u",  "ypwhich  -m", and "domainname", construct the expected output
       from the command "yppoll passwd.byname"  and  compare  this  to  the
       actual output.

       yppoll -h bogushost passwd  ->  error: no such host
       yppoll -d bogusdomain passwd  ->  error: no such domain
       yppoll bogusmap  ->  error: no such map
       yppoll -h <master IP address> passwd.byname -> same result as "yppoll
       passwd.byname"
       yppoll -h 12345678901234567890123456789012345678901234567890123456789012345
       -> error: yppoll:  hostname exceeds 64 characters
       yppoll -h -> error: usage message
       yppoll -d -> error: usage message
       yppoll -d 12345678901234567890123456789012345678901234567890123456789012345
       -> error: yppoll:  YP domain name exceeds 64 characters
       yppoll -y -> error: usage message
       yppoll 12345678901234567890123456789012345678901234567890123456789012345
        -> error: yppoll:  mapname exceeds 64 characters
       yppoll bogusmap bogusmap -> error: usage message
       yppoll -h 1.2.3.4.5.6 passwd.byname -> error: yppoll:  1.2.3.4.5.6 was
       not found in /etc/hosts or the YP hosts map



       31.1.1.12  _C_o_m_m_a_n_d__y_p_p_u_s_h


       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       yppush passwd.byname  ->  error: not SU



       31.1.1.13  _C_o_m_m_a_n_d__y_p_s_e_t


       DEPENDENCIES:
       ISSUES: Is this a superuser-only command?



       HP Internal Use Only          - 262 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       IMPLEMENT TIME:  0.1  md

       ypset 254.254.254.254  ->  error: no such host
       ypset  ->  error: usage
       ypset -h bogushost `ypwhich`  ->  error: no such host
       ypset -d bogusdomain `ypwhich`  ->  error: no such domain



       31.1.1.14  _C_o_m_m_a_n_d__y_p_x_f_r


       Commands used: diff sum

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.5  md

       /* On slave server only */
       ypxfr passwd.byname  ->  <empty>
       sum /etc/yp/`domainname`/passwd.byname.* > f1;
           ypxfr -f -h `hostname` passwd.byname  ->  <empty>;
           sum /etc/yp/`domainname`/passwd.byname.* > f2;
           diff f1 f2  ->  <empty>
       ypxfr -h `hostname` passwd.byname  ->  error: map not new
       ypxfr bogusmap  ->  error: no such map
       ypxfr -d bogusdomain passwd.byname  ->  error: no such domain
       ypxfr  ->  error: usage
       ypxfr -h bogushost passwd.byname  ->  error: no such host
       ypxfr -h nonserverhost passwd.byname  ->  error: host not server



       31.1.1.15  _C_o_m_m_a_n_d__y_p_s_e_r_v


       Ensures that _y_p_s_e_r_v cannot be  started  by  a  non-super  user.  The
       important tests appear in the "Destructive YP Tests" chapter.

       To increase BFA coverage execute _y_p_s_e_r_v with the "-l", "-v" and  "-l
       filename".

         1.  ypserv -l

             output: error message

         2.  ypserv -v

             output: starts ypserv (still  connected  to  terminal,  so  it
             should be started on the background)




       HP Internal Use Only          - 263 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



         3.  ypserv -l filename

             output: starts ypserv

         4.  Use pmap_conf with the "-p" option  to  call  ypserv,  program
             100004,  version  1,  procedures  0  through  10  (10 hits the
             default case in ypserv's case statement).

         5.  Use pmap_conf with the "-p" option  to  call  ypserv,  program
             100004,  version  2,  procedures  0  through  12  (12 hits the
             default case in ypserv's case statement).

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       /etc/ypserv  ->  error: not SU





































       HP Internal Use Only          - 264 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       31.1.2  SSSSuuuuppppeeeerrrruuuusssseeeerrrr TTTTeeeessssttttssss


       See the previous subsection for tests which do not require superuser
       privileges.



       31.1.2.1  _C_o_m_m_a_n_d__y_p_b_i_n_d


       Since these tests are run on  a  normally-operating  system,  it  is
       assumed  that  a  copy of /etc/bind is already running. Thus, all we
       test here is that the binder process will not allow multiple  copies
       of itself running.

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       /etc/bind  ->  error: binder already running



       31.1.2.2  _C_o_m_m_a_n_d__r_p_c_._y_p_p_a_s_s_w_d_d


       It is assumed that a copy of rpc.yppasswdd is already running on the
       master  server  for  the  passwd  maps,  and  that the daemon is not
       running on any other host in the domain, server or client.

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       /* On the master server: */
       /usr/etc/rpc.yppasswdd /etc/yp/src/passwd  ->  error: already running
       /* On slave server and client */
       /usr/etc/rpc.yppasswdd /etc/yp/src/passwd  ->  error: not master server



       31.1.2.3  _C_o_m_m_a_n_d__y_p_m_a_k_e


       Because  these  tests  are  nondestructive,  functionality  is  only
       partially  tested  here.   The  remaining tests are described in the
       "Destructive YP Tests" chapter.

       These tests assume the YP system is in steady-state, i.e. the source
       files  from  which  the  master maps are built have not been altered



       HP Internal Use Only          - 265 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       since the last time those master maps were made.

       Commands used: sort grep diff makedbm make

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.5  md

       /* On master server only */
       cd /usr/etc/yp;
           makedbm -u /etc/yp/`domainname`/passwd.byname
                 | sort | grep -v YP_ > f1;
           make passwd.byname NOPUSH=1;
           makedbm -u /etc/yp/`domainname`/passwd.byname
                 | sort | grep -v YP_ > f2;
           diff f1 f2  ->  <empty>
       cd /usr/etc/yp; make passwd.byname  ->  <empty>
       cd /usr/etc/yp; make passwd.byname DOM=bogus  ->  error: no such directory
       cd /usr/etc/yp; make passwd.byname DIR=/bogus  ->  error: no such directory



       31.1.2.4  _C_o_m_m_a_n_d__y_p_p_u_s_h


       Since tests in this section are non-destructive, functional tests of
       _y_p_p_u_s_h  can  be  found  in the "Destructive YP Tests" chapter. These
       tests merely check for normal operation and error handling.

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.25 md

       /usr/etc/yp/yppush passwd.byname  ->  <empty>

       /* Using "ypcat ypservers", construct the expected output of
          "yppush -v" and sort it */
       ypcat ypservers | awk -f magic.awk | sort > f1;
           yppush -v passwd.byname | sort > f2;
           diff f1 f2  ->  <empty>
       yppush -d bogusdomain passwd.byname  ->  error: no such domain
       yppush  ->  error: usage



       31.1.2.5  _C_o_m_m_a_n_d__y_p_s_e_t


       Only normal operation is tested here; full functional testing can be
       found in the "Destructive YP Tests" chapter.




       HP Internal Use Only          - 266 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       ypset `ypwhich`  ->  <empty>



       31.1.2.6  _C_o_m_m_a_n_d__y_p_s_e_r_v


       The discussion under the _y_p_b_i_n_d  command  (above)  applies  here  as
       well.

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       /* On a master or slave server node */
       /usr/etc/ypserv  ->  error: already running


































       HP Internal Use Only          - 267 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       31.2  YYYYPPPP LLLLiiiibbbbrrrraaaarrrryyyy TTTTeeeessssttttssss



       This section contains test outlines for the YP library routines,  as
       enumerated in Appendix 1 of the NFS PRD.  Although support for these
       routines is a non-objective (PRD, section 1.8), commands provided by
       HP  (e.g.  login, ps) use them.  Testing of those commands should be
       considerably simplified by thoroughly testing the YP access routines
       they use.

       In addition, the routines,  although  unsupported,  are  documented;
       some  customers  will  likely  use them. Some cursory testing of the
       entry points not used by HP-provided software should be performed in
       the interests of increased customer satisfaction.

       Finally, proper testing of the ypbind and ypserv daemons can only be
       done through the use of these routines. These tests, besides testing
       the routines, also exercise the relevant daemons.

       There are many routines that  use  these  YP  functions.   Some  are
       supplied  by ISO, who has assumed testing responsibilities for their
       YP functionality.  Others are being written here, and tests for them
       are described below.  We expect to eventually port any tests used by
       ISO to our test environment  to  allow  centralized  testing  of  YP
       functionality.


       31.2.1  YYYYPPPP lllliiiibbbbrrrraaaarrrryyyy rrrroooouuuuttttiiiinnnneeeessss

       PERFORM TIME:    4.0  md



       31.2.1.1  _S_u_b_r_o_u_t_i_n_e__y_p___b_i_n_d_(_)


       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.25 md

       yp_bind(good_domain) returns 0
       yp_bind((char *)NULL) returns YPERR_BADARGS
       yp_bind(65_byte_name) returns YPERR_BADARGS
       yp_bind("") returns YPERR_BADARGS
       yp_bind("bogusdomain") returns YPERR_DOMAIN








       HP Internal Use Only          - 268 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       31.2.1.2  _S_u_b_r_o_u_t_i_n_e__y_p___u_n_b_i_n_d_(_)


       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       yp_bind(good_domain) returns 0 /* set up for valid unbind */
       yp_unbind(good_domain) returns 0
       yp_unbind(good_domain) returns ???????
       yp_unbind(65_byte_name) returns YPERR_BADARGS
       yp_unbind((char *)NULL) returns YPERR_BADARGS
       yp_unbind("") returns YPERR_BADARGS
       yp_unbind("bogusdomain") returns ???????



       31.2.1.3  _S_u_b_r_o_u_t_i_n_e__y_p___g_e_t___d_e_f_a_u_l_t___d_o_m_a_i_n_(_)


       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.25 md

       char *buf1;

       yp_get_default_domain(&buf1) returns 0, buf1 points to a
                                    valid domainname
       yp_bind(buf1) returns 0 /* make sure you can bind with it */
       yp_get_default_domain((char **)NULL) returns YPERR_BADARGS



       31.2.1.4  _S_u_b_r_o_u_t_i_n_e__y_p___m_a_t_c_h_(_)


       This test, and tests that follow, may depend  on  the  existence  of
       certain  entries  in  certain  YP maps, or the absence thereof. Keys
       like usernames and hostnames  are  obtained  from  the  environment.
       Known  bad  keys  will  usually have the prefix "bogus". The default
       domain name is assumed to be valid, and  it  is  assumed  that  this
       default  is accessible, either through yp_get_default_domain or some
       other mechanism.

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.25 md

       char *val;  int vallen;

       yp_match(domain, "passwd.byname", username, usernamelen,



       HP Internal Use Only          - 269 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



                &val, &vallen) returns 0; ensure username matches val.
       yp_match("bogusdomain", ....) returns YPERR_DOMAIN
       yp_match((char *)NULL, ...) returns YPERR_BADARGS
       yp_match(domain, "bogusmap", ...) returns YPERR_MAP
       yp_match(domain, (char *)NULL, ...) returns YPERR_BADARGS
       yp_match(domain, map, "bogususer", 9, ...) returns YPERR_KEY
       yp_match(domain, map, (char *)NULL, 0, ...) returns YPERR_BADARGS
       yp_match(domain, map, "", 0, ...) returns YPERR_KEY
       yp_match(domain, map, user, -1, ...) returns YPERR_BADARGS
       yp_match(domain, map, 65_byte_name, 65, ...) returns YPERR_BADARGS
       yp_match(domain, map, user, userlen, (char **)NULL, ...)
                 returns YPERR_BADARGS
       yp_match(domain, map, user, userlen, &val, (int *)NULL)
                 returns YPERR_BADARGS



       31.2.1.5  _S_u_b_r_o_u_t_i_n_e_s__y_p___f_i_r_s_t_(_)_,__y_p___n_e_x_t_(_)_,__y_p___a_l_l_(_)


       The results of using yp_first() and yp_next() are  compared  against
       those  obtained  by  yp_all(). If there's a discrepancy, the results
       need to be checked against the results of makedbm -u on the  servers
       database.

       This test assumes the YP system is in steady state, i.e. servers are
       not failing, maps are not changing, server bindings remain the same.

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.5  md

        1.  Use yp_first() and yp_next() to extract all the entries in  the
            passwd.byname map. Save the results in file f1.
        2.  Use yp_all() to obtain all the  entries  in  the  passwd.byname
            map. Save the results in file f2.
        3.  Sort  f1  and  f2  and  diff  them;  fail  if  there  are   any
            differences.
        4.  Use yp_all() again, this time saving the results in file f3.
        5.  Diff the uuuunnnnssssoooorrrrtttteeeedddd f2 and f3; fail if there are any differences.
        6.  Call the routines with various combinations  of  bad  arguments
            and  ensure  the correct error codes are returned.  Some of the
            bad arguments should be a NULL map, a NULL domain, a NULL inkey
            and a domainname that is longer than YPMAXDOMAIN (which is 64).
        7.  Verify correct operation of the various features of the _f_o_r_e_a_c_h
            argument to yp_all().








       HP Internal Use Only          - 270 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       31.2.1.6  _S_u_b_r_o_u_t_i_n_e__y_p___o_r_d_e_r_(_)


       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.25 md

       int order;

       yp_order(domain, map, &order) returns 0; verify order is  reasonable
       by  running  makedbm  -u  remotely  on server, i.e.  remsh `ypwhich`
       "makedbm -u map | grep YP_ORDER" should yield the same number.

       yp_order(baddomain, ...) returns YPERR_DOMAIN
       yp_order((char *)NULL, ...) returns YPERR_BADARGS
       etc.



       31.2.1.7  _S_u_b_r_o_u_t_i_n_e__y_p___m_a_s_t_e_r_(_)


       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.1  md

       char *master;

       yp_master(good_domain,  "ypservers",  &master)  returns  0;   verify
       master is reasonable by running makedbm -u remotely on server, i.e.
                remsh `ypwhich` "makedbm -u map | grep YP_MASTER"
       should yield the same host name.

       Verify various combinations of  bad  or  invalid  arguments;  should
       produce  the  correct  error  return  values.   Some  of the invalid
       arguments are a NULL domain name and a NULL map name.



       31.2.2  GGGGeeeetttt**** rrrroooouuuuttttiiiinnnneeeessss uuuusssseeeedddd bbbbyyyy tttthhhheeee AAAARRRRPPPPAAAA////BBBBeeeerrrrkkkkeeeelllleeeeyyyy  ccccoooommmmmmmmaaaannnnddddssss  ((((CCCCrrrriiiissssttttiiiinnnnaaaa
       MMMMaaaahhhhoooonnnn))))

       The routines mentioned above are:

                 gethostent
                 gethostbyname
                 gethostbyaddr
                 getservent
                 getservbyname
                 getservport
                 getnetent



       HP Internal Use Only          - 271 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



                 getnetbyaddr
                 getnetbyname
                 getprotoent
                 getprotobynumber
                 getprotobyname

       This testplan does not intend to verify the  full  functionality  of
       these  routines.   For  that  there are already tests that the group
       SMELTER will run on the modified versions of those routines  without
       the Yellow Pages running. The only additional tests necessary are to
       run the existing tests with the files /etc/services,  /etc/networks,
       /etc/protocols  and /etc/hosts as Yellow Pages databases.  To insure
       that the routines are reading the information from the correct place
       the files themselves should be removed from the system.
       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.0  md
       PERFORM TIME:    0.5  md



       31.2.3  YYYYppppsssseeeetttt tttteeeessssttttssss

       These tests  produce  usage  messages.   They  have  been  added  to
       increase BFA coverage.

       ypset -h
       ypset with host name longer than 256 characters
       ypset -h hostname longer than 256 characters hostname
       ypset -d domainname longer than 64 characters
       ypset hostname hostname
       ypset -V3 hostname
       ypset 1.2.3.4.5.6
       ypset when YP not running



       31.2.4  YYYYppppxxxxffffrrrr tttteeeessssttttssss

       These tests  produce  usage  messages.   They  have  been  added  to
       increase BFA coverage.

       Ran ypxfr when domainname not set.
       ypxfr -h master map (where master longer than 64 characters)
       ypxfr -h
       ypxfr -d domainname map (where domainname longer than 64 characters)
       ypxfr -d
       ypxfr -C
       ypxfr -y map (where -y is an option that doesn't exist)
       ypxfr mapname (where mapname is greater than 64 characters)
       ypxfr -h server when ypserv not running



       HP Internal Use Only          - 272 -                        2/11/88







       NFS System Test Plan                                    Yellow Pages



       ypxfr map map
       ypxfr -h bogusname map
       ypxfr -h 1.2.3.4.5.6 map



       31.2.5  YYYYppppppppuuuusssshhhh tttteeeessssttttssss

       These tests  produce  usage  messages.   They  have  been  added  to
       increase BFA coverage.

       yppush -d domainname (where domainname is greater than 64 characters)
       yppush -d
       yppush -y (where y is an unknown option)
       yppush map map







































       HP Internal Use Only          - 273 -                        2/11/88







       NFS System Test Plan                          YP Destructive Testing



       32.  YYYYPPPP DDDDeeeessssttttrrrruuuuccccttttiiiivvvveeee TTTTeeeessssttttssss ((((JJJJaaaassssoooonnnn ZZZZiiiioooonnnnssss))))



       RESPONSIBLE ENGINEER: Jason Zions
       DEPENDENCIES: Many tests require  A/B  networking  services  (mostly
                     remsh).
       PERFORM TIME:    6.0  md



       32.1  DDDDeeeessssccccrrrriiiippppttttiiiioooonnnn



       This chapter contains Yellow Pages (YP) tests  which  either  modify
       the global YP database or compromise local or global YP behavior. In
       particular, several tests kill servers on other hosts.

       For this reason, the destructive tests can only be run on  one  host
       in  a  YP  domain,  and  no  other  YP  activity can be taking place
       elsewhere in the domain, while the tests are running.

       The tests expect to be running in a three-node configuration:

                                   +----------+
                            -------|          |-------
                           /       |  CLIENT  |       \
                          /  ----->|__________|<-----  \
                         /  /                        \  \
                        /  /                          \  \
                       V  /                            \  V
                   +----------+                    +----------+
                   |          |------------------->|          |
                   |  MASTER  |                    |  SLAVE   |
                   |__________|<-------------------|__________|

       MASTER is the master YP server for all maps in the domain.
       SLAVE is a slave YP server for the domain.
       CLIENT is a non-serving host.

       The tests do not require any host be served  by  any  particular  YP
       server. In particular, it is not required that MASTER or SLAVE serve
       themselves.

       Unless otherwise specified, each of the tests defined  below  should
       be executed on each of the three hosts in turn.







       HP Internal Use Only          - 274 -                        2/11/88







       NFS System Test Plan                          YP Destructive Testing



       32.2  NNNNoooorrrrmmmmaaaallll uuuusssseeeerrrr ((((nnnnoooonnnn----rrrrooooooootttt)))) tttteeeessssttttssss



       These tests are designed to ensure proper functioning of YP commands
       runnable  by  normal  users  which  alter  any  YP  databases. Other
       functional tests can be found in the "Yellow Pages Tests" chapter.



       32.2.1  CCCCoooommmmmmmmaaaannnndddd yyyyppppppppaaaasssssssswwwwdddd


       The test assumes rpc.yppasswdd is running on the  master  YP  server
       for  the  passwd.*  maps, and that the daemon forces a ypmake on the
       maps.  It does not depend  on  that  process  performing  a  yppush,
       however;  it directly examines the map on the master.  The test user
       must have an entry in the YP password maps.

       The file mmmmaaaaggggiiiicccc....aaaawwwwkkkk is an awk  script  which  compares  the  password
       fields  of  two  /etc/passwd entries and returns an error message if
       they are identical.

       Commands required: grep cat awk remsh/rsh whoami makedbm

       DEPENDENCIES: Requires remsh (or rsh on SUNs).
       ISSUES:
       IMPLEMENT TIME:  0.5  md

       MST=`ypwhich -m yppasswd.byname`;
           remsh $MST "makedbm -u passwd.byname | grep `whoami`" > f1
       yppasswd
           rightpwd
           newpwd
           newpwd  ->  <empty>
       sleep /* until master has remade passwd.* maps. */
       remsh $MST "makedbm -u passwd.byname | grep `whoami`" > f2
       cat f1 f2 | awk -f magic.awk  ->  <empty>
       yppasswd       /* Restore old password */
           newpwd
           rightpwd
           rightpwd  ->  <empty>












       HP Internal Use Only          - 275 -                        2/11/88







       NFS System Test Plan                          YP Destructive Testing



       32.3  SSSSuuuuppppeeeerrrruuuusssseeeerrrr TTTTeeeessssttttssss



       Tests in this section include:

       1. Server installation (ypinit).
       2. Initialization and update of YP maps (ypmake).
       3. YP map propagation (yppush, ypxfr).
       4. YP configuration (ypset).
       5. Proper behavior of the YP software under  various  failure  modes
          (failure of ypserv, ypbind).



       32.3.1  SSSSeeeerrrrvvvveeeerrrr iiiinnnnssssttttaaaallllllllaaaattttiiiioooonnnn


       Installation of YP on a host involves destruction of any current  YP
       maps  stored  there,  followed by creation of new maps from existing
       source data (in the case of a new Master server) or  from  other  YP
       servers (in the case of a new Slave server).

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.5  md


       ON MASTER: Run ypinit -m, answer 'y' to all questions. Add SLAVE  to
       the  list  of servers. After the database has been built, unload all
       maps with makedbm -u and compare to the  ASCII  sources.  Make  sure
       YP_MASTER_NAME corresponds to MASTER, and make sure YP_LAST_MODIFIED
       is in the very recent past.

       ON SLAVE: Run ypinit -s MASTER. When the database have  been  built,
       unload  all maps with makedbm -u, and compare to the ASCII source on
       MASTER. As in the MASTER case  above,  validate  YP_MASTER_NAME  and
       YP_LAST_MODIFIED.



       32.3.2  YYYYPPPP mmmmaaaapppp uuuuppppddddaaaatttteeee


       This test need only be run on the slave server.

       The file mmmmaaaaggggiiiicccc....aaaawwwwkkkk is an awk  script  which  compares  two  sets  of
       _y_p_p_o_l_l output. It displays an error message if the order numbers are
       not strictly increasing (i.e. second yppoll reflects a newer map) or
       if the master server has changed.




       HP Internal Use Only          - 276 -                        2/11/88







       NFS System Test Plan                          YP Destructive Testing



       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.3  md

       yppoll -h SLAVE passwd.byname > f1;
           remsh MASTER "cd /etc/yp;make passwd NOPUSH=1" > /dev/null
           yppoll -h SLAVE passwd.byname > f2;
           diff f1 f2  ->  <empty>
       yppoll -h SLAVE passwd.byname > f3;
           remsh MASTER "cd /etc/yp;make passwd" > /dev/null
           yppoll -h SLAVE passwd.byname > f4;
           cat f3 f4 | awk -f magic.awk  ->  <empty>



       32.3.3  YYYYPPPP mmmmaaaapppp pppprrrrooooppppaaaaggggaaaattttiiiioooonnnn


       The file mmmmaaaaggggiiiicccc....aaaawwwwkkkk is an awk  script  which  compares  two  sets  of
       _y_p_p_o_l_l output. It displays an error message if the order numbers are
       not strictly increasing (i.e. second yppoll reflects a newer map) or
       if the master server has changed.

       The file [_e_x_p_e_c_t_e_d__o_u_t] contains the expected output from the yppush
       or ypxfr commands, depending on the test (see below).

       DEPENDENCIES: Requires remsh/rsh
       ISSUES:
       IMPLEMENT TIME:  0.3  md

       ON MASTER:
       yppoll -h SLAVE > f1;
           cd /etc/yp;make passwd NOPUSH=1;
           yppush passwd > o1;
           yppoll -h SLAVE > f2;
           cat f1 f2 | awk -f magic.awk  ->  <empty>
       yppoll -h MASTER > f3; diff f2 f3  ->  <empty>
       diff o1 [expected_out]  ->  <empty>

       ON SLAVE:
       yppoll -h SLAVE > f1;
           remsh MASTER "cd /etc/yp;make passwd NOPUSH=1";
           ypxfr passwd.byname > o1;
           yppoll -h SLAVE > f2;
           cat f1 f2 | awk -f magic.awk  ->  <empty>
       yppoll -h MASTER > f3; diff f2 f3  ->  <empty>
       diff o1 [expected_out]  ->  <empty>
       ls -l /etc/yp/`domainname`/passwd.byname.* > f4;
           ypxfr -f passwd.byname > o2;
           ls -l /etc/yp/`domainname`/passwd.byname.* > f5;
           cat f4 f5 | awk -f newer.awk  ->  <empty>;



       HP Internal Use Only          - 277 -                        2/11/88







       NFS System Test Plan                          YP Destructive Testing



       diff o2 [expected_out]  ->  <empty>



       32.3.4  YYYYPPPP ccccoooonnnnffffiiiigggguuuurrrraaaattttiiiioooonnnn


       This test may be failure-prone due to the anomaly described  on  the
       ypset  man page, i.e. "ypset host1" followed by "ypwhich" may return
       "host2" if host2 is less loaded than host1. This  should  not  be  a
       problem if the hosts involved in the test are relatively unloaded.

       The file mmmmaaaaggggiiiicccc....aaaawwwwkkkk is an awk  script  which  compares  two  sets  of
       _y_p_p_o_l_l output. It displays an error message if the order numbers are
       not strictly increasing (i.e. second yppoll reflects a newer map) or
       if the master server has changed.

       DEPENDENCIES:
       ISSUES:
       IMPLEMENT TIME:  0.25 md

       serv=`ypwhich`; case $serv
         MASTER: ypset SLAVE;
                   if [ `ypwhich` = MASTER ] echo Failed
                   exit
         SLAVE:  ypset MASTER;
                   if [ `ypwhich` = SLAVE ] echo Failed
                   exit
       esac  ->  <empty>

       remsh MASTER "cd /etc/yp;make passwd NOPUSH=1";
           ypset MASTER; yppoll passwd.byname > f1;
           ypset SLAVE; yppoll passwd.byname > f2;
           cat f2 f1 | awk -f magic.awk  ->  <empty>

       ypset bogushost;
           ypwhich | grep -v MASTER | grep -v SLAVE  ->  <empty>



       32.3.5  FFFFaaaaiiiilllluuuurrrreeee rrrreeeeccccoooovvvveeeerrrryyyy


       KKKKIIIILLLLLLLL is a shell script which does a kill  on  the  specified  server
       daemon.  It  can  be  run  remotely,  and it accepts the same signal
       arguments as the _k_i_l_l command.

       DEPENDENCIES: Requires remsh/rsh
       ISSUES:
       IMPLEMENT TIME:  1.0  md




       HP Internal Use Only          - 278 -                        2/11/88







       NFS System Test Plan                          YP Destructive Testing



       KILL ypbind;
           ypwhich  ->  Cannot bind: no bind daemon
           /etc/ypbind  ->  <empty>
           ypwhich  ->  Cannot bind: domain unbound
           ypwhich | grep -v MASTER | grep -v SLAVE  ->  <empty>

       ypset SLAVE; ypwhich  ->  SLAVE
           remsh SLAVE KILL ypserv;
           ypwhich  ->  MASTER
           remsh SLAVE /etc/yp/ypserv /* restart server */
           remsh MASTER KILL ypserv;
           ypwhich  ->  SLAVE
           remsh MASTER /etc/yp/ypserv /* restart server */

       remsh MASTER KILL rpc.passwdd;
           yppasswd  ->  error: no daemon
           remsh MASTER /usr/etc/rpc.passwdd /* restart */


       KILL ypbind;
       Test all YP commands for correct detection of missing  bind  daemon.
       Reestablish ypbind daemon.

       remsh SLAVE KILL ypserv; remsh MASTER KILL ypserv;
       Test all YP commands for correct behavior and detection. Reestablish
       server daemons.

       To increase BFA coverage:

         1.  Bring portmap down, execute a YP command that requires  ypbind
             to  be  contacted  (e.g. ypwhich or ypcat), then bring portmap
             back up.  This requires that inetd, ypbind and ypserv be  also
             killed  and  brought  back  up.   Ypbind and ypserv have to be
             killed before portmap so they don't timeout trying to  contact
             portmap.

         2.  Start ypserv with logging enabled and make a  YP  call  for  a
             domain that is not supported.  To make the YP call we can do:
             ypset -d NOT_SUPP `hostname`
             ypcat -d NOT_SUPP passwd

         3.  Start ypserv when portmap is down.



       32.3.6  YYYYppppsssseeeetttt tttteeeessssttttssss

       These tests have been added to increase BFA coverage.
       ypset <Internet Address>
       ypset -V1 hostname




       HP Internal Use Only          - 279 -                        2/11/88







       NFS System Test Plan                          YP Destructive Testing



       32.3.7  YYYYppppxxxxffffrrrr tttteeeessssttttssss

       These tests have been added to increase BFA coverage.

         1.  ypxfr -h <Internet address> map

         2.  Create a logfile that ypxfr can't access.  Since ypxfr runs as
             root create the log file on a directory mounted over NFS.

         3.  Create a non-standard map on a short filename  filesystem  and
             try   to  transfer  it  to  a  system  with  a  long  filename
             filesystem.

         4.  Transfer a map that has a .dir file but no .pag file.

         5.  Make /usr/etc/yp/domain an NFS mounted filesystem that is  not
             writable by other.

         6.  Use a standard file as a .dir and .pag files for a YP map.  In
             other words, use non-dbm files for the .pag and .dir files.




       32.3.8  YYYYppppbbbbiiiinnnndddd tttteeeessssttttssss

       These tests have been added to increase BFA coverage.
       Change ypbind permissions; execute ypbind as non-superuser.
       ypbind -l filename
       ypbind -v &
       ypbind -y (-y is an unkown option)
       ypbind when portmap is down.
       Kill ypserv we are bound to:
            ypbind: server not responding
       Bring ypserv back up:
            ypbind: server OK



       32.3.9  YYYYppppppppuuuusssshhhh tttteeeessssttttssss

       These tests have been added to increase BFA coverage.
       yppush -d domain
       Add bogus host to ypservers list and do yppush.










       HP Internal Use Only          - 280 -                        2/11/88







       NFS System Test Plan                                      References



       33.  RRRReeeeffffeeeerrrreeeennnncccceeeessss


       1. Simula, Dan (hpfcla!hpcnoe!d_simula),
          _P_R_O_D_U_C_T _R_E_Q_U_I_R_E_M_E_N_T_S _D_O_C_U_M_E_N_T _S_3_0_0/_S_8_0_0 _N_F_S _P_R_O_J_E_C_T,
          HP Internal Document, 11 Jan 1987

       2. Bartz, Thomas G. (hpfcla!hpcnoe!t_bartz),
          _C_N_D _S_e_c_t_i_o_n _1 _S_c_a_f_f_o_l_d _g_u_i_d_e_l_i_n_e_s _a_n_d _R_e_q_u_i_r_e_m_e_n_t_s,
          HP Internal Document, 6 Jan 1986

       3. Freidel, Dennis (hpfcla!hpcnoe!d_freidel),
          _R_F_A _B_l_a_c_k _B_o_x _T_e_s_t _P_l_a_n,
          HP Internal Document, 8 June 1985

       4. Mowson, Bill (hpfcla!hpcnoe!b_mowson),
          _N_F_S _S_e_r_i_e_s _3_x_0 _P_r_o_j_e_c_t _L_i_f_e _C_y_c_l_e,
          HP Internal Document, February 1987

       5. Simula, Dan (hpfcla!hpcnoe!d_simula)
          _N_F_S - _H_P-_U_X _D_i_s_k_l_e_s_s : _I_n_t_e_r_a_c_t_i_o_n_s _a_n_d _T_e_s_t_i_n_g _S_c_e_n_a_r_i_o_s,
          HP Internal Document, 4 February 1987
































       HP Internal Use Only          - 281 -                        2/11/88







       NFS System Test Plan                                      Appendix 1

























































       HP Internal Use Only          - 282 -                        2/11/88







       NFS System Test Plan                                      Appendix 1



       35.  AAAAllllpppphhhhaaaa////BBBBeeeettttaaaa----SSSSiiiitttteeee PPPPrrrreeeetttteeeessssttttiiiinnnngggg ((((SSSStttteeeevvvveeee BBBBooooooootttthhhh))))


       RESPONSIBLE ENGINEER: Steve Booth

       The state of the NFS code must  be  well-known  for  each  of  three
       planned  pre-releases, one in late March or early April, a second in
       late May or early June, and a possible third  pre-release  in  July.
       This  chapter outlines the steps that will be taken to determine the
       state of the code for each pre-release.

       Should the testing determine that the code is not ready for release,
       a short summary document will be written explaining what needs to be
       done to make the code  ready  for  release.   Each  beta  site  will
       receive  a  summary  document listing known deficiencies in the beta
       code.

       This chapter will not define additional tests for the  scaffold;  it
       will use those NFS scaffold tests which exist when beta-site testing
       commences.

       The summary document (above) will indicate whether  the  number  and
       content  of  tests  was sufficient to determine the readiness of the
       code.

       Defect weighting is as defined by the Defect Tracking  System  (DTS)
       program in common use by HP-UX testers.
       PERFORM TIME:    6.0 md
                            (2.0 md per beta release)

       35.1  NNNNFFFFSSSS////333300000000 PPPPrrrreeee----rrrreeeelllleeeeaaaasssseeee SSSSttttrrrraaaatttteeeeggggyyyy


       What follows is the current plan for early release of the  code  for
       beta sites and Business Opportunities (B.O.'s):

       Key people in this area are Carole Crall (CND  Tech  Support),  Andy
       Drol (CND Marketing), and Jeff Lindberg (NerFS project manager).

       CND R&D and  Marketing  have  agreed to support  three (3) customers
       receiving   pre-releases   of  the  NFS/300  product.   This  is the
       combined total of beta sites and  B.O.'s.  It is  uncertain  whether
       there will be 1 or 2 beta  sites.  Alpha  sites  (internal  HP users
       not directly   involved  in  the  NFS  project)  are  being  handled
       separately, and are not included in this number.

       Some of the  accounts  identified  by Les   Walker's   team  in  FSD
       marketing  as  potential   NFS  early  release  sites may qualify as
       full  fledged  beta  sites.  The  level  of   commitment   from  the
       field,  multi-vendor  configurations,  and expected usage of NFS are
       the key criteria used to select beta  sites.   Other   accounts  may



       HP Internal Use Only          - 283 -                        2/11/88







       NFS System Test Plan                                      Appendix 1



       fall  into  the   category  of  B.O.'s,   which  are  general  early
       releases given to customers for HP  business   reasons,   without  a
       formal  beta  site   agreement.   The time-line for selecting  these
       sites and for early shipments is listed later.

       For beta sites, the account SE will be the first line of support for
       responding  to  problems  and   questions.   The SE will rely on CND
       Tech  Support  (Carole)  for the  next  level  of  support, followed
       by  the NerFS R&D project  group. The support  mechanism  for B.O.'s
       has not been resolved, but should follow the same  strategy  as  the
       beta sites as much as possible.

       The  first  beta/B.O.  release  will piggyback on the  system  built
       in  the  second   300/6.0  SSIT cycle.  Second draft manuals will be
       included with this release.


       35.1.1  AAAAllllpppphhhhaaaa SSSSiiiitttteeeessss   Early  releases will be provided to  three  HP
       internal alpha sites:  HP Labs at Palo Alto, HP Labs at Bristol, and
       Salt Lake  Operation.  These alpha sites will be  supported  through
       the  NerFS R&D project group.  The system built in the first 300/6.0
       SSIT cycle will be the first alpha release.


       35.1.2  OOOOtttthhhheeeerrrr  PPPPrrrreeee----RRRReeeelllleeeeaaaasssseeeessss     It  may  be  necessary  to   provide
       additional  early  releases,  near  the  end of the project, to high
       priority  customers.  The output of later SSIT cycles and the latest
       draft of the manuals will be used for  these  shipments.

       There is no time budgeted for supporting these early releases before
       the final release to SSIT.

      '.el.rr ;D ;E































        
       PROPOSED TIME-LINE

       2/9     Les     New prioritized list of accounts based on latest
                       data; include their level of need for NFS,
                       potential sales.

       2/13    Carole  Get information from the hot accounts regarding
                       configuration information, potential NFS usage.

       2/17    Team    Decide on beta and B.O. sites.

       2/13    Carole  Beta support plan complete.

       2/18    Carole  Distribute beta support plan to field.

       2/13    Andy    Complete proposed beta site legal agreement.

       2/18    Andy    Distribute beta site agreements to field.

       March   Lab     Distribute first alpha site release (HP internal).

       April   Andy    Conclude beta site agreements with accounts.

       April   Carole  SE training for beta site and B.O. SE's, NMC.
                       [ISSUE:  How many people can attend this class?]

       May     Annette Copies of second draft manuals for beta release.

       May     Lab     Ship beta site release.

       June    Carole  Get early feedback from beta sites.

       July    Lab     Release to final SSIT.

       July    Lab     Possible additional early customer shipments.

       July    Carole  Final feedback from beta sites;
                       write final beta site report.
      '.el.rr ;D ;E


      '.el.rr ;D ;E























        




























































