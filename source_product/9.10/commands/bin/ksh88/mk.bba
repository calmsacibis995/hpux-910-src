# $Revision: 66.2 $ 
# 
#  This makefile was adapted from the "real" ksh makefile for use with BBA.
#  To build a BBA version of ksh:
#
#     make -f mk.bba ksh
#     mv ksh ksh.bba
#
#  Copy this executable to the validation machine, into one of the BAD 
#  directories.  Edit the 'prog' file there.  Change the line that says:
#
#      SHELL=ksh
#
#  to:
#
#      SHELL=`pwd`/ksh.bba
#
#  Next copy all the '*.M' files to the validation machine as well (these are
#  created in the 'sh' and 'shlib' subdirectories.  I don't know exactly where 
#  BBA is expecting them to be, but I link them into the BAD directory as well 
#  as into directories 'sh' and 'shlib' in the BAD directory, and into the 
#  exact location where they were originally created on the build machine (for 
#  example, /users/<whoever>/ksh/Build/sh and /users/<whoever>/ksh/Build/shlib.
#
#  Next, run the validations: 
#
#      ./prog 1>out 2>err
#
#  The run will cause a file in /tmp (called /tmp/ksh.bba according to this
#  vesion of the makefile) to be created.  This is the results file, and it
#  along with all the '*.M' files are needed to generate a report.
#
#  Generate a report with:
#
#      bbarep -S -d /tmp/ksh.bba >report.output
#
#  This will generate a one line summary in the file report.output.
#
#  This process depends on all test scripts being run with the $SHELL variable
#  defined in 'prog'.  This is especially important for vuser scripts since
#  they specify the command to be tested using its full path name.
#
#    This makefile will build the standard HP-UX /bin/ksh as well
#    as the POSIX.2 conformant shell based on the ksh88 source.
#    The following macros have been defined to make the different
#    versions of the shell:
#	PSH		the name of the POSIX.2 executable
#	PSH_FLAGS	the flags to turn on the POSIX features
#	COMMON_OBJS	object files that are the same between
#			ksh and psh
#	KSH_OBJS	Object files unique to ksh (built w/o PSH_FLAGS)
#	PSH_OBJS	Object files unique to psh (buile with PSH_FLAGS)
#	COMMON_LOBJS	Commmon object files used to build the libraries
#	KSH_LOBJS	Object files unique to ksh's library 
#	PSH_LOBJS	Object files unique to psh's library (built with
#			PSH_FLAGS turned on)
#	LIBSH		The library ksh builds with
#	PLIBSH		The library psh builds with  (currently LIBSH)
#

SHLIB = shlib
LIBS = 
Ins = install
Inc = include
Sh = sh
SH = ksh

#  Added for BBA generation.  Also had to change all the CC lines for each
#  .o and the link line for ksh and psh.

BBACMD = -tp,/usr/hp64000/lib/bbacpp
BBAOPT = -DBBA_OPTA -DBBA_OPTO=A
BBAGEN = /usr/hp64000/bin/bbagen


RDONLY = $(Ins)/readonly.ex

#
#    Theses are the macros to make ksh versus psh
#
PSH = psh
PSH_FLAGS = -DPOSIX2 -DKSHELL -DHP_BUILTIN
KSH_FLAGS = -DKSHELL -DHP_BUILTIN

COMMON_OBJS = arith.o blok.o ctype.o defs.o edit.o \
		echo.o error.o expand.o fault.o history.o io.o  \
		jobs.o macro.o name.o service.o \
		string.o stak.o test.o word.o emacs.o vi.o hpux_rel.o 

COMMON_LOBJS =	adjust.o assign.o assnum.o cannon.o chkid.o convert.o \
		findnod.o gettree.o strmatch.o growaray.o gsort.o \
		linknod.o namscan.o rjust.o strdata.o streval.o \
		unassign.o utos.o valup.o optget.o

KSH_OBJS =  args.o   builtin.o   cmd.o   main.o   msg.o   print.o   xec.o
PSH_OBJS =  args-p.o builtin-p.o cmd-p.o main-p.o msg-p.o print-p.o xec-p.o

#    Currently no difference in shlib/*.c
LIBSH = libsh.a
PLIBSH = libsh-p.a
PSH_LOBJS = optget-p.o  tilde-p.o
KSH_LOBJS = optget.o    tilde.o
######################################################

default:	$(SH) suid_exec

$(SH):	$(Inc)/sh_config.h  $(COMMON_OBJS) $(KSH_OBJS) $(LIBSH)
	$(BBAGEN) -d/tmp/ksh.bba -l0 $(COMMON_OBJS) $(KSH_OBJS) \
		$(COMMON_LOBJS) $(KSH_LOBJS)
	$(CC) $(CFLAGS) -o $(SH) $(COMMON_OBJS) $(KSH_OBJS) $(LIBSH) bba.a \
		$(LIBS)
	-( mcs -d $(SH) ) 2> /dev/null

$(PSH):	$(Inc)/sh_config.h $(COMMON_OBJS) $(PSH_OBJS) $(PLIBSH)
	$(BBAGEN) -d/tmp/psh.bba -l0 $(COMMON_OBJS) $(PSH_OBJS) \
		$(COMMON_LOBJS) $(PSH_LOBJS)
	$(CC) $(CFLAGS) -o $(PSH) $(COMMON_OBJS) $(PSH_OBJS) $(PLIBSH) bba.a \
		$(LIBS)

$(RDONLY):
	cp $(Ins)/readonly $(RDONLY)
	chmod 755 $(RDONLY)

arith.o:	$(Sh)/arith.c $(Inc)/streval.h $(Inc)/sh_config.h \
		$(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/arith.c

args.o:	$(Sh)/args.c $(Inc)/builtins.h $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h $(Inc)/defs.h $(Inc)/stak.h \
		$(Inc)/shnodes.h $(Inc)/brkincr.h $(Inc)/name.h \
		$(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/args.c

args-p.o:	$(Sh)/args.c $(Inc)/builtins.h $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h $(Inc)/defs.h $(Inc)/stak.h \
		$(Inc)/shnodes.h $(Inc)/brkincr.h $(Inc)/name.h \
		$(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(PSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/args.c -o args-p.o

blok.o:	$(Sh)/blok.c $(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/blok.c

builtin.o:	$(Sh)/builtin.c $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h $(Inc)/builtins.h $(Inc)/history.h \
		$(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/builtin.c

builtin-p.o:	$(Sh)/builtin.c $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h $(Inc)/builtins.h $(Inc)/history.h \
		$(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h
	$(CC) -v -I$(Inc) $(CFLAGS) $(PSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/builtin.c -o builtin-p.o

cmd.o:	$(Sh)/cmd.c $(Inc)/test.h $(Inc)/builtins.h $(Inc)/history.h \
		$(Inc)/sym.h $(Inc)/defs.h $(Inc)/stak.h \
		$(Inc)/shnodes.h $(Inc)/brkincr.h $(Inc)/name.h \
		$(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/cmd.c

cmd-p.o:	$(Sh)/cmd.c $(Inc)/test.h $(Inc)/builtins.h $(Inc)/history.h \
		$(Inc)/sym.h $(Inc)/defs.h $(Inc)/stak.h \
		$(Inc)/shnodes.h $(Inc)/brkincr.h $(Inc)/name.h \
		$(Inc)/flags.h
	$(CC) -v -I$(Inc) $(CFLAGS) $(PSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/cmd.c -o cmd-p.o

ctype.o:	$(RDONLY) $(Sh)/ctype.c
	$(RDONLY) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		$(Sh)/ctype.c

defs.o:	$(Sh)/defs.c $(Inc)/timeout.h $(Inc)/edit.h $(Inc)/history.h \
		$(Inc)/sym.h $(Inc)/jobs.h $(Inc)/terminal.h \
		$(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/defs.c

edit.o:	$(Sh)/edit.c $(Inc)/edit.h $(Inc)/history.h $(Inc)/sym.h \
		$(Inc)/builtins.h $(Inc)/terminal.h $(Inc)/defs.h \
		$(Inc)/stak.h $(Inc)/shnodes.h $(Inc)/brkincr.h \
		$(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/edit.c

echo.o:	$(Sh)/echo.c $(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/echo.c

error.o:	$(Sh)/error.c $(Inc)/history.h $(Inc)/jobs.h \
		$(Inc)/terminal.h $(Inc)/defs.h $(Inc)/stak.h \
		$(Inc)/shnodes.h $(Inc)/brkincr.h $(Inc)/name.h \
		$(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/error.c

expand.o:	$(Sh)/expand.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/expand.c

fault.o:	$(Sh)/fault.c $(Inc)/timeout.h $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/fault.c

history.o:	$(Sh)/history.c $(Inc)/history.h $(Inc)/builtins.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/history.c

hpux_rel.o:	hpux_rel.c
	$(CC) $(BBAOPT) $(BBACMD) -c hpux_rel.c

io.o:	$(Sh)/io.c $(Inc)/history.h $(Inc)/sym.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/io.c

jobs.o:	$(Sh)/jobs.c $(Inc)/history.h $(Inc)/jobs.h $(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/jobs.c

macro.o:	$(Sh)/macro.c $(Inc)/builtins.h $(Inc)/sym.h $(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/macro.c

main.o:	$(Sh)/main.c $(Inc)/builtins.h $(Inc)/timeout.h \
		$(Inc)/history.h $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/main.c

main-p.o:	$(Sh)/main.c $(Inc)/builtins.h $(Inc)/timeout.h \
		$(Inc)/history.h $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) $(PSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/main.c -o main-p.o

msg.o:	$(RDONLY) $(Sh)/msg.c $(Inc)/history.h $(Inc)/timeout.h $(Inc)/test.h \
		$(Inc)/builtins.h $(Inc)/sym.h
	$(RDONLY) $(CFLAGS) -I$(Inc) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		$(Sh)/msg.c

msg-p.o:	$(RDONLY) $(Sh)/msg.c $(Inc)/history.h $(Inc)/timeout.h \
		$(Inc)/test.h $(Inc)/builtins.h $(Inc)/sym.h
	$(RDONLY) -v $(CFLAGS) -I$(Inc) $(PSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-o msg-p.o $(Sh)/msg.c

name.o:	$(Sh)/name.c $(Inc)/timeout.h $(Inc)/history.h \
		$(Inc)/builtins.h $(Inc)/sym.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/name.c

print.o:	$(Sh)/print.c $(Inc)/builtins.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/print.c

print-p.o:	$(Sh)/print.c $(Inc)/builtins.h
	$(CC) -I$(Inc) $(CFLAGS) $(PSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/print.c -o print-p.o

service.o:	$(Sh)/service.c $(Inc)/history.h $(Inc)/builtins.h \
		$(Inc)/sym.h $(Inc)/jobs.h $(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/service.c

string.o:	$(Sh)/string.c $(Inc)/sym.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/string.c

stak.o:	$(Sh)/stak.c
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/stak.c

test.o:	$(Sh)/test.c $(Inc)/sym.h $(Inc)/test.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/test.c

word.o:	$(Sh)/word.c $(Inc)/test.h $(Inc)/builtins.h $(Inc)/sym.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/word.c

xec.o:	$(Sh)/xec.c $(Inc)/builtins.h $(Inc)/test.h $(Inc)/sym.h \
		$(Inc)/jobs.h $(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/xec.c

xec-p.o:	$(Sh)/xec.c $(Inc)/builtins.h $(Inc)/test.h $(Inc)/sym.h \
		$(Inc)/jobs.h $(Inc)/terminal.h
	$(CC) -v -I$(Inc) $(CFLAGS) $(PSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/xec.c -o xec-p.o

emacs.o:	$(Sh)/emacs.c $(Inc)/edit.h $(Inc)/history.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/emacs.c

vi.o:	$(Sh)/vi.c $(Inc)/terminal.h $(Inc)/edit.h $(Inc)/history.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(Sh)/vi.c

libsh.a:	$(COMMON_LOBJS) $(KSH_LOBJS)
	ar cr libsh.a $(COMMON_LOBJS) $(KSH_LOBJS)

libsh-p.a:	$(COMMON_LOBJS) $(PSH_LOBJS)
	ar cr libsh-p.a $(COMMON_LOBJS) $(PSH_LOBJS)

adjust.o:	$(SHLIB)/adjust.c $(Inc)/name.h $(Inc)/flags.h $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/adjust.c

assign.o:	$(SHLIB)/assign.c $(Inc)/name.h $(Inc)/flags.h $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/assign.c

assnum.o:	$(SHLIB)/assnum.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/assnum.c

cannon.o:	$(SHLIB)/cannon.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/cannon.c

chkid.o:	$(SHLIB)/chkid.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/chkid.c

convert.o:	$(SHLIB)/convert.c
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/convert.c

findnod.o:	$(SHLIB)/findnod.c $(Inc)/name.h $(Inc)/flags.h $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/findnod.c

gettree.o:	$(SHLIB)/gettree.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/gettree.c

strmatch.o:	$(SHLIB)/strmatch.c
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/strmatch.c

growaray.o:	$(SHLIB)/growaray.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/growaray.c

gsort.o:	$(SHLIB)/gsort.c
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/gsort.c

linknod.o:	$(SHLIB)/linknod.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/linknod.c

namscan.o:	$(SHLIB)/namscan.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/namscan.c

rjust.o:	$(SHLIB)/rjust.c
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/rjust.c

strdata.o:	$(RDONLY) $(SHLIB)/strdata.c $(Inc)/streval.h $(Inc)/sh_config.h
	$(RDONLY) $(CFLAGS) -I$(Inc) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		$(SHLIB)/strdata.c

streval.o:	$(SHLIB)/streval.c $(Inc)/streval.h $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/streval.c

tilde.o:	$(SHLIB)/tilde.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/tilde.c

tilde-p.o:	$(SHLIB)/tilde.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(PSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/tilde.c -o tilde-p.o

unassign.o:	$(SHLIB)/unassign.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/unassign.c

utos.o:	$(SHLIB)/utos.c
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/utos.c

valup.o:	$(SHLIB)/valup.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/valup.c

optget.o:	$(SHLIB)/optget.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(KSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/optget.c

optget-p.o:	$(SHLIB)/optget.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) $(PSH_FLAGS) $(BBAOPT) $(BBACMD) \
		-c $(SHLIB)/optget.c -o optget-p.o

suid_exec:	suid_exec.o
	$(CC) $(CFLAGS) -o suid_exec suid_exec.o

suid_exec.o :	$(Sh)/suid_exec.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) -c $(Sh)/suid_exec.c

clobber :	clean
		rm -f ./$(SH) ./$(PSH) ./$(LIBSH) ./$(PLIBSH) core

clean :
	rm -f *.o *.q
