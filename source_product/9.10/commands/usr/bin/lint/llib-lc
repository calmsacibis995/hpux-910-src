/* @(#) $Revision: 72.6 $       */
/*LINTLIBRARY*/

/*
 * Note that tabs are carefully placed before procedure names so it's
 * easy to extract them for consistency checking.
 */

/* The new-style definitions here assume __STDC__ */
#include <sys/stdsyms.h>
#ifndef __STDC__
#define __STDC__
#endif

/* First come the ANSI-C standard routines (X3J11/88-159) */
#ifdef _INCLUDE__STDC__
#include <errno.h>
int	errno;
#include <float.h>
#include <limits.h>
#include <stddef.h>
#include <assert.h>


/* 4.3 CHARACTER HANDLING */
#include <ctype.h>
int __nl_char_size;
/* CTYPE(3C) */
#undef isalnum
#undef isalpha
#undef iscntrl
#undef isdigit
#undef isgraph
#undef islower
#undef isprint
#undef ispunct
#undef isspace
#undef isupper
#undef isxdigit
int	isalnum(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.1 */

int	isalpha(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.2 */

int	iscntrl(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.3 */

int	isdigit(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.4 */

int	isgraph(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.5 */

int	islower(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.6 */

int	isprint(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.7 */

int	ispunct(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.8 */

int	isspace(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.9 */

int	isupper(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.10 */

int	isxdigit(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.3.1.11 */

/* CONV(3C) */
int	tolower(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }			/* ANSI 4.3.2.1 */

int	toupper(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }			/* ANSI 4.3.2.2 */


/* 4.4 LOCALIZATION */
#include <locale.h>
/* SETLOCALE(3C) */
char *	setlocale(int i, const char *c ) 		/* ANSI 4.4.1.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,POSIX.2,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return (x); }  

/* LOCALECONV(3C) */
struct lconv *	localeconv(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return; }  		/* ANSI 4.4.2.1 */


/* 4.5 MATHEMATICS (in libm) */

/* 4.6 NON-LOCAL JUMPS */
#include <setjmp.h>
/* SETJMP(3C) */
int	setjmp(jmp_buf e ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }  		/* ANSI 4.6.1.1 */

void	longjmp(jmp_buf e, int v) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}  			/* ANSI 4.6.2.1 */


/* 4.7 SIGNAL HANDLING */
#include <signal.h>
/* SIGNAL(2) */
void (*	signal(int sig, void (*func)(int)))(int){ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (void (*)())0; }

							/* ANSI 4.7.1.1 */
/* KILL(2) */
int	raise(int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }			/* ANSI 4.7.2.1 */


/* 4.8 VARIABLE ARGUMENTS */
#include <stdarg.h>

/* 4.9 INPUT/OUTPUT */
#include <stdio.h>
/* STDIO(3S) */
FILE	__iob[8];
FILE   *___fno_iop;
unsigned char *	__bufendtab[8];
/* REMOVE(3) */
int	remove(const char *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }		/* ANSI 4.9.4.1 */

/* RENAME(2) */
int	rename(const char *s, const char *t ) 		/* ANSI 4.9.4.2 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }  

/* TMPFILE(3S) */
FILE *	tmpfile(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (stdin); }		/* ANSI 4.9.4.3 */

/* TMPNAM(3S) */
char *	tmpnam(char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }		/* ANSI 4.9.4.4 */

/* FCLOSE(3S) */
int	fclose(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }		/* ANSI 4.9.5.1 */

int	fflush(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }		/* ANSI 4.9.5.2 */

/* FOPEN(3S) */
FILE *	fopen(const char *f, const char *t ) 		/* ANSI 4.9.5.3 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (stdin); }  

FILE *	freopen(const char *f, const char *t, FILE *s )	/* ANSI 4.9.5.4 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

/* SETBUF(3S) */
void	setbuf(FILE *f, char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}			/* ANSI 4.9.5.5 */

int	setvbuf(FILE *f, char *b, int t, size_t s )   	/* ANSI 4.9.5.6 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (t); }

/* PRINTF(3S) */
/* VARARGS2 */
int	fprintf(FILE *f, const char *s, ... ) 		/* ANSI 4.9.6.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }	

/* SCANF(3S) */
/* VARARGS2 */
int	fscanf(FILE *f, const char *s, ... ) 		/* ANSI 4.9.6.2 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* PRINTF(3S) */
/* VARARGS1 */
int	printf(const char *s, ... ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }	/* ANSI 4.9.6.3 */

/* SCANF(3S) */
/* VARARGS1 */
int	scanf(const char *s, ... ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }	/* ANSI 4.9.6.4 */

/* PRINTF(3S) */
/* VARARGS2 */
int	sprintf(char *p, const char *s, ... ) 		/* ANSI 4.9.6.5 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* SCANF(3S) */
/* VARARGS2 */
int	sscanf(const char *p, const char *s, ... )	/* ANSI 4.9.6.6 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); } 


/* VPRINTF(3S) */
int	vfprintf(FILE *f, const char *s, __va_list v ) 	/* ANSI 4.9.6.7 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

int	vprintf(const char *s, __va_list v ) 		/* ANSI 4.9.6.8 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

int	vsprintf(char *p, const char *s, __va_list v ) 	/* ANSI 4.9.6.9 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }


/* GETC(3S) */
int	fgetc(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }			/* ANSI 4.9.7.1 */

/* GETS(3S) */
char *	fgets(char *s, int n, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }	/* ANSI 4.9.7.2 */

/* PUTC(3S) */
int	fputc(int c, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }		/* ANSI 4.9.7.3 */

/* PUTS(3S) */
int	fputs(const char *s, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }	/* ANSI 4.9.7.4 */

/* GETC(3S) */
#undef getc
int	getc(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }			/* ANSI 4.9.7.5 */

#undef getchar
int	getchar(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }			/* ANSI 4.9.7.6 */

/* GETS(3S) */
char *	gets(char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }			/* ANSI 4.9.7.7 */

/* PUTC(3S) */
#undef putc
int	putc(int c, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }		/* ANSI 4.9.7.8 */

#undef putchar
int	putchar(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }			/* ANSI 4.9.7.9 */

/* PUTS(3S) */
int	puts(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }		/* ANSI 4.9.7.10 */

/* UNGETC(3S) */
int	ungetc(int c, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }		/* ANSI 4.9.7.11 */

/* FREAD(3S) */
#ifdef _CLASSIC_ANSI_TYPES
int	fread(char *b, int s, int n, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (n); }

int	fwrite(char *b, int s, int n, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (n); }

#else
size_t	fread(void *b, size_t s, size_t n, FILE *f ) 	/* ANSI 4.9.8.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (n); }

size_t	fwrite(const void *b, size_t s, size_t n, FILE *f ) /* ANSI 4.9.8.2 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (n); }

#endif
/* FGETPOS(3S) */
int	fgetpos(FILE *f, fpos_t *p ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }	/* ANSI 4.9.9.1 */

/* FSEEK(3S) */
int	fseek(FILE *f, long o, int p) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (p); }	/* ANSI 4.9.9.2 */

/* FGETPOS(3S) */
int	fsetpos(FILE *f, const fpos_t *p ) 		/* ANSI 4.9.9.3 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); } 

/* FSEEK(3S) */
long	ftell(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0L); }		/* ANSI 4.9.9.4 */

void	rewind(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}				/* ANSI 4.9.9.5 */

/* FERROR(3S) */
#undef clearerr
void	clearerr(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}				/* ANSI 4.9.10.1 */

#undef feof
int	feof(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }			/* ANSI 4.9.10.2 */

#undef ferror
int	ferror(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }		/* ANSI 4.9.10.3 */

/* PERROR(3C) */
void	perror(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}			/* ANSI 4.9.10.4 */


/* 4.10 GENERAL UTILITIES */
#include <stdlib.h>
/* STRTOD(3C) */
double	atof(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0.0); } 		/* ANSI 4.10.1.1 */

/* STRTOL(3C) */
int	atoi(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }		/* ANSI 4.10.1.2 */

long	atol(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0L); }		/* ANSI 4.10.1.3 */

/* STRTOD(3C) */
double	strtod(const char *s, char **t ) 		/* ANSI 4.10.1.4 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0.0); } 

/* STRTOL(3C) */
long	strtol(const char *s, char **t, int b) 		/* ANSI 4.10.1.5 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0L); } 

unsigned long int	strtoul(const char *c, char **cp, int i ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((unsigned long)0); }			/* ANSI 4.10.1.6 */


/* RAND(3C) */
int	rand(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }			/* ANSI 4.10.2.1 */

void	srand(unsigned s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}				/* ANSI 4.10.2.2 */


/* MALLOC(3C), MALLOC(3X) */
void	free(void *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}	  			/* ANSI 4.10.3.2 */

#ifdef _CLASSIC_ANSI_TYPES
char *	calloc(unsigned n, unsigned e ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (""); }

char *	malloc(unsigned s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (""); }

char *	realloc(char *s, unsigned n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

#else
void *	calloc(size_t n, size_t e ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (NULL); }  /* ANSI 4.10.3.1 */

void *	malloc(size_t s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (NULL); }	  	/* ANSI 4.10.3.3 */

void *	realloc(void *s, size_t n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }	/* ANSI 4.10.3.4 */

#endif

/* ABORT(3C) */
#ifdef _CLASSIC_ANSI_TYPES
int	abort(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#else
void	abort(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}					/* ANSI 4.10.4.1 */

#endif
/* ATEXIT(2) */
int	atexit(void (*f)() ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }		/* ANSI 4.10.4.2 */

/* EXIT(2) */
void	exit(int s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}					/* ANSI 4.10.4.3 */

/* GETENV(3C) */
char *	getenv(const char *n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,POSIX.2,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return (x); }	/* ANSI 4.10.4.4 */

/* SYSTEM(3S) */
int	system(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.2,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }		/* ANSI 4.10.4.5 */


/* BSEARCH(3C) */
#ifdef _CLASSIC_ANSI_TYPES
char *	bsearch(char *k, char *b, unsigned n, unsigned w, int (*c)() ) 	
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (k); }

#else
void *	bsearch(const void *k, const void *b, size_t n, size_t w, 
		int (*c)(const void *, const void*) ) 	/* ANSI 4.10.5.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 void *x; return (x);}

#endif
/* QSORT(3C) */
void	qsort(void *b, size_t n, size_t w, int (*c)() ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
} /* ANSI 4.10.5.2 */


/* ABS(3C) */
int	abs(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }			/* ANSI 4.10.6.1 */

/* DIV(3C) */
div_t	div(int i, int j ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 div_t d; return(d); }	/* ANSI 4.10.6.2 */

/* ABS(3C) */
long	labs(long l ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(l); }			/* ANSI 4.10.6.3 */

/* DIV(3C) */
ldiv_t	ldiv(long l, long m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 ldiv_t ld; return(ld); }/* ANSI 4.10.6.4 */


/* MULTIBYTE(3C) */
int	mblen(const char *c, size_t s ) 		/* ANSI 4.10.7.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }	

int	mbtowc(wchar_t *w, const char *c, size_t s ) 	/* ANSI 4.10.7.2 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

int	wctomb(char *c, wchar_t w ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }	/* ANSI 4.10.7.3 */

size_t	mbstowcs(wchar_t *w, const char *c, size_t s ) 	/* ANSI 4.10.8.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

size_t	wcstombs(char *c, const wchar_t *w, size_t s ) 	/* ANSI 4.10.8.2 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }


/* 4.11 STRING HANDLING */
#include <string.h>
/* MEMORY(3C) */
#ifdef _CLASSIC_ANSI_TYPES
char *	memcpy(char *a, char *b, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (a); }

#else
void *	memcpy(void *a, const void *b, size_t n ) 	/* ANSI 4.11.2.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (a); }

#endif
void *	memmove(void *v, const void *x, size_t s ) 	/* ANSI 4.11.2.2 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(v); }

/* STRING(3C) */
char *	strcpy(char *a, const char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (a); }	/* ANSI 4.11.2.3 */

char *	strncpy(char *a, const char *b, size_t n ) 	/* ANSI 4.11.2.4 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (a); }

char *	strcat(char *a, const char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (a); }	/* ANSI 4.11.3.1 */

char *	strncat(char *a, const char *b, size_t n ) 	/* ANSI 4.11.3.2 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (a); }

/* MEMORY(3C) */
int	memcmp(const void *a, const void *b, size_t n ) /* ANSI 4.11.4.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* STRING(3C) */
int	strcmp(const char *a, const char *b ) 		/* ANSI 4.11.4.2 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

int	strcoll(const char *c1, const char *c2 ) 	/* ANSI 4.11.4.3 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

int	strncmp(const char *a, const char *b, size_t n )/* ANSI 4.11.4.4 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

size_t	strxfrm(char *c1, const char *c2, size_t s ) 	/* ANSI 4.11.4.5 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }


/* MEMORY(3C) */
#ifdef _CLASSIC_ANSI_TYPES
char *	memchr(char *s, int c, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

#else
void *	memchr(const void *s, int c, size_t n ) 	/* ANSI 4.11.5.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 void *x; return (x); }

#endif
/* STRING(3C) */
char *	strchr(const char *a, int b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return (x); }	/* ANSI 4.11.5.2 */

#ifdef _CLASSIC_ANSI_TYPES
int	strcspn(char *a, char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

int	strspn(char *a, char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#else
size_t	strcspn(const char *a, const char *b ) 		/* ANSI 4.11.5.3 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((size_t)0); }

size_t	strspn(const char *a, const char *b ) 		/* ANSI 4.11.5.6 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#endif
char *	strpbrk(const char *a, const char *b ) 		/* ANSI 4.11.5.4 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return (x); }

char *	strrchr(const char *a, int b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return (x); }	/* ANSI 4.11.5.5 */

char *	strstr(const char *c1, const char *c2 ) 	/* ANSI 4.11.5.7 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return(x); }

char *	strtok(char *a, const char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (a); }	/* ANSI 4.11.5.8 */


/* MEMORY(3C) */
#ifdef _CLASSIC_ANSI_TYPES
char * memset(char *s, int c, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

#else
void *	memset(void *s, int c, size_t n ) 		/* ANSI 4.11.6.1 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

#endif
/* PERROR(3C) */
char *	strerror(int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char c; return(&c); }	/* ANSI 4.11.6.2 */

#ifdef _CLASSIC_ANSI_TYPES
int	strlen(char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#else
size_t	strlen(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((size_t)0); }	/* ANSI 4.11.6.3 */

#endif


/* 4.12 DATE AND TIME */
#include <time.h>
/* CLOCK(3C) */
#ifdef _CLASSIC_ANSI_TYPES
long	clock(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1][5]
	The clock(3C) call to report CPU time is portable to open systems.  

	The clock(3X) call is an HP-UX specific call that returns the
	current clock time in MPE format.  This call is part of libportnls.
	It is not portable to open systems.  Use gmtime() or localtime() 
	to replace the clock(3X) call.  See ctime(3C).  */

#endif  /* _APEX_SOURCE */
 return (0L); }

#else
clock_t	clock(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1][5]
	The clock(3C) call to report CPU time is portable to open systems.  

	The clock(3X) call is an HP-UX specific call that returns the
	current clock time in MPE format.  This call is part of libportnls.
	It is not portable to open systems.  Use gmtime() or localtime() 
	to replace the clock(3X) call.  See ctime(3C).  */

#endif  /* _APEX_SOURCE */
 return ((clock_t)0); }		/* ANSI 4.12.2.1 */

#endif
/* CTIME(3C) */
char *	tzname[2];
double	difftime(time_t t1, time_t t2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(t1); } /* ANSI 4.12.2.2 */

time_t	mktime(struct tm *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((time_t)0); } 	/* ANSI 4.12.2.3 */

/* TIME(2) */
time_t	time(time_t *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (*t); }		/* ANSI 4.12.2.4 */


/* CTIME(3C) */
char *	asctime(const struct tm *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (""); }	/* ANSI 4.12.3.1 */

char *	ctime(const time_t *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (""); }	/* ANSI 4.12.3.2 */

struct tm *	gmtime(const time_t *c ) 		/* ANSI 4.12.3.3 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (struct tm *)0; }

struct tm *	localtime(const time_t *c ) 		/* ANSI 4.12.3.4 */
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (struct tm *)0; }

/* STRFTIME(3C) */
size_t	strftime(char *c1, size_t s, const char *c2, const struct tm *t ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }					/* ANSI 4.12.3.5 */


#endif /* _INCLUDE__STDC__ */


/* Next come those routines in POSIX 1003.1, but not in ANSI-C */
/* =====================   POSIX  ============================ */
#ifdef _INCLUDE_POSIX_SOURCE
#include <sys/types.h>
#include <pwd.h>
#include <unistd.h>


/* 3. Process Primitives */
/* FORK(2) */ 						/* POSIX 3.1.1 */
#ifdef _CLASSIC_POSIX_TYPES
int   fork(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#else
pid_t	fork(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((pid_t)0); }		

#endif
/* EXEC(2) */						/* POSIX 3.1.2 */
char **	environ;
/*VARARGS2*/
int	execl(const char *f, const char *a, ... ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1][9]
	The executable specified by the "path" parameter may be in a 
	different location on open systems.  See exec(2). */

#endif  /* _APEX_SOURCE */
 return (0); }

int	execv(const char *s, char * const *v ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1][9]
	The executable specified by the "path" parameter may be in a 
	different location on open systems.  See exec(2). */

#endif  /* _APEX_SOURCE */
 return (0); }

/*VARARGS2*/
int	execle(const char *f, const char *a, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1][9]
	The executable specified by the "path" parameter may be in a 
	different location on open systems.  See exec(2). */

#endif  /* _APEX_SOURCE */
 return (0); }

int	execve(const char *f, char * const *a, char * const *e ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1][9]
	The executable specified by the "file" parameter may be in a
	different location in the file system on open systems.  The
	new location must be specified in the environment variable
	$PATH.  See exec(2).  */

#endif  /* _APEX_SOURCE */
 return (0); }

/*VARARGS2*/
int	execlp(const char *f, const char *a, ... ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1][9]
	The executable specified by the "file" parameter may be in a
	different location in the file system on open systems.  The
	new location must be specified in the environment variable
	$PATH.  See exec(2).  */

#endif  /* _APEX_SOURCE */
 return (0); }

int	execvp(const char *s, char * const *v ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1][9]
	The executable specified by the "file" parameter may be in a
	different location in the file system on open systems.  The
	new location must be specified in the environment variable
	$PATH.  See exec(2).  */

#endif  /* _APEX_SOURCE */
 return (0); }

#include <sys/wait.h>
/* WAIT(2) */						/* POSIX 3.2.1 */
#ifdef _CLASSIC_POSIX_TYPES
int	wait(int *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

int	waitpid(int p, int *m, int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(p); }

#else
pid_t	wait(int *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((pid_t)0); }

pid_t	waitpid(pid_t p, int *m, int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((pid_t)0); }

#endif
/* EXIT(2) */						/* POSIX 3.2.2 */
void	_exit(int s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

/* KILL(2) */						/* POSIX 3.3.2 */
int	kill(pid_t i, int s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

/* SIGSETOPS(3C) */					/* POSIX 3.3.3 */
int	sigemptyset(sigset_t *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

int	sigfillset(sigset_t *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

int	sigaddset(sigset_t *s, int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i); }

int	sigdelset(sigset_t *s, int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i); }

int	sigismember(const sigset_t *s, int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i); }

/* SIGACTION(2) */					/* POSIX 3.3.4 */
int	sigaction(int i, const struct sigaction *s1, struct sigaction *s2 ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i); }

/* SIGPROCMASK(2) */					/* POSIX 3.3.5 */
int	sigprocmask(int i, const sigset_t *s1, sigset_t *s2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i); }

/* SIGPENDING(2) */					/* POSIX 3.3.6 */
int	sigpending(sigset_t *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* SIGSUSPEND(2) */					/* POSIX 3.3.7 */
int	sigsuspend(const sigset_t *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* ALARM(2) */						/* POSIX 3.4.1 */
#ifdef _CLASSIC_POSIX_TYPES
unsigned long   alarm(unsigned long s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

#else
unsigned int	alarm(unsigned int s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

#endif
/* PAUSE(2) */						/* POSIX 3.4.2 */
int	pause(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* SLEEP(3C) */						/* POSIX 3.4.3 */
unsigned int	sleep(unsigned int n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (n); }


/* 4. Process Environment */
/* GETPID(2) */						/* POSIX 4.1.1 */
#ifdef _CLASSIC_POSIX_TYPES
int   getpid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

int   getppid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#else
pid_t	getpid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((pid_t)0); }

pid_t	getppid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((pid_t)0); }

#endif
/* GETUID(2) */						/* POSIX 4.2.1 */
#ifdef _CLASSIC_POSIX_TYPES
unsigned short getuid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((unsigned short)0); }

unsigned short geteuid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((unsigned short)0); }

unsigned short getgid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((unsigned short)0); }

unsigned short getegid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((unsigned short)0); }

#else
uid_t	getuid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((uid_t)0); }

uid_t	geteuid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((uid_t)0); }

gid_t	getgid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((gid_t)0); }

gid_t	getegid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((gid_t)0); }

#endif
/* SETUID(2) */						/* POSIX 4.2.2 */
int	setuid(uid_t u ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (u); }

int	setgid(gid_t g ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (g); }

/* GETGROUPS(2) */					/* POSIX 4.2.3 */
int	getgroups(int n, gid_t *g ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* GETLOGIN(3C) */					/* POSIX 4.2.4 */
char *	getlogin(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (""); }

/* CUSERID(3S) */					/* POSIX 4.2.4 */
char *	cuserid(char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

/* GETPID(2) */						/* POSIX 4.3.1 */
#ifdef _CLASSIC_POSIX_TYPES
int   getpgrp(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#else
pid_t	getpgrp(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((pid_t)0); }

#endif
/* SETSID(2) */						/* POSIX 4.3.2 */
pid_t	setsid(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((pid_t)0); }

/* SETPGID(2) */					/* POSIX 4.3.3 */
int	setpgid(pid_t p1, pid_t p2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* UNAME(2) */						/* POSIX 4.4.1 */
#include <sys/utsname.h>
int	uname(struct utsname *n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* TIMES(2) */						/* POSIX 4.5.2 */
#include <sys/times.h>
#ifdef _CLASSIC_POSIX_TYPES
long  times(struct tms *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0L); }

#else
clock_t	times(struct tms *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((clock_t)0); }

#endif
/* CTERMID(3S) */					/* POSIX 4.7.1 */
char *	ctermid(char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

/* TTYNAME(3C) */					/* POSIX 4.7.2 */
char *	ttyname(int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (""); }

int	isatty(int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }

/* SYSCONF(2) */					/* POSIX 4.8.1 */
long	sysconf(int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,POSIX.2,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0L); }



/* 4. Files and Directories */
#include <dirent.h>
/* DIRECTORY(3C) */					/* POSIX 5.1.2 */
DIR *	opendir(const char *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

struct dirent *	readdir(DIR *d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#undef rewinddir
void	rewinddir(DIR *d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

int	closedir(DIR *d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* CHDIR(2) */						/* POSIX 5.2.1 */
int	chdir(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* GETCWD(3C) */					/* POSIX 5.2.2 */
#if defined(_XPG3) || defined(_POSIX1_1988)
char *	getcwd(char *b, int s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (b); }

#else /* not (_XPG3 || _POSIX1_1988) */
char *	getcwd(char *b, size_t s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (b); }

#endif /* not (_XPG3 || _POSIX1_1988) */
/* OPEN(2) */						/* POSIX 5.3.1 */
#include <sys/stat.h>
#include <fcntl.h>
/*VARARGS2*/
int	open(const char *f, int o, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (o); }

/* CREAT(2) */						/* POSIX 5.3.2 */
int	creat(const char *s, mode_t m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* UMASK(2) */
#ifdef _CLASSIC_POSIX_TYPES
int   umask(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }

#else
mode_t	umask(mode_t c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((mode_t)0); }		/* POSIX 5.3.3 */

#endif
/* LINK(2) */						/* POSIX 5.3.4 */
int	link(const char *a, const char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* MKDIR(2) */						/* POSIX 5.4.1 */
int	mkdir(const char *p, mode_t m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* MKFIFO(3C) */					/* POSIX 5.4.2 */
int	mkfifo(const char *c, mode_t m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* UNLINK(2) */						/* POSIX 5.5.1 */
int	unlink(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* RMDIR(2) */						/* POSIX 5.5.2 */
int	rmdir(const char *p ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* STAT(2) */						/* POSIX 5.6.2 */
int	stat(const char *s, struct stat *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

int	fstat(int f, struct stat *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }

/* ACCESS(2) */						/* POSIX 5.6.3 */
int	access(const char *f, int m) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (m); }

/* CHMOD(2) */						/* POSIX 5.6.4 */
int	chmod(const char *s, mode_t m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* CHOWN(2) */						/* POSIX 5.6.5 */
int	chown(const char *s, uid_t o, gid_t g ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#include <utime.h>
/* UTIME(2) */						/* POSIX 5.6.6 */
int	utime(const char *f, const struct utimbuf *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* PATHCONF(2) */					/* POSIX 5.7.1 */
long	pathconf(const char *c, int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,POSIX.2,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0L); }

long	fpathconf(int i1, int i2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,POSIX.2,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0L); }


/* 6. Input and Output Primitives */
/* PIPE(2) */						/* POSIX 6.1.1 */
int	pipe(int f[2] ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* DUP(2) */						/* POSIX 6.2.1 */
int	dup(int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }

/* DUP2(2) */						/* POSIX 6.2.1 */
int	dup2(int f, int f2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* CLOSE(2) */						/* POSIX 6.3.1 */
int	close(int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }


/* READ(2) */						/* POSIX 6.4.1 */
#if defined(_XPG3) || defined(_POSIX1_1988)
int	read(int f, char *b, unsigned n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }

#else /* not (_XPG3 || _POSIX1_1988) */
ssize_t	read(int a, void *b, size_t c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

#endif /* not (_XPG3 || _POSIX1_1988) */

/* WRITE(2) */						/* POSIX 6.4.2 */
#if defined(_XPG3) || defined(_POSIX1_1988)
int	write(int f, const char *b, unsigned n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }

#else /* not (_XPG3 || _POSIX1_1988) */
ssize_t	write(int f, const void *b, size_t n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }

#endif /* not (_XPG3 || _POSIX1_1988) */
/* FCNTL(2) */						/* POSIX 6.5.2 */
/*VARARGS2*/
int	fcntl(int f, int c, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }

/* LSEEK(2) */						/* POSIX 6.5.3 */
off_t	lseek(int f, off_t o, int w ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (o); }


/* 7. Device- and Class-Specific Functions */
#include <termios.h>
/* CFSPEED(3C) */					/* POSIX 7.1.2.7 */
speed_t	cfgetospeed(const struct termios *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((speed_t)0); }

int	cfsetospeed(struct termios *t, speed_t s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

speed_t	cfgetispeed(const struct termios *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((speed_t)0); }

int	cfsetispeed(struct termios *t, speed_t s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* TCATTRIBUTE(3C) */					/* POSIX 7.2.1 */
int	tcgetattr(int i, struct termios *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

int	tcsetattr(int i, int j, const struct termios *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* TCCONTROL(3C) */					/* POSIX 7.2.2 */
int	tcsendbreak(int i1, int i2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i1); }

int	tcdrain(int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i); }

int	tcflush(int i1, int i2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i1); }

int	tcflow(int i1, int i2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i1); }

/* TCGETPGRP(3C) */					/* POSIX 7.2.3 */
pid_t	tcgetpgrp(int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((pid_t)0); }

/* TCSETPGRP(3C) */					/* POSIX 7.2.4 */
int	tcsetpgrp(int i, pid_t p ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i); }


/* 8. Language-Specific Services for the C Programming Language */
/* FILENO(3S) */					/* POSIX 8.2.1 */
#undef fileno
int	fileno(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* FOPEN(3S) */
FILE *	fdopen(int f, const char *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
return (stdin);}	/* POSIX 8.2.2 */

/* SETJMP(3C) */					/* POSIX 8.3.1 */
int	sigsetjmp(sigjmp_buf s, int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(i); }

void	siglongjmp(sigjmp_buf s, int i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return; }

/* CTIME(3C) */						/* POSIX 8.3.2 */
void	tzset(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}


/* 9. System Databases */
#include <grp.h>
/* GETGRENT(3C) */					/* POSIX 9.2.1 */
struct group *	getgrgid(gid_t g ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (struct group *)0; }

struct group *	getgrnam(const char *n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (struct group *)0; }

/* GETPWENT(3C) */					/* POSIX 9.2.2 */
struct passwd *	getpwuid(uid_t u ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (struct passwd *)0; }

struct passwd *	getpwnam(const char *n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (struct passwd *)0; }


# endif  /* POSIX */

/*  POSIX.2 functions not in POSIX.1  */
/* ======================= POSIX.2 ============================= */
#ifdef _INCLUDE_POSIX2_SOURCE

int	fnmatch(const char *p, const char *s, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,XPG3,OSF_AES,OSF1] 
	The fnmatch() call is in the proposed POSIX.2 standard.  It is 
	not portable to systems that have not implemented the proposed
	standard at this time.  It may be added to these systems at a 
	later date. */

#endif  /* _APEX_SOURCE */
 return (f); }


#include <regex.h>
int	regcomp(regex_t *preg, const char *pattern, int cflags) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,XPG3,OSF_AES,OSF1]  
	The regcomp() call is in the proposed POSIX.2 standard.  It is 
	not portable to systems that have not implemented the proposed
	standard at this time.  It may be added to these systems at a 
	later date. */

#endif  /* _APEX_SOURCE */
 return (0); }

int	regexec(const regex_t *preg, const char *string,
		size_t nmatch, regmatch_t *pmatch,
		int eflags) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,XPG3,OSF_AES,OSF1]  
	The regexec() call is in the proposed POSIX.2 standard.  It is 
	not portable to systems that have not implemented the proposed  
	standard at this time.  It may be added to these systems at a 
	later date. See regcomp(3C). */

#endif  /* _APEX_SOURCE */
 return (0); }

void	regfree(regex_t *preg) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,XPG3,OSF_AES,OSF1] 
	The regfree() call is in the proposed POSIX.2 standard.  It is 
	not portable to systems that have not implemented the proposed 
	standard at this time.  It may be added to these systems at a 
	later date. See regcomp(3C). */ 

#endif  /* _APEX_SOURCE */
 return; }

size_t	regerror(int a, const regex_t *b, char *c, size_t d) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return(d); }


#include <glob.h>
int	glob(const char *pattern, int flags, int (*errfunc)(),
	     glob_t *pglob) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,XPG3,OSF_AES,OSF1] 
	The glob() call is in the proposed POSIX.2 standard.  It is
	not portable to systems that have not implemented the proposed
	standard at this time.  It may be added to these systems at a
	later date.  */

#endif  /* _APEX_SOURCE */
 return (0); }

void	globfree(glob_t *pglob) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,XPG3,OSF_AES,OSF1] 
	The globfree() call is in the proposed POSIX.2 standard.  It
	is not portable to systems that have not implemented the
	proposed standard at this time.  It may be added to these
	systems at a later date.  See glob(3C).  */

#endif  /* _APEX_SOURCE */
 return; }


size_t	confstr(int name, char *buf, size_t len) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,XPG3,OSF_AES,OSF1] 
	The confstr() call is in the proposed POSIX.2 standard.  It is
	not portable to systems that have not implemented the proposed
	standard at this time.  It may be added to these systems at a
	later date.  */

#endif  /* _APEX_SOURCE */
 return (0); }

 
#endif  /* POSIX.2*/

/* X/Open Portability Guide, Issue 3 */
/* ======================= XOPEN =============================== */
#ifdef _INCLUDE_XOPEN_SOURCE


#include <nl_types.h>
/* _nl_fn */
nl_catd	_nl_fn;
/* CATOPEN(3C) NLS */
int	catclose(nl_catd d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* CATGETS(3C) NLS */
char *	catgets(nl_catd c, int s, int m, const char *d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return(x); }

/* CATOPEN(3C) NLS */
nl_catd	catopen(const char *n, int o) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((nl_catd)0); }

/* CHROOT(2) */
int	chroot(const char *p ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* CRYPT(3C) */
char *	crypt(const char *k, const char *s ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,POSIX.2,OSF_AES,OSF1]
	The crypt() call is part of the proposed X/Open XPG4 standard.
	It is not portable to systems that have not implemented the
	proposed standard at this time.  It may be added to them at 
	a future date. */

#endif  /* _APEX_SOURCE */
 char *x; return (x); }

/* CTIME(3C) */
int	daylight;
/* DRAND48(3C) */
double	drand48(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0.0); }

double	erand48(unsigned short x[3] ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0.0); }

long	jrand48(unsigned short x[3] ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0L); }

void	lcong48(unsigned short p[7] ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

long	lrand48(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0L); }

long	mrand48(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0L); }

long	nrand48(unsigned short x[3] ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0L); }

unsigned short *	seed48(unsigned short s[3] ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

void	srand48(long s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

/* CRYPT(3C) */
void	encrypt(char *b, int e) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,POSIX.2,OSF_AES,OSF1]
	The encrypt() call is part of the proposed X/Open XPG4 standard.
	It is not portable to systems that have not implemented the
	proposed standard at this time.  It may be added to them at 
	a future date.  See crypt(3C). */

#endif  /* _APEX_SOURCE */
}

/* FSYNC(2) */
int	fsync(int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(f); }

/* FTW(3C) */
#include <ftw.h>
int	ftw(const char *p, int (*f)(const char *, const struct stat *,
	    int), int d) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (d); }

/* GETOPT(3C) */
int	getopt(int c, char * const *v, const char *o ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }

char *	optarg;
int	optind;
int	opterr;
/* GETC(3S) */
int	getw(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* HSEARCH(3C) */
#include <search.h>
int	hcreate(unsigned n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

void	hdestroy(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

ENTRY *	hsearch(ENTRY i, ACTION a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (&i); }

/* CTYPE(3C) */
#undef isascii
int	isascii(int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }

/* LSEARCH(3C) */
#ifdef _CLASSIC_XOPEN_TYPES
char *	lsearch(char *k, char *b, unsigned *n, unsigned w, int (*c)() ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (k); }

char *	lfind(char *k, char *b, unsigned *n, unsigned w, int (*c)() ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (k); }

#else
void *	lsearch(const void *k, void *b, size_t *n, size_t w,
		int (*c)(const void *, const void *)) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
int i; return((void *)&i); }

void *	lfind(const void *k, const void *b, size_t *n, size_t w,
	      int (*c)(const void *, const void *)) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
int i; return((void *)&i); }

#endif
/* MEMORY(3C) */
#include <sys/ipc.h>
#include <sys/msg.h>
#ifdef _CLASSIC_XOPEN_TYPES
char *	memccpy(char *a, char *b, int c, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (a); }

#else
void *	memccpy(void *a, const void *b, int c, size_t n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (a); }

#endif /* _CLASSIC_XOPEN_TYPES */
/* MSGCTL(2) */
int	msgctl(int m, int c, struct msqid_ds *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (m); }

/* MSGGET(2) */
int	msgget(key_t k, int m) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (m); }

/* MSGOP(2) */
int	msgrcv(int q, void *p, int s, long t, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (q); }

int	msgsnd(int q, void *p, int s, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (q); }

/* NICE(2) */
int	nice(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }

/* NL_LANGINFO(3C) NLS */
#include <langinfo.h>
char *	nl_langinfo(nl_item i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (""); }

/* POPEN(3S) */
int	pclose(FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

FILE *	popen(const char *c, const char *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (stdin); }

/* PUTENV(3C) */
int	putenv(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* PUTC(3S) */
int	putw(int w, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (w); }

/* DIRECTORY(3C) */
void	seekdir(DIR *d, long l ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

/* SEMGET(2) */
int	semget(key_t k, int n, int s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (n); }

/* SEMOP(2) */
union semun { int val; struct semid_ds *buf; unsigned short *array; };

#include <sys/sem.h>
int	semop(int i, struct sembuf *o, unsigned int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }

/* CRYPT(3C) */
void	setkey(const char *k ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,FIPS151_1,POSIX.2,OSF_AES,OSF1]
	The setkey() call is part of the proposed X/Open XPG4 standard.
	It is not portable to systems that have not implemented the
	proposed standard at this time.  It may be added to them at 
	a future date.  See crypt(3C). */

#endif  /* _APEX_SOURCE */
}

/* SHMOP(2) */
#include <sys/shm.h>
void *	shmat(int i, const void *a, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 void *x; return (x); }

/* SHMCTL(2) */
int	shmctl(int s, int c, struct shmid_ds *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

/* SHMOP(2) */
int	shmdt(const void *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* SHMGET(2) */
int	shmget(key_t k, int s, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (s); }

/* SWAB(3C) */
void	swab(const void *f, void *t, ssize_t n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

/* DIRECTORY(3C) */
long	telldir(DIR *d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0L); }

/* TMPNAM(3S) */
char *	tempnam(const char *d, const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return (x); }

/* CTIME(3C) */
long	timezone;
/* CONV(3C) */
#undef _toupper
#undef _tolower
#undef toascii
int	_toupper(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }

int	_tolower(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }

int	toascii(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }

/* TSEARCH(3C) */
#ifdef _CLASSIC_XOPEN_TYPES
char *	tsearch(char *k, char **r, int (*c)() ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (k); }

char *	tfind(char *k, char **r, int (*c)() ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (k); }

char *	tdelete(char *k, char **r, int (*c)() ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (k); }

void	twalk(char *r, void (*f)() ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

#else
void *	tsearch(const void *k, void **r, int (*c)(const void *, const void *))
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 int i; return((void *)&i);}

void *	tfind(const void *k, void * const *r, int (*c)(const void *, 
	const void *))
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
int i; return((void *)&i); }

void *	tdelete(const void *k, void **r, int (*c)(const void *, const void *))
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
int i; return((void *)&i); }

void	twalk(const void *r, void (*f)(const void *, VISIT, int)) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

#endif
/* ULIMIT(2) */
#include <ulimit.h>
/*VARARGS1*/
long	ulimit(int c, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (c); }


#include <varargs.h>


/* X/Open Portability Guide, Issue 4 -- Worldwide Portability Interface */

#include <iconv.h>
int	iconv_close ( iconv_t c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

iconv_t	iconv_open ( const char *to, const char *from ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }


int	strfmon ( char *s, size_t m, char *fmt, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4] */
#endif  /* _APEX_SOURCE */
 return 0; }

char	*strptime ( const char *b, const char *fmt, struct tm *tm) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4] */
#endif  /* _APEX_SOURCE */
 return 0; }

#include <wchar.h>

/* GETWC(3C) */
wint_t	getwc(FILE *stream) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wint_t)0; }

wint_t getwchar(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wint_t)0; }

wint_t fgetwc(FILE *stream) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wint_t)0; }


/* FGETWS(3C) */
wchar_t *fgetws(wchar_t *ws, int n, FILE *stream) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t)0; }

#ifdef _APEX_SOURCE
/* GETWS(3X), getws() was removed from the XPG4 spec. and hpux */
wchar_t *getws(wchar_t *ws) {
    /* APEX STD [HPUX->OSF1] */
    return (wchar_t)0; }
#endif  /* _APEX_SOURCE */


/* PUTWC(3C) */
wint_t putwc(wint_t wc, FILE *stream) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wint_t)0; }

wint_t putwchar(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wint_t)0; }

wint_t fputwc(wint_t wc, FILE *stream) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wint_t)0; }


/* FPUTWS(3C) */
int fputws(const wchar_t *ws, FILE *stream) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

#ifdef _APEX_SOURCE
/* PUTWS(3X), putws was removed from the xpg4 spec and hpux. */
int putws(const wchar_t *ws) {
    /* APEX STD [HPUX->OSF1] */
    return 0; }
#endif  /* _APEX_SOURCE */


/* UNGETWC(3C) */
wint_t ungetwc(wint_t wc, FILE *stream) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wint_t)0; }


/* WCONV(3C) */
wint_t towupper(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wint_t)0; }

wint_t towlower(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wint_t)0; }


/* WCSFTIME(3C) */
size_t wcsftime(wchar_t *ws, size_t maxsize, const char *format, const struct tm *timeptr) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (size_t)0; }


/* WCSTOD(3C) */
double wcstod(const wchar_t *nptr, wchar_t **endptr) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (double)0; }


/* WCSTOL(3C) */
long int wcstol(const wchar_t *nptr, wchar_t **endptr, int base) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (long int)0; }

unsigned long int wcstoul(const wchar_t *nptr, wchar_t **endptr, int base) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (unsigned long int)0; }


/* WCTYPE(3C) */
wctype_t wctype(const char *charclass) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wctype_t)0; }

int iswctype(wint_t wc, wctype_t prop) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswalnum(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswalpha(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswcntrl(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswdigit(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswgraph(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswlower(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswprint(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswpunct(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswspace(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswupper(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int iswxdigit(wint_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }


/* WCSTRING(3C) */
wchar_t *wcscat(wchar_t *ws1, const wchar_t *ws2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t *)0; }

wchar_t *wcsncat(wchar_t *ws1, const wchar_t *ws2, size_t n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t *)0; }

int wcscmp(const wchar_t *ws1, const wchar_t *ws2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int wcsncmp(const wchar_t *ws1, const wchar_t *ws2, size_t n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

wchar_t *wcscpy(wchar_t *ws1, const wchar_t *ws2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t *)0; }

wchar_t *wcsncpy(wchar_t *ws1, const wchar_t *ws2, size_t n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t *)0; }

size_t wcslen(const wchar_t *ws) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (size_t)0; }

wchar_t *wcschr(const wchar_t *ws, wchar_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t *)0; }

wchar_t *wcsrchr(const wchar_t *ws, wchar_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t *)0; }

wchar_t *wcspbrk(const wchar_t *ws1, const wchar_t *ws2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t *)0; }

size_t wcsspn(const wchar_t *ws1, const wchar_t *ws2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (size_t)0; }

size_t wcscspn(const wchar_t *ws1, const wchar_t *ws2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (size_t)0; }

wchar_t *wcswcs(const wchar_t *ws1, const wchar_t *ws2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t *)0; }

wchar_t *wcstok(wchar_t *ws1, const wchar_t *ws2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (wchar_t *)0; }

int wcscoll(const wchar_t *ws1, const wchar_t *ws2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

size_t wcsxfrm(wchar_t *ws1, const wchar_t *ws2, size_t n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (size_t)0; }

int wcwidth(const wchar_t wc) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int wcswidth(const wchar_t *ws, size_t n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }


#endif  /* _INCLUDE_XOPEN_SOURCE */


/* HP-UX entry points */
/* =========================  HPUX ============================= */
#ifdef _INCLUDE_HPUX_SOURCE

#undef DUX
#define DUX
#undef AUDIT
#define AUDIT
#undef ACLS
#define ACLS

#include <nl_ctype.h>
int	__nl_failid;
int	__status_tab[3][4];
#include <ustat.h>
#include <sys/resource.h>
#include <dial.h>
#include <utmp.h>
#include <sys/timeb.h>
#include <sys/vfs.h>


#include <sys/privgrp.h>
#include <sys/uio.h>
#include <mon.h>
#include <a.out.h>
#include <disktab.h>
#include <strings.h>

#if defined(DUX) || defined(DISKLESS)
#    include <cluster.h>
#endif /* DUX/DISKLESS */

#ifdef ACLS
#    include <sys/acl.h>
#    include <acllib.h>
#endif

#ifdef AUDIT
#    include <sys/audit.h>
#endif

#include <sys/time.h>
int adjtime ( struct timeval *delta, struct timeval *olddelta ) {
#ifdef _APEX_SOURCE
	/* APEX STD [HPUX->HPUX,OSF1] */
#endif 	/* _APEX_SOURCE */
return(0); }

int getbootinfo(int type, caddr_t *buf, int len) {
#ifdef _APEX_SOURCE
	/* APEX STD [HPUX->HPUX] */
#endif 	/* _APEX_SOURCE */
return(0); }


int setbootinfo(int type, caddr_t *buf, int len) {
#ifdef _APEX_SOURCE
	/* APEX STD [HPUX->HPUX] */
#endif 	/* _APEX_SOURCE */
return(0); }

/* Shared library routines.  These are physically in libdld. They are
   included here for to avoid creating a llib-ldld file. */
#include <dl.h>
shl_t shl_load( const char *p, int flags, long a ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The shl_load() call attaches a shared library to the process.  
	This HP-UX shared library specific functionality is not
	portable to open systems.  */

#endif  /* _APEX_SOURCE */
 shl_t x; return(x); }

int shl_findsym( shl_t *h, const char *s, short t, void *v) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The shl_findsym() call obtains the address of an exported 
	symbol from a shared library.  This HP-UX shared library
	specific functionality is not portable to open systems.  
	See shl_load(3X). */

#endif  /* _APEX_SOURCE */
 return(0); }


int shl_definesym( const char *a, short b, long c, int d ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(d); }

int shl_getsymbols( shl_t a, short b, int c, void *(*e)(), 
	struct shl_symbol **f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(c); } 


int shl_unload( shl_t handle ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The shl_unload() call is used to detach a shared library from 
	the process.  This HP-UX shared library specific functionality
	is not portable to open systems.  See shl_load(3X). */

#endif  /* _APEX_SOURCE */
 return(0); }

int shl_get( int index, struct shl_descriptor **des) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The shl_get() call returns information about currently 
	loaded shared libraries.  This HP-UX shared library
	specific functionality is not portable to open systems.  
	See shl_load(3X). */

#endif  /* _APEX_SOURCE */
 return(0); }

int shl_gethandle( shl_t a, struct shl_descriptor **b ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }



#include <mntent.h>

/* ACCT(2) */
int	acct(char *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The acct() call is used to enable or disable process accounting.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }


#ifdef AUDIT
/* AUDCTL(2) */
int	audctl (int c, char *cp, char *np, mode_t m) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The audctl() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (c); }

/* AUDSWITCH(2) */
int	audswitch (int a) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The audswitch() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (a); }

/* AUDWRITE(2) */
int	audwrite (const struct self_audit_rec *audrec_p) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The audwrite() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

#endif /* AUDIT */



/* BRK(2) */
int	brk(const void *e ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	Use malloc(). */

#endif  /* _APEX_SOURCE */
 return (0); }

#ifdef _CLASSIC_XOPEN_TYPES
char *	sbrk(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	Use malloc(). */

#endif  /* _APEX_SOURCE */
 return (""); }

#else /* not _CLASSIC_XOPEN_TYPES */
void *	sbrk(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	Use malloc(). */

#endif  /* _APEX_SOURCE */
 return ((void *) ""); }

#endif /* not _CLASSIC_XOPEN_TYPES */
/* CHMOD(2) */
int	fchmod(int f, mode_t m) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (m); }

/* CHOWN(2) */
int	fchown(int f, uid_t o, gid_t g) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (o); }

/* CLEARENV(3C) */
int	clearenv(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* CTYPE(3C) */
char	_ctype[129];
char	_ctype2[129];

#if defined(DUX) || defined(DISKLESS)
/* CNODEID(2) */
cnode_t	cnodeid(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The cnodeid() call is part of the HP-UX Diskless Cluster
	software.  Open systems will use a different implementation
	for diskless systems.  That implementation is not fully
	defined at this time.  */

#endif  /* _APEX_SOURCE */
return((cnode_t)0); }

/* CNODES(2) */
int	cnodes(cnode_t *b ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The cnodes() call is part of the HP-UX Diskless Cluster
	software.  Open systems will use a different implementation
	for diskless systems.  That implementation is not fully
	defined at this time.  */

#endif  /* _APEX_SOURCE */
 return(0); }

#endif /* DUX/DISKLESS */

/* FCHDIR(2) */
int     fchdir(int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }


/* FSCTL(2) */
int fsctl(int fildes, int c, char *outbuf, int len) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The fsctl() call is an HP-UX specific call to read file system
	specific information about cdfs type file systems (cdroms).
	This functionality is not portable to open systems.  See
	statfs(2).  */

#endif  /* _APEX_SOURCE */
return 0;}


/* FTIME(2) */
int	ftime(struct timeb *tp ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The ftime() call returns the time and date.  Use time(). */

#endif  /* _APEX_SOURCE */
 return(0); }


#ifdef ACLS
/* GETACCESS(2) */
int	getaccess (char *p, int u, int n, int g[], void *l, void *pr) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The getaccess() call is an HP-UX specific call to check the 
	access rights to a file using the user id specified.  This 
	functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (u); }

/* GETACL(2) */
int	getacl (const char *p, int n, struct acl_entry a[]) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The getacl() call will have an open systems equivalent, but it
	is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return (n); }

int	fgetacl (int f, int n, struct acl_entry a[]) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The chownacl() call will have an open systems equivalent, but
	it is not fully defined at this time.  See getacl(2).*/

#endif  /* _APEX_SOURCE */
 return (n); }

#endif /* ACLS */

#ifdef AUDIT
/* GETAUDID(2) */
int	getaudid(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getaudid() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

/* GETAUDPROC(2) */
int	getaudproc(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getaudproc() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

#endif /* AUDIT */

#ifdef AES
/* GETCLOCK(3C) */
#include <sys/timers.h>
int	getclock(int c, struct timespec *tp) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }
#endif /* AES */


/* GETDATE(3C) */
struct tm *	getdate(const char *s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getdate() call is an HP-UX specific call to convert a user
	formatted date and time to a tm structure.  This functionality
	is not portable to open systems.  */

#endif  /* _APEX_SOURCE */
 return (struct tm *)0; }

int	getdate_err;
#if defined(DUX) || defined(DISKLESS)
/* GETCONTEXT(2) */
int	getcontext(char *c, size_t l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The getcontext() call is part of the HP-UX Diskless Cluster
	software.  Open systems will use a different implementation
	for diskless systems.  That implementation is not fully
	defined at this time.  */

#endif  /* _APEX_SOURCE */
 return(0); }

#endif /* DUX/DISKLESS */

/* GETDIRENTRIES(2) */
int	getdirentries(int f, char *b, int n, long *p ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getdirentries() call is used to read directories in a 
	file system independent format.  It is not portable to 
	open systems.  Use the routines described in directory(3C)
	to access directories.  */

#endif  /* _APEX_SOURCE */
 return(0); }


#ifdef AUDIT
/* GETEVENT(2) */
int	getevent (struct aud_type *as, struct aud_event_tbl *ae	) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getevent() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

#endif /* AUDIT */

/* GETHOSTNAME(2) */
int	gethostname(char h[], unsigned s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The gethostname() call returns the host name of the
	system it is running on.  Use uname(). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* GETITIMER(2) */
int	getitimer(int w, struct itimerval *v ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getitimer() call returns the current value of an
	interval timer.  This functionality is not portable
	to open systems.  */

#endif  /* _APEX_SOURCE */
 return (w); }

int	setitimer(int w, const struct itimerval *v, struct itimerval *o ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The setitimer() call is used to set and start an interval 
	timer.  This functionality is not portable to open systems.
	The alarm() call provides similar functionality portable
	to open systems.  See getitimer(2). */

#endif  /* _APEX_SOURCE */
 return (w); }

/* GETMNTENT(3X) */
int	addmntent(FILE *f, struct mntent *m) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The addmntent() call is used to add mounted file systems
	information.  This functionality is not portable to
	open systems.  See getmntent(3X). */

#endif  /* _APEX_SOURCE */
 return 0; }

/* GETOPT(3C) */
int	optopt; /* SVID 3 */
/* GETSUBOPT(3C) */
int	getsubopt(char **o, char *t[], char **v ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (0); }

/* GETPID(2) */
int	getpgrp2(pid_t p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getpgrp2() call is an HP-UX specific call to get the
	process group ID of a specified process.  This functionality
	is not portable to open systems.

	To get the process group ID of the calling process use the
	getpgrp() call.  See getpid(2).  */

#endif  /* _APEX_SOURCE */
 return (0); }

/* GETPRIORITY(2) */
int	getpriority(int which, int who) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int	setpriority(int which, int who, int priority) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

/* GETPRIVGRP(2) */
int	getprivgrp(struct privgrp_map g[] ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getprivgrp() call is an HP-UX specific call to get
	privileged group attributes.  This functionality is not
	portable to open systems.  */

#endif  /* _APEX_SOURCE */
 return (0); }

int	setprivgrp(gid_t g, const int *m ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The setprivgrp() call is an HP-UX specific call to set
	privileged group attributes.  This functionality is not
	portable to open systems.  See getprivgrp(2).  */

#endif  /* _APEX_SOURCE */
 return (0); }

/* GETTIMEOFDAY(2) */
int	gettimeofday(struct timeval *t, struct timezone *z ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The gettimeofday() call returns the time of day and the
	timezone information.  It is not portable to open systems.
	Use time() to read the current time, then pass that value 
	to the gmtime() call.  It will return information similar
	to gettimeofday().  See ctime(3C) and time(2). */

#endif  /* _APEX_SOURCE */
 return (0); }

int	settimeofday(const struct timeval *t, const struct timezone *z )
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The settimeofday() call is used to set the system time.
	This functionality is not portable to open systems. 
	See gettimeofday(2). */

#endif  /* _APEX_SOURCE */
 return (0); }

#ifdef AES
/* GETTIMER(3C) */
int	gettimer(timer_t a, struct itimerspec *b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }
#endif /* AES */

/* ICONV(3C) */
int	iconvsize(const char *t, const char *f) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The iconvsize() call is obsolete.  See iconv(3C). */

#endif  /* _APEX_SOURCE */
return 0;}

iconvd 	iconvopen(const char *t, const char *f, unsigned char *tb, 
		int d1, int d2)
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The iconvopen() call is obsolescent.  It will be replaced by
	the iconv_open() call on systems that implement the X/Open XPG4
	standard.*/

#endif  /* _APEX_SOURCE */
return 0;}

int	iconvclose(iconvd cd) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The iconvclose() call is obsolescent.  It will be replaced by
	the iconv_close() call on systems that implement the X/Open
	XPG4 standard.*/

#endif  /* _APEX_SOURCE */
return 0;}

int	iconvlock(iconvd cd, int d, int l, char *s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The iconvlock() call is obsolete.  See iconv(3C). */

#endif  /* _APEX_SOURCE */
return 0;}

int	(*__iconv[1])();
int	(*__iconv1[1])();
int	(*__iconv2[1])();
/* IOCTL(2) */
	/*VARARGS2*/
int	ioctl(int f, int r, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The ioctl() call is used to control character devices.
	The device drivers vary on different systems.  While the 
	ioctl() call is not standards based, it is available 
	on most open systems platforms. The parameters for 
	the ioctl()	call should be carefully reviewed for 
	differences.   */

#endif  /* _APEX_SOURCE */
 return (f); }

/* LDCVT(3C) */
char *	_ldecvt(long_double v, size_t n, int *d, int *s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The _ldecvt() call is an HP-UX specific call that converts a
	long_double structure data type to a string.  This call is not
	portable to open systems.  The ANSI mode C compiler (cc -Aa ...)
	supports a long double data type.  This data type used with
	the sprintf() call is similar in function to the _ldecvt()
	call.  See printf(3C).  */

#endif  /* _APEX_SOURCE */
return "";}

char *	_ldfcvt(long_double v, size_t n, int *d, int *s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The _ldfcvt() call is an HP-UX specific call that converts a
	long_double structure data type to a string.  This call is not
	portable to open systems.  The ANSI mode C compiler (cc -Aa ...)
	supports a long double data type.  This data type used with
	the sprintf() call is similar in function to the _ldfcvt()
	call.  See printf(3C).  */

#endif  /* _APEX_SOURCE */
return "";}

char *	_ldgcvt(long_double v, size_t n, char *b) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The _ldgcvt() call is an HP-UX specific call that converts a
	long_double structure data type to a string.  This call is not
	portable to open systems.  The ANSI mode C compiler (cc -Aa ...)
	supports a long double data type.  This data type used with
	the sprintf() call is similar in function to the _ldgcvt()
	call.  See printf(3C).  */

#endif  /* _APEX_SOURCE */
return "";}

/* LOCKF(2) */
int	lockf(int f, int u, long s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The lockf() call provides semaphores and record locking
	on files.   Use fcntl(). */

#endif  /* _APEX_SOURCE */
 return (f); }

/* LOGNAME(3C) */
char *	logname(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The logname() call is used to get the login name of the 
	user.  Use getlogin(). */

#endif  /* _APEX_SOURCE */
return "";}

/* MEMORYMAP(3C) */
void	memorymap(int a) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return; }

/* MKNOD(2) */
int	mknod(const char *n, mode_t m, dev_t d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The mknod() call is used to make a directory or file.
	Use mkdir(), mkfifo(), or creat(). */

#endif  /* _APEX_SOURCE */
 return (d); }

int	mkrnod(const char *n, mode_t m, dev_t d, cnode_t c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The mkrnod() call is part of the HP-UX Diskless Cluster
	software.  See the mknod(2) HP-UX manual page.  Open systems
	will use a different implementation for diskless systems.
	That implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return (d); }

#ifdef AES
/* MKTIMER(3C) */
timer_t	mktimer(int clock_type, int notify_type, void *itimercbp) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }
#endif /* AES */

/* MMAP(2) */
#include <sys/mman.h>
caddr_t	mmap(const caddr_t a, size_t b, int c, int d, int e, off_t f) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 caddr_t x; return(x);}

int	munmap(caddr_t addr, size_t len) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
return len;}

int	madvise(const caddr_t addr, size_t len, int behav) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int	msem_remove(msemaphore *a) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

msemaphore *msem_init(msemaphore *a, int b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 msemaphore *x; return(x); }

int	msem_lock(msemaphore *a, int b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int	msem_unlock(msemaphore *a, int b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int	mprotect(const caddr_t a, size_t b, int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int	msync(const caddr_t a, size_t b, int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

int	cachectl(int a, char *b, int c) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The cachectl() call is hardware specific to the HP9000 Series
	300 and Series 400 systems.  It performs a hardware cache
	flush.  This functionality is not portable to open systems at 
	this time.  */

#endif  /* _APEX_SOURCE */
return a;}

/* MOUNT(2) */
int	mount(char *s, char *d, int r) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The mount() call is used to mount a file system for access.
	While this call is not standards based, it is available
	on most open systems platforms.  Please refer to the
	appropriate documentation for your system for specific
	information about this call.  */

#endif  /* _APEX_SOURCE */
 return (r); }

/* PLOCK(2) */
int	plock(int o) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The plock() call is used to lock process, text, or data
	in memory.  This functionality is not portable to open
	systems. */

#endif  /* _APEX_SOURCE */
 return (o); }

/* POLL(2) */
#include <poll.h>
int	poll(struct pollfd fds[], int nfds, int timeout) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

/* GETRUSAGE(2) */
#include <sys/resource.h>
int	getrusage(int a, struct rusage *b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

/* PREALLOC(2) */
int	prealloc(int f, off_t s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The prealloc() call is an HP-UX specific call to allocate disk
	space for a file and fill it with zeros.  This functionality
	is not portable to open systems.

	To accomplish what the prealloc() call does do the following:
		allocate a buffer
		fill the buffer with zeros
		call write() repeatedly to write the buffer to the file 
			until the desired number of bytes have been written
		call fsync() to write the file to the disk
		call lseek to move the file pointer to zero */

#endif  /* _APEX_SOURCE */
 return (f); }

/* PROFIL(2) */
void	profil(const void *b, size_t s, size_t o, int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The profil() call controls execution time profiling.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
}

/* PTRACE(2) */
int	ptrace(int r, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The ptrace() call provides the means by which a process 
	can control the execution of another process.  This
	call is highy hardware dependent and is not portable
	to open systems.  It is primarily used to implement
	debuggers. */

#endif  /* _APEX_SOURCE */
 return (r); }

/* PTSNAME(3) */
char *	ptsname(int fdm) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (""); }

/* READ(2) */
ssize_t	readv(int f, const struct iovec *i, size_t v) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The readv() call reads data from a file descriptor into
	a set of buffers.  This functionality is not portable
	to open systems.  Use read().  See read(2).  */

#endif  /* _APEX_SOURCE */
 return (f); }

/* READLINK(2) */
#include <symlink.h>
#ifdef _AES_SOURCE
int	readlink(const char *p, char *b, int s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#else /* _AES_SOURCE */
int	readlink(const char *p, char *b, size_t s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

#endif /* _AES_SOURCE */
/* Undocumented sgetl() and sputl() declared in <sys/unistd.h> */
long	sgetl(const char *p) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The sgetl() call is an HP-UX specific call to read long integer
	data from a char buffer.  This functionality is not portable to 
	open systems.  See sputl(3X). */

#endif  /* _APEX_SOURCE */
 return ((long)0); }

void	sputl(long i, char *p) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The sputl() call is an HP-UX specific call to write long integer
	data to a char buffer.  This functionality is not portable to 
	open systems. */

#endif  /* _APEX_SOURCE */
 }

/* Undocumented hidecdf() declared in <sys/unistd.h> */
char *	hidecdf(const char *a, char *c, size_t s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The hidecdf() call is part of the HP-UX Diskless Cluster
	software.  See the getcdf(3C) HP-UX manual page.  Open systems
	will use a different implementation for diskless systems.
	That implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return(c); }

/* REBOOT(2) */
	/*VARARGS1*/
int	reboot(int h, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The reboot() call causes the system to reboot.  This
	functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
return (0); }

#ifdef AES
/* RELTIMER */
int	reltimer(timer_t a, struct itimerspec *b, struct itimerspec *c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* RMTIMER(3C) */
int	rmtimer(timer_t a) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }
#endif /* AES */

/* RTPRIO(2) */
int	rtprio(pid_t p, int r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The rtprio() call is an HP-UX specific call used to change or
	read the real time scheduling priority of a process.  This 
	functionality is not portable to open systems at this time.  */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SELECT(2) */
int	select(size_t n, int *r, int *w, int *e, const struct timeval *t )
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The select() call provides synchronous I/O multiplexing.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0);}

#ifdef AES
/* SETCLOCK(3C) */
int	setclock(int a, struct timespec *b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }
#endif /* AES */

/* SEMCTL(2) */
	/*VARARGS3*/
int	semctl(int i, int n, int c, ... ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }


#ifdef ACLS
/* SETACL(2) */
int	setacl (const char *p, size_t n, const struct acl_entry a[] )
		{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The setacl() call will have an open systems equivalent, but it
	is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return (n); }

int	fsetacl (int f, size_t n, const struct acl_entry a[] ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The chownacl() call will have an open systems equivalent, but
	it is not fully defined at this time.  See setacl(2).  */

#endif  /* _APEX_SOURCE */
 return (n); }

#endif /* ACLS */

#ifdef AUDIT
/* SETAUDID(2) */
int	setaudid (aid_t a ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The setaudid() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SETAUDPROC(2) */
int	setaudproc(int aflag) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The setaudproc() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SETEVENT(2) */
int	setevent (const struct aud_type *as, const struct aud_event_tbl *ae)
		{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The setevent() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0);}

#endif /* AUDIT */

/* SETGROUPS(2) */
int	setgroups(int n, gid_t g[]  ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (n); }

/* SETHOSTNAME(2) */
int	sethostname(const char *n, size_t l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sethostname() call is used to set the system name.
	Use setuname().  See uname(2). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SETLOCALE(3C) */
struct locale_data * getlocale(int type ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getlocale call is an HP-UX specific call to query the
	locale of a program.  It is not available on open systems.

	The functionality provided by calling getlocale() with the
	type parameter set to "LOCALE_STATUS" can be obtained by
	repeated calls to the setlocale() function with the "locale"
	parameter set to "NULL".  The desired information is contained
	in the string returned by setlocale().

	To get information about errors similar to calling getlocale()
	with the "type" parameter set to "ERROR_STATUS", call
	setlocale() with the "locale" parameter set to "LC_ALL" and
	then call it repeatedly with each of the other categories.  A
	comparision of the individual fields of the string returned
	from the setlocale() call with "LC_ALL" with each of the
	respective individual categories will show if a category setting 
	is in error.  

	See setlocale(3C).  */

#endif  /* _APEX_SOURCE */
 struct locale_data l; return(&l); }

/* SETPGRP(2) */
int	setpgrp2(pid_t p1, pid_t p2 ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use setpgid(). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SETRESUID(2) */
int	setresuid (uid_t r, uid_t e, uid_t s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The setresuid() call is an HP-UX specific call to set the
	real, effective, and saved user IDs.  This functionality is
	not portable to open systems.  The setuid(2) call provides 
	similar functionality.  */

#endif  /* _APEX_SOURCE */
 return (0); }

int	setresgid (gid_t r, gid_t e, gid_t s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The setresgid() call is an HP-UX specific call to set the
	real, effective, and saved group IDs.  This functionality is
	not portable to open systems.  The getuid(2) call provides 
	similar functionality.  See setresuid(2).  */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SETSID(2) */
pid_t	setpgrp(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The setpgrp() call is used to create a session and 
	set the process group ID.  Use setsid().  */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SIGBLOCK(2) */
long	sigblock(long m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sigblock() call is used to specify signals to be 
	blocked.  Use sigprocmask().  */

#endif  /* _APEX_SOURCE */
 return (m); }

/* SIGPAUSE(2) */
long	sigpause(long s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sigpause() call causes the calling process to be
	suspended until it receives an unblocked signal.  The
	sigsuspend() call provides similar functionality. 
	See sigset(2V). */

#endif  /* _APEX_SOURCE */
 return (s); }

/* SIGSET(2V) */
void    (*sigset(int sig, void (*func)(int)))(int) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sigset() call allows the calling process to choose 
	how to handle the receipt of a specific signal.  Use
	sigaction().  */

#endif  /* _APEX_SOURCE */
return (void (*)())0;}

int	sighold(int sig) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sighold() call is used to block a specified signal.  
	Use sigprocmask(). See sigset(2V). */

#endif  /* _APEX_SOURCE */
return sig;}

int	sigrelse(int sig) { 
#ifdef _APEX_SOURCE
	/* APEX STD [HPUX->OSF1,HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sigrelse() call is used to unblock a specified signal.
	Use sigprocmask().  See sigset(2V). */
#endif  /* _APEX_SOURCE */
return sig;}

int	sigignore(int sig) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sigignore() call causes a specified signal to be 
	ignored by the process.  Use sigaction(). */

#endif  /* _APEX_SOURCE */
return sig;}

/* SIGSETMASK(2) */
long	sigsetmask(long m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sigsetmask() call is used to set the current signal
	mask.  Use sigprocmask(). */

#endif  /* _APEX_SOURCE */
 return (m); }

/* SIGSPACE(2) */
ssize_t	sigspace(size_t s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The sigspace() call is an HP-UX specific call to allocate
	guaranteed stack space for use during signal processing.  This
	functionality is inherently non-portable.  Therefore, it's 
	use is discouraged.  */

#endif  /* _APEX_SOURCE */
 return ((ssize_t) 0); }

/* SIGSTACK(2) */
int	sigstack(const struct sigstack *ss, struct sigstack *oss) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sigstack() call is used to indicate to the system an
	area of its address space to be used for processing a signal.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return 0; }

/* SIGVECTOR(2) */
int	sigvector(int s, const struct sigvec *v, struct sigvec *o )
		{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The sigvector() call is used to examine or change signal
	action.  Use sigaction().  See bsdproc(2) */

#endif  /* _APEX_SOURCE */
 return (s); }

/* STAT(2) */
int	lstat(const char *p, struct stat *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* STATFS(2) */
int	statfs(const char *s, struct statfs *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The statfs() call returns information about a mounted
	filesystem.  This functionality is not portable to 
	open systems.  See ustat(2). */

#endif  /* _APEX_SOURCE */
 return (0); }

int	fstatfs(int f, struct statfs *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The fstatfs() call returns information about a mounted
	filesystem.  This functionality is not portable to 
	open systems.  See ustat(2). */

#endif  /* _APEX_SOURCE */
 return (f); }

/* STATFSDEV(3C) */
int	statfsdev(const char *p, struct statfs *b) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	Use the statfs() call with path = any file on the file system
	of interest.  The statfsdev() call is HP-UX specific with no 
	direct open systems equivalent.  */

#endif  /* _APEX_SOURCE */
return 0;}

int	fstatfsdev(int f, struct statfs *b) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	Use the fstatfs().  The fstatfsdev() call is HP-UX specific
	with no open systems equivalent.  See statfsdev(2). */

#endif  /* _APEX_SOURCE */
return 0;}

/* STIME(2) */
int	stime(const time_t *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The stime() call is used to set the time and date.  This
	functionality is not portable to open systems.  */

#endif  /* _APEX_SOURCE */
 return (0); }

/* STRTOLD(3C) */
long_double	strtold(const char *s, char **p) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use sscanf with the %Le format specification.  See scanf(3C). */

#endif  /* _APEX_SOURCE */
 long_double x; return(x);}

/* STTY(2) */
/* in lieu of including <sgtty.h>, because of redefinition of B1200, etc. */
struct sgttyb {
	char	sg_ispeed;		/* input speed */
	char	sg_ospeed;		/* output speed */
	char	sg_erase;		/* erase character */
	char	sg_kill;		/* kill character */
	int	sg_flags;		/* mode flags */
};

int	stty(int f, const struct sgttyb *a ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	Use the TCSETA ioctl() call as described in termio(7). */

#endif  /* _APEX_SOURCE */
 return (0); }

int	gtty(int f, struct sgttyb *a ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	Use the TCGETA ioctl() call as described in termio(7). 
	See stty(2) */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SWAPON(2) */
int	swapon(const char *s, ... ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The swapon() call adds swap space for use by the
	paging/swapping system.  This functionality is
	not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SYMLINK(2) */
int	symlink(const char *n1, const char *n2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

/* SYNC(2) */
void	sync(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The sync() call causes all disk buffers in memory to be
	written to the disk.  This functionality is not portable
	to open systems.  */

#endif  /* _APEX_SOURCE */
}

void	lsync(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The lsync() call is part of the HP-UX Diskless Cluster
	software.  See the sync(2) HP-UX manual page.  Open systems will
	use a different implementation for diskless systems.  That
	implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
}

/* SYSLOG(3C) */
/* VARARGS2 */
int	syslog(int p, char *m, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The syslog() call is derived from the BSD system.  It writes
	messages onto the system log maintained by syslogd(1M).  This
	call is not portable to open systems.  See syslog(3C). */

#endif  /* _APEX_SOURCE */
return 0;}

int 	openlog(char *id, int l, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The openlog() call is derived from the BSD system.  It is used
	to initialize the system log file maintained by syslogd(1M).  
	This call is not portable to open systems.  See syslog(3C). */

#endif  /* _APEX_SOURCE */
return 0;}

int	closelog(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The closelog() call is derived from the BSD system.  It is used
	to close the system log file maintained by syslogd(1M).  This
	call is not portable to open systems.  See syslog(3C). */

#endif  /* _APEX_SOURCE */
return 0;}

int	setlogmask(int m) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The setlogmask() call is derived from the BSD system.  It is 
	used to set the log priority mask for the system log file 
	maintained by syslogd(1M).  This call is not portable to 
	open systems.  See syslog(3C). */

#endif  /* _APEX_SOURCE */
return 0;}

/* TRUNCATE(2) */
int	truncate(const char *p, off_t l ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

int	ftruncate(int f, off_t l ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (f); }

/* UMOUNT(2) */
int	umount(char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The umount() call is used to dismount a mounted file
	system.  While this call is not standards based, it is
	available on most open systems platforms.  Please refer
	to the appropriate documentation for your system for 
	specific information about this call.  See mount(2). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* USTAT(2) */
int	ustat(dev_t d, struct ustat *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The ustat() call returns information about a mounted
	file system.  This functionality is not portable to
	open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

/* VFORK(2) */
#ifdef _CLASSIC_ID_TYPES
int	vfork(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The vfork() call is used to create a new process in
	a virtual memory efficient way.  Use fork(). */

#endif  /* _APEX_SOURCE */
 return (0); }

#else
pid_t	vfork(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The vfork() call is used to create a new process in
	a virtual memory efficient way.  Use fork(). */

#endif  /* _APEX_SOURCE */
 return ((pid_t) 0); }

#endif /* _CLASSIC_ID_TYPES */
/* VFSMOUNT(2) */
int	vfsmount(int t, char *d, int f, caddr_t c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use mount(). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* VHANGUP(2) */
int	vhangup(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

/* WAIT(2) */
pid_t	wait3(int *s, int o, int *r ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The wait3() call causes the calling process to wait
	for termination of one of it's immediate children.
	Use waitpid() with the value of pid set to zero. 
	See wait(2). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* WORDEXP(3C) */
#include <wordexp.h>
int	wordexp ( const char *a, wordexp_t *b, int c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }

void	wordfree ( wordexp_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->POSIX.2,XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return; }

/* WRITE(2) */
ssize_t	writev(int f, const struct iovec *io, size_t iovcnt) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The writev() call writes data from a set of buffers to a file
	descriptor.  This functionality is not portable to open
	systems.  Use write().  See write(2).  */

#endif  /* _APEX_SOURCE */
 return 0; }

/* A64L(3C) */
long	a64l(const char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The a64l() call converts a base-64 ASCII string to a long integer.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0L); }

char *	l64a(long l ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The l64a() call converts a long integer to a base-64 ASCII string.
	This functionality is not portable to open systems.  See a64l(3C).  */

#endif  /* _APEX_SOURCE */
 return (""); }


#ifdef ACLS
/* ACLTOSTR(3C) */
char *	acltostr (int n, struct acl_entry a[], int f	) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The acltostr() call will have an open systems equivalent, but
	it is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return (""); }

#endif /* ACLS */

/* ASSERT(3X) */
void	__assert(char *a, char *f, int n) { 
#ifdef _APEX_SOURCE
	/* APEX STD [HPUX->ANSIC,POSIX.1,FIPS151_1,OSF_AES,OSF1,HPUX,XPG4,XPG3] */
#endif  /* _APEX_SOURCE */
}

/* CATGETMSG(3C) */
char *	catgetmsg(nl_catd c, int s, int m, char *b, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use catgets(). */

#endif  /* _APEX_SOURCE */
 return(b); }

/* CATREAD(3C) NLS */
	/*VARARGS5*/
int	catread(int f, int s, int m, char *b, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The catread() call is part of an obsolete HP specific Native
	Language Support system.  This function reads a message from a
	message catalog.  The catgets() function provides similar
	functionality and is portable to open systems.  For best
	portability use the set of functions described in hpnls(5).
	See hpnls(5) and the Native Language Support User's Guide.  */

#endif  /* _APEX_SOURCE */
 return (f); }


#ifdef ACLS
/* CHOWNACL(3C) */
void	chownacl (int n, struct acl_entry a[], int ou, int og, int nu, int ng )
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The chownacl() call will have an open systems equivalent, but
	it is not fully defined at this time.  Please see the relevant
	documentation for a current explanation.  */

#endif  /* _APEX_SOURCE */
}


/* CPACL(3C) */
int	cpacl (const char *f, const char *t, int fm, int fu, int fg, 
		int tu, int tg	) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The cpacl() call will have an open systems equivalent, but it
	is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return (fm); }

int	fcpacl (int f, int t, int fm, int fu, int fg, int tu, int tg) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The fcpacl() call will have an open systems equivalent, but it
	is not fully defined at this time.  See cpacl(3C).  */

#endif  /* _APEX_SOURCE */
 return (fm); }

#endif /* ACLS */

/* CTIME(3C) */
char *	nl_cxtime(time_t *c, char *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strftime(). */

#endif  /* _APEX_SOURCE */
 return (""); }

char *	nl_ctime(time_t *c, char *f, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strftime(). */

#endif  /* _APEX_SOURCE */
 return (""); }

char *	nl_ascxtime(struct tm *t, char *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strftime(). */

#endif  /* _APEX_SOURCE */
 return (""); }

char *	nl_asctime(struct tm *t, char *f, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strftime(). */

#endif  /* _APEX_SOURCE */
 return (""); }

/* CVTNUM(3C) */
int	cvtnum(unsigned char *s, unsigned char *d, int t, int r,
       	   unsigned char **p, int *i ) 
	   { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The cvtnum() call is specific to the HP9000 Series 300 and
	Series 400 hardware systems.  The cvtnum() call converts a
	string to a number in one of four floating point formats for
	use with the MC68881 Floating-Point Coprocessor present in
	those systems.  This call is not portable to open systems.  */

#endif  /* _APEX_SOURCE */
 return (0); }

/* DEVNM(3C) */
#include <devnm.h>
int 	devnm(ushort t, dev_t id, char *p, size_t l, int c) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (0); }

/* DATALOCK(3C) */
int	datalock(size_t d, size_t s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The datalock() call locks a process into memory after
	allocating data and stack space.  This is an HP-UX specific
	function is not portable to open systems.  Similar
	functionality can be obtained by calling malloc(3C) to
	allocate more memory followed by a call to plock(2) to lock
	the process in memory.  */

#endif  /* _APEX_SOURCE */
 return (0); }

/* DIAL(3C) */
int	dial(CALL c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The dial() call is an HP-UX specific call used to establish an
	outgoing terminal line connection.  This functionality is not
	portable to open systems.  */

#endif  /* _APEX_SOURCE */
 return (0); }

void	undial(int f) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The undial() call is an HP-UX specific call used to terminate an
	outgoing terminal line connection.  This functionality is not
	portable to open systems.  See dial(3C). */

#endif  /* _APEX_SOURCE */
}

/* ECVT(3C) */
static char	fcvt_buf[1];
char *		ecvt(double v, size_t n, int *d, int *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The ecvt() call converts a floating point number to a string.
	This call is not portable to open systems.  The sprintf() 
	call provides similar functionality.  See printf(3C). */

#endif  /* _APEX_SOURCE */
 return (""); }

const char *	fcvt(double v, size_t n, int *d, int *s ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The fcvt() call converts a floating point number to a string.
	This call is not portable to open systems.  The sprintf() 
	call provides similar functionality.  See printf(3C). */

#endif  /* _APEX_SOURCE */
 return (fcvt_buf);}

char *		gcvt(double v, size_t n, char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The gcvt() call converts a floating point number to a string
	using the correct radix character for the current NLS
	environment.  This call is not portable to open systems.  The
	setlocale() call used with the sprintf() call provides similar
	functionality.  See setlocale(3C) and printf(3C).  */

#endif  /* _APEX_SOURCE */
 return (b); }

char *		nl_gcvt(double v, size_t n, char *b, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The nl_gcvt() call converts a floating point number to a
	string.  This call is not portable to open systems.  The 
	setlocale() and sprintf() calls together provide similar 
	functionality.  See setlocale(3C) and printf(3C).  */

#endif  /* _APEX_SOURCE */
 return (b); }

/* END(3C) */
int	end; 
int	etext; 
int	edata;
int 	_end;
int 	_etext;
int 	_edata;
/* GETSPWENT(3C) */
void	endspwent(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The endspwent() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. See 
	getspwent(3C). */

#endif  /* _APEX_SOURCE */
}

struct s_passwd *fgetspwent (FILE *f) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The fgetspwent() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. See 
	getspwent(3C). */

#endif  /* _APEX_SOURCE */
static struct s_passwd x; return (& x);}

/* FPTRAP(3X) */
/* FREXP(3C) */
double	frexp(double x, int *e ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (x); }

double	ldexp(double v, int e) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (v); }

double	modf(double v, double *i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,POSIX.1,XPG3,XPG4,OSF_AES,FIPS151_1,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (v); }


/* FTW(3C) */
int	nftw(const char *p, int (*f)(const char *, const struct stat *,
	     int, struct FTW), int n, int m) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (n); }

#if defined(DUX) || defined(DISKLESS)
int	ftwh(const char *p, int (*f)(const char *, const struct stat *,
	    int), int d) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The ftwh() call is part of the HP-UX Diskless Cluster
	software.  See the ftw(3C) manual page.  Open systems will use a
	different implementation for diskless systems.  That
	implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return (d); }

int	nftwh(const char *p, int (*f)(const char *, const struct stat *,
	     int, struct FTW), int n, int m) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (n); }

/* GETCCENT(3C) */
struct cct_entry	*getccent(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The getccent() call is part of the HP-UX Diskless Cluster
	software.  Open systems will use a different implementation
	for diskless systems.  That implementation is not fully
	defined at this time.  */

#endif  /* _APEX_SOURCE */
struct cct_entry c; return(&c); }

struct cct_entry	*getcccid(cnode_t c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The getcccid() call is part of the HP-UX Diskless Cluster
	software.  See getccent(3C).  Open systems will use a
	different implementation for diskless systems.  That
	implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
struct cct_entry e; return(&e);}

struct cct_entry	*getccnam(const char *n ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The getccnam() call is part of the HP-UX Diskless Cluster
	software.  See getccent(3C).  Open systems will use a
	different implementation for diskless systems.  That
	implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
struct cct_entry c; return(&c); }

void	setccent(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The setccent() call is part of the HP-UX Diskless Cluster
	software.  See getccent(3C).  Open systems will use a
	different implementation for diskless systems.  That
	implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
}

void	endccent(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The endccent() call is part of the HP-UX Diskless Cluster
	software.  See getccent(3C).  Open systems will use a
	different implementation for diskless systems.  That
	implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
}

struct cct_entry	*fgetccent(FILE *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The fgetccent() call is part of the HP-UX Diskless Cluster
	software.  See getccent(3C).  Open systems will use a
	different implementation for diskless systems.  That
	implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
struct cct_entry c; return(&c);}

/* GETCDF(3C) */
char	*getcdf(const char *p, char *b, size_t s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The getcdf() call is part of the HP-UX Diskless Cluster
	software.  Open systems will use a different implementation
	for diskless systems.  That implementation is not fully
	defined at this time.  See the appropriate documentation for
	more information.  */

#endif  /* _APEX_SOURCE */
 char *x; return (x); }

/* GETDISKBYNAME(3C) */
struct disktab	*getdiskbyname(char *s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getdiskbyname() call returns disk description data as
	read from the /etc/disktab file.  This functionality is not
	portable to open systems.  There is no open systems 
	equivalent. */

#endif  /* _APEX_SOURCE */
 return((struct disktab *) 0); }

/* GETCWD(3C) */
char *	gethcwd(char *b, size_t s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The gethcwd() call is part of the HP-UX Diskless Cluster
	software.  See the getcwd(3C) HP-UX manual page.  Open systems
	will use a different implementation for diskless systems.
	That implementation is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return (b); }

#endif /* DUX/DISKLESS */
/* GETGRENT(3C) */
struct group *	getgrent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The getgrent() call is used to get login group file
	entries.  This functionality is not portable to open
	systems.  See getgrnam(3C) for similar portable 
	functionality. */

#endif  /* _APEX_SOURCE */
 static struct group x; return (&x); }

void	setgrent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The setgrent() call is used rewind the group entry file.
	This functionality is not portable to open systems.  See 
	getgrent(3C) for information on setgrent(). */

#endif  /* _APEX_SOURCE */
}

void	endgrent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The endgrent() call is used to get login group file
	entries.  This functionality is not portable to open
	systems.  See getgrent(3C) for information on endgrent().
	See getgrnam(3C) for similar portable functionality. */

#endif  /* _APEX_SOURCE */
}

struct group *	fgetgrent(FILE *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->OSF1] 
	Use the getgrent() mechanism to read entries in the /etc/group 
	database file. */

	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The fgetgrent() call is used to get login group file
	entries.  This functionality is not portable to open
	systems.  See getgrent(3C) for information on the
	fgetgrent() call.  See getgrnam(3C) for similar portable 
	functionality. */

#endif  /* _APEX_SOURCE */
 static struct group x; return (&x); }

/* GETMNTENT(3X) */
struct mntent *	getmntent(FILE *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The getmntent() call is used to get mounted file systems 
	data.  This functionality is not portable to open systems. */

	/* APEX HINT [HPUX->OSF1] 
	Use getfsent(). */

#endif  /* _APEX_SOURCE */
 struct mntent m; return (&m); }

char *	hasmntopt(struct mntent *m, const char *s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The hasmntopt() call is used to get information about
	mounted file systems.  This functionality is not portable 
	to open systems. See getmntent(3X). */

	/* APEX HINT [HPUX->OSF1] 
	The hasmntopt() call is used to get information about
	mounted file systems.  This functionality is not portable 
	to open systems.
	See getfsspec(), getfsfile(), getfstype() in the getfsent(3) 
	documentation.  */

#endif  /* _APEX_SOURCE */
 char *x; return(x); }

FILE *	setmntent(const char *s1, const char *s2) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The setmntent() call open a file system information file 
	and returns file systems information. This functionality 
	is not portable to open systems.   See getmntent(3X). */

	/* APEX HINT [HPUX->OSF1] 
	Use setfsent().  See getfsent(3X). */

#endif  /* _APEX_SOURCE */
 return(stdin); }

int	endmntent(FILE *f) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The endmntent() closes the file system information file.
	This functionality is not portable to open systems.  
	See getmntent(3X). */

	/* APEX HINT [HPUX->OSF1] 
	Use endfsent().  See getfsent(3X). */

#endif  /* _APEX_SOURCE */
 return(0); }

#ifdef _APEX_SOURCE
/* GETMSG(3C) NLS */
char *  getmsg(int f, int s, int m, char b[], int l) {
 /* APEX STD [HPUX->] */
    /* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1,HPUX]
    The getmsg() call is an obsolete HP-UX specific call used to 
	access message catalogs.  Use catgets(). */
 return (""); }
#endif  /* _APEX_SOURCE */


/* GETPASS(3C) */
char *	getpass(const char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return (x); }

/* GETPW(3C) */
int	getpw(int u, char *b ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use getpnam().  See getpwent(3C). */

#endif  /* _APEX_SOURCE */
 return (u); }

/* GETPWENT(3C) */
struct passwd *	getpwent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The getpwent() call is used to read passwd structures from the
	passwd file.  This call is not portable to open systems.  For
	portable access to password information use the getpwnam() or 
	getpwuid() calls.  See getpwent(3C).  */

#endif  /* _APEX_SOURCE */
 static struct passwd x; return (&x); }

void	setpwent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The setpwent() call is used to rewind the passwd file when it
	is being read via the getpwent() call.  This functionality is 
	not portable to open systems.  For portable access to password 
	information use the getpwnam() or getpwuid() calls.  See 
	getpwent(3C).  */

#endif  /* _APEX_SOURCE */
}

void	endpwent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The endpwent() call is used to terminate access to the passwd 
	file when it was being read via the getpwent() call.  This 
	functionality is not portable to open systems.  For portable 
	access to password information use the getpwnam() or getpwuid() 
	calls.  See getpwent(3C).  */

#endif  /* _APEX_SOURCE */
}

struct passwd *	fgetpwent(FILE *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The fgetpwent() call is used to read passwd structures from an 
	input stream.  This call is not portable to open systems.  For
	portable access to password information use the getpwnam() or 
	getpwuid() calls.  See getpwent(3C).  */

#endif  /* _APEX_SOURCE */
 static struct passwd x; return (&x); }


#ifdef ACLS
/* GETSPWENT(3C) */
struct s_passwd *getspwaid (int a) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getspwaid() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. See 
	getspwent(3C). */

#endif  /* _APEX_SOURCE */
 static struct s_passwd x; return (& x); }

struct s_passwd *getspwent (void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getspwent() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 static struct s_passwd x; return (& x); }

struct s_passwd *getspwnam (char *n) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getspwnam() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. See 
	getspwent(3C). */

#endif  /* _APEX_SOURCE */
 static struct s_passwd x; return (& x);}

/* GETSPWUID(3C) */
struct s_passwd *getspwuid (int u) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The getspwuid() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. See 
	getspwent(3C). */

#endif  /* _APEX_SOURCE */
 static struct s_passwd x; return (& x); }

#endif /* ACLS */

/* GETUSERSHELL(3C) */
char	*getusershell(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((char *) 0); }

void	setusershell(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}

void	endusershell(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
}


/* GETUT(3C) */
struct utmp *	getutent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getutent() call is used to access a utmp format file.
	This functionality is not portable to open systems.  See
	getut(3C). */

#endif  /* _APEX_SOURCE */
 static struct utmp x; return (&x); }

struct utmp *	getutid(struct utmp *i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getutid() call is used to access a utmp format file.
	This functionality is not portable to open systems.  See
	getut(3C). */

#endif  /* _APEX_SOURCE */
 return (i); }

struct utmp *	getutline(struct utmp *l ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getutline() call is used to access a utmp format file.
	This functionality is not portable to open systems.  See
	getut(3C). */

#endif  /* _APEX_SOURCE */
 return (l); }

struct utmp *	_pututline(struct utmp *u ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The _pututline() call is used to access a utmp format file.
	This functionality is not portable to open systems.  See
	getut(3C). */

#endif  /* _APEX_SOURCE */
 return (u); }

void	pututline(struct utmp *u ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The pututline() call is used to access a utmp format file.
	This functionality is not portable to open systems.  See
	getut(3C). */

#endif  /* _APEX_SOURCE */
}

void	setutent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The setutent() call is used to access a utmp format file.
	This functionality is not portable to open systems.  See
	getut(3C). */

#endif  /* _APEX_SOURCE */
}

void	endutent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The endutent() call is used to access a utmp format file.
	This functionality is not portable to open systems.  See
	getut(3C). */

#endif  /* _APEX_SOURCE */
}

void	utmpname(char *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The utmpname() call is used to access a utmp format file.
	This functionality is not portable to open systems.  See
	getut(3C). */

#endif  /* _APEX_SOURCE */
}

/* INITGROUPS(3C) */
int	initgroups(const char *n, gid_t b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The initgroups() call initializes the group access list.  
	Use setgroups(). */

#endif  /* _APEX_SOURCE */
 return(0); }


#ifdef __hp9000s300
/* IS_HW_PRESENT(3C) */
int	is_68010_present(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The is_68010_present() call is specific to HP9000 Series 300 
	and Series 400 hardware systems.  This call is not portable 
	to open systems at this time.  See the is_hw_present(3C) manual 
	page in the HP-UX Reference. */

#endif  /* _APEX_SOURCE */
 return (0); }

int	is_68881_present(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The is_68010_present() call is specific to HP9000 Series 300 
	and Series 400 hardware systems.  This call is not portable 
	to open systems at this time.  See the is_hw_present(3C) manual 
	page in the HP-UX Reference. */

#endif  /* _APEX_SOURCE */
 return (0); }

int	is_98635A_present(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The is_68010_present() call is specific to HP9000 Series 300 
	and Series 400 hardware systems.  This call is not portable 
	to open systems at this time.  See the is_hw_present(3C) manual 
	page in the HP-UX Reference. */

#endif  /* _APEX_SOURCE */
 return (0); }

int	is_98248A_present(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The is_68010_present() call is specific to HP9000 Series 300 
	and Series 400 hardware systems.  This call is not portable 
	to open systems at this time.  See the is_hw_present(3C) manual 
	page in the HP-UX Reference. */

#endif  /* _APEX_SOURCE */
 return (0); }

#endif /* __hp9000s300 */

/* L3TOL(3C) */
void	l3tol(long *l, const char *c, int n) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The l3tol() call is an HP-UX specific call to convert between
	3-byte integers and long integers.  This functionality is not
	portable to open systems.  There is no replacement at this time.  
	See l3tol(3C) in the HP-UX Reference.  */

#endif  /* _APEX_SOURCE */
}

void	ltol3(char *c, const long *l, int n) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The ltol3() call is an HP-UX specific call to convert between
	long integers and 3-byte integers and This functionality is
	not portable to open systems.  See l3tol(3C) in the HP-UX 
	Reference.  There is no replacement at this time.  */

#endif  /* _APEX_SOURCE */
}

/* LTOSTR(3C) */
char *	ltostr(long l, int i ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use sprintf() for number base = 8, 10, or 16. There is no 
	portable equivalent for other number bases. */

#endif  /* _APEX_SOURCE */
 char c; return(&c); }

char *	ultostr(unsigned long u, int i ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] Use sprintf(). 
	Use sprintf() to print a long to a string.  See printf(3C) and
	ltostr(3C). */

#endif  /* _APEX_SOURCE */
 char c; return(&c); }

char *	ltoa(long l ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	Use sprintf() to print a long to a string.  See printf(3C)
	and ltostr(3C).
	*/

#endif  /* _APEX_SOURCE */
 char c; return(&c); }

char *	ultoa(unsigned long u ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	Use sprintf() to print an unsigned long to a string.  See 
	printf(3C) and ltostr(3C).
	*/

#endif  /* _APEX_SOURCE */
 char c; return(&c); }

/* LANGINFO(3C) NLS */
char *	langinfo(int l, nl_item i ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use nl_langinfo(3C) */

#endif  /* _APEX_SOURCE */
 return (""); }

int	langtoid(const char *l ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The lantoid() call converts a string representing a language 
	(locale) to a language ID.  This HP-UX specific functionality 
	is obsolete.  See also nl_langinfo(3C) */

#endif  /* _APEX_SOURCE */
 return (0); }

char *	idtolang(int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The idtolang() call converts a language ID to a string 
	representing a language (locale).  This HP-UX specific 
	functionality is obsolete.  See also nl_langinfo(3C) */

#endif  /* _APEX_SOURCE */
 return (""); }

int	currlangid(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The currlangid() call returns the current language ID 
	(locale) as set by the LANG environment variable.  This 
	HP-UX specific functionality is obsolete. See also 
	nl_langinfo(3C) */

#endif  /* _APEX_SOURCE */
 return (0); }

/* LD...(3X) libld -- shouldn't be documented in Section 3! */
/* LOGNAME(3X) libPW -- shouldn't be documented */
/* MALLOC(3X) (actually resides in malloc.a, but it's convenient to include
	malloc.h to declare malloc, etc, which declares these) */
#include <malloc.h>
int mallopt(int i, int j) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The mallopt() call provides control over the allocation 
	algorithm and other options in the malloc() package.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
return i;}

struct mallinfo mallinfo(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The mallinfo() call provides information describing
	usage of memory space allocated with malloc().  This
	functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
struct mallinfo m; m.arena = 0; return m; }


/* MEMORY(3C) */
void	bcopy(const char *s1, char *s2, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	Use memmove().  See memory(3C). */

#endif  /* _APEX_SOURCE */
}

int	bcmp(const char *s1, const char *s2, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	Use memcmp().  See memory(3C). */

#endif  /* _APEX_SOURCE */
 return(n); }

void	bzero(char *s, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	Use memset().  See memory(3C). */

#endif  /* _APEX_SOURCE */
}

int	ffs(int i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The ffs() call finds the first bit set in an integer and 
	returns the index of that bit.  This HP-UX specific call
	is not portable to open systems.  See memory(3C). */

#endif  /* _APEX_SOURCE */
 return(i); }

/* MKTEMP(3C) */
char *	mktemp(char *t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The mktemp() call creates a unique temporary file name. 
	Use tmpnam().  See also tmpfile(3X). */

#endif  /* _APEX_SOURCE */
 return (t); }

int	mkstemp(char *t) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The mkstemp() call creates a temporary file and returns
	a file descriptor to it.  Use tmpfile().  See also 
	tmpnam(3S). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* MONITOR(3C) */
void	monitor(void (*l)(), void ((*h)()), WORD *b, int s, int n) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The monitor() call is an HP-UX specific call that provides an
	interface to the profil(2) call.  This call is not portable to
	open systems.  The monitor() call is typically not explicitly
	called by users.  It is usually included by specifying the -p
	option to the C compiler.  Although the monitor call is not
	available on open systems, most C compilers do support some 
	type of execution profile feature. */

#endif  /* _APEX_SOURCE */
}

/* NL_CONV(3C) NLS */
int	nl_toupper(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use to_upper(). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_tolower(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use to_lower(). */

#endif  /* _APEX_SOURCE */
 return (c); }

/* NL_CTYPE(3C) NLS */
#undef	nl_isalpha
#undef	nl_isupper
#undef	nl_islower
#undef	nl_isdigit
#undef	nl_isxdigit
#undef	nl_isalnum
#undef	nl_isspace
#undef	nl_ispunct
#undef	nl_isprint
#undef	nl_isgraph
#undef	nl_iscntrl
int	nl_isalpha(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use isalpha().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_isupper(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use isupper().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_islower(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use islower().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_isdigit(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use isdigit().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_isxdigit(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use isxdigit().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_isalnum(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use isalnum().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_isspace(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use isspace().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_ispunct(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use ispunct().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_isprint(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use isprint().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_isgraph(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use isgraph().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

int	nl_iscntrl(int c, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use iscntrl().  See ctype(3C). */

#endif  /* _APEX_SOURCE */
 return (c); }

/* NL_INIT(3C) NLS */
int	nl_init(char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use setlocale(). */

#endif  /* _APEX_SOURCE */
 return(0); }

int	langinit(char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use setlocale(). */

#endif  /* _APEX_SOURCE */
 return(0); }

/* NL_STRING(3C) NLS */
int	strcmp8(unsigned char *a, unsigned char *b, int l, int *s ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strcoll(). */

#endif  /* _APEX_SOURCE */
 return (l); }

int	strncmp8(unsigned char *a, unsigned char *b, int n, int l, int *s ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strcoll(). */

#endif  /* _APEX_SOURCE */
 return (l); }

int	strcmp16(unsigned char *a, unsigned char *b, unsigned char *f, int *s )
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strcoll(). */

#endif  /* _APEX_SOURCE */
 return (0); }

int	strncmp16(unsigned char *a, unsigned char *b, int n, unsigned char *f,
          	    int *s ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strcoll(). */	

#endif  /* _APEX_SOURCE */
 return (n); }

/* NL_TOOLS_16(3C) NLS */
#undef FIRSTof2
#undef SECof2
#undef BYTE_STATUS
#undef CHARAT
#undef ADVANCE
#undef CHARADV
#undef PCHAR
#undef PCHARADV
#undef WCHAR
#undef WCHARADV
#undef C_COLWIDTH
int	__nl_langid[1];
unsigned char *	__ctype;
unsigned char *	__ctype2;
unsigned char *	_upshift;
unsigned char *	_downshift;
unsigned char *	_1kanji;
unsigned char *	_2kanji;
#ifdef EUC
unsigned char *	__e_cset;
unsigned char *	__ein_csize;
unsigned char *	__eout_csize;
#endif /* EUC */
struct _era_data *	_nl_era[1];
int	_nl_radix;
int	_sh_low;
int	_sh_high;
#ifdef EUC
int	__nl_code_scheme;
int	__cs_SBYTE;
int	__cs_HP15;
int	__cs_EUC;
unsigned char	__in_csize[1];
unsigned char	__out_csize[1];
unsigned int	__euc_template[1];
#endif /* EUC */
nl_direct	_nl_direct;
int		_nl_context;
nl_order	_nl_order;
nl_mode		_nl_mode;
nl_outdgt	_nl_outdigit;
int		_nl_space_alt;
unsigned char *	_nl_dgt_alt;
unsigned char *	_nl_punct_alt;
unsigned char *	_nl_pascii;
unsigned char *	_nl_dascii;
int 		_nl_map21;
int 		_nl_onlyseq;
int 		_nl_collate_on;
int 		_nl_mb_collate;
unsigned char *	_seqtab;
unsigned char *	_pritab;
struct col_21tab *	_tab21;
struct col_12tab *	_tab12;
unsigned char *	__errptr;
struct lconv *	_lconv;
unsigned char *	__category_name[1];
unsigned char **__nl_info;
unsigned char *	__C_langinfo[1];
int	__sec_tab[4];
int	c_colwidth(int c) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return c; }

int	firstof2(int c) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return(c); }

int	secof2(int c) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return(c); }

int	byte_status(int c, int s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return(c); }

int	FIRSTof2(int c) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return(c); }

int	SECof2(int c) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return(c); }

int	BYTE_STATUS(int c, int s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return(c); }

int	CHARAT(char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return(0); }

int	ADVANCE(char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return(0); }

int	CHARADV(char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability. */

#endif  /* _APEX_SOURCE */
 return(0); }

void	PCHAR(int c, char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
}

void	PCHARADV(int c, char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
}

int	WCHAR(int c, char *p) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
return c;}

int	WCHARADV(int c, char *p) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
return c;}

int C_COLWIDTH ( int c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/*APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use routines in multibyte(3C) for best portability.*/

#endif  /* _APEX_SOURCE */
 return c; }

/* EUC routines used in <nl_ctype.h> */
#ifdef EUC
unsigned char	__euc_cs( wchar_t w ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The __euc_cs() function is called by WC_COLWIDTH() macro defined in 
	the nl_ctype.h header file.  Use the routines in multibyte(3C) for
	best portability.  See also nl_tools_16(3C). */

#endif  /* _APEX_SOURCE */
 return (unsigned char) 0; }

wchar_t		__get_euc( const unsigned char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The __get_euc() function is called by CHARAT() macro defined in the
	nl_ctype.h header file.  Use the routines in multibyte(3C) for best
	portability.  See also nl_tools_16(3C). */

#endif  /* _APEX_SOURCE */
 return (wchar_t) 0; }

unsigned char *	__put_adv_euc( wchar_t w, unsigned char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The __put_adv_euc() function is called by WCHARADV() macro defined in 
	the nl_ctype.h header file.  Use the routines in multibyte(3C) for 
	best portability. See also nl_tools_16(3C).  */

#endif  /* _APEX_SOURCE */
 return p; }

wchar_t		__put_euc( wchar_t w, unsigned char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The __put_euc() function is called by WCHAR() macro defined in the
	nl_ctype.h header file.  Use the routines in multibyte(3C) for best
	portability.  See also nl_tools_16(3C). */

#endif  /* _APEX_SOURCE */
 return w; }

#endif /* EUC */
/* NLIST(3C) */
int	nlist(char *f, struct nlist *n ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The nlist() call is an HP-UX specific call to get entries from 
	the name list of a file.  This functionality is not directly 
	portable to open systems. */ 

#endif  /* _APEX_SOURCE */
 return (0); }

/* PERROR(3C) */
char *	sys_errlist[1];
int	sys_nerr;
/* PLOT(3X) not in libc */
/* PRINTF(3S) */
int	nl_printf(const char *s, ... ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use printf(). */

#endif  /* _APEX_SOURCE */
 return (0); }

int	nl_fprintf(FILE *f, const char *s, ... ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use fprintf(). */

#endif  /* _APEX_SOURCE */
 return (0); }

	/*VARARGS2 PRINTFLIKE2*/
int	nl_sprintf(char *p, const char *s, ... ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use sprintf(). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* PRINTMSG(3C) NLS */
	/*VARARGS1 PRINTMSGLIKE1*/
int	printmsg(const char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use printf(3C). */

#endif  /* _APEX_SOURCE */
 return (0); }

	/*VARARGS2 PRINTMSGLIKE2*/
int	fprintmsg(FILE *f, const char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use fprintf(3C). */

#endif  /* _APEX_SOURCE */
 return (0); }

	/*VARARGS2 PRINTMSGLIKE2*/
int	sprintmsg(char *p, const char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use sprintf(3C). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* PUTPWENT(3C) */
int	putpwent(struct passwd *s, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The putpwent() call is used to write an entry to the
	user database.  On HP-UX the user database is stored
	in the /etc/passwd file.  This functionality is not
	portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

/* PUTSPWENT(3C) */
int	putspwent (struct s_passwd *p, FILE *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The putspwent() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
 return (0); }

/* REGCMP(3X) libPW */
/* SCANDIR(3C) */
int	scandir(const char *dir, struct dirent ***n,
	int (*s)(const struct dirent *d), int (*c)(const struct dirent **d1,
	const struct dirent **d2)) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The scandir() call an HP-UX specific call used to read a directory 
	and build an array of pointers to directory entries.  The scandir() 
	call is not portable to open systems.  This functionality can be
	obtained by using the portable functions described in the 
	directory(3C) manual page.  See scandir(3C) and directory(3C). */

#endif  /* _APEX_SOURCE */
 return(0); }

int	alphasort(const struct dirent **d1, const struct dirent **d2)
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The alphasort() call is an HP-UX specific call used in conjunction
	with the scandir() call.  It is used to sort directory entries in
	an array alphabetically.  This functionality is not portable to 
	open systems.  See scandir(3C). */

#endif  /* _APEX_SOURCE */
 return(0); }

/* SCANF(3S) */
	/* VARARGS1 */
int	nl_scanf(const char *s, ... ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use scanf(). */

#endif  /* _APEX_SOURCE */
 return (0); }

	/* VARARGS2 */
int	nl_fscanf(FILE *f, const char *s, ... ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use fscanf(). */

#endif  /* _APEX_SOURCE */
 return (0); }

	/* VARARGS2 */
int	nl_sscanf(const char *p, const char *s, ... ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use sscanf(). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* SETJMP(3C) */
int	_setjmp(jmp_buf e ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The _setjmp() call is an HP-UX call that is similar to the 
	setjmp() call.  It differs in the way it handles the process 
	signal mask.  The _setjmp() call is not portable to open 
	systems.  Use setjmp().  See setjmp(3C). */

#endif  /* _APEX_SOURCE */
 return (0); }

void	_longjmp(jmp_buf e, int v) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The _longjmp() call is an HP-UX call that is similar to the 
	longjmp() call.  It differs in the way it handles the process 
	signal mask.  The _longjmp() call is not portable to open 
	systems.  Use longjmp().  See setjmp(3C). */

#endif  /* _APEX_SOURCE */
}

/* GETSPWENT(3C) */
void	setspwent(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The setspwent() call is part of the HP-UX auditing subsystem.
	This functionality is not portable to open systems. See 
	getspwent(3C). */

#endif  /* _APEX_SOURCE */
}


#ifdef ACLS
/* SETACLENTRY(3C) */
int	setaclentry (const char *p, int u, int g, int m ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The setaclentry() call will have an open systems equivalent,
	but it is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return (u); }

int	fsetaclentry (int f, int u, int g, int m ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The fsetaclentry() call will have an open systems equivalent,
	but it is not fully defined at this time.  See setaclentry(3C).  */

#endif  /* _APEX_SOURCE */
 return (u); }

#endif /* ACLS */

/* SETLOCALE (undocumented, but declared in locale.h) */
char *_errlocale(char *s){ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
return "";}


/* SSIGNAL(3C) */
int (*	ssignal(int s, int (*a) (int)))(int) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The ssignal() call is an HP-UX specific signal handling
	mechanism.  It is not portable to open systems.  Use
	sigaction(2) or signal(2) .  */

#endif  /* _APEX_SOURCE */
 }

int	gsignal(int s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The gsignal() call is an HP-UX specific signal sending
	mechanism.  It is not portable to open systems.  Use 
	kill(2). */

#endif  /* _APEX_SOURCE */
 return (s); }

/* STDIPC(3C) */
key_t	ftok(const char *s, char i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((key_t)0); }

/* STRING(3C) */
int	strcasecmp(const char *s1, const char *s2) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use _tolower() to convert each character in each string to lower 
	case, then compare the resulting strings using strcmp().  See
	conv(3C) and string(3C). */

#endif  /* _APEX_SOURCE */
 return(0); }

int	strncasecmp(const char *s1, const char *s2, size_t n) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use _tolower() to convert each character in each string to lower 
	case, then compare the resulting strings using strncmp().  See
	conv(3C) and string(3C). */

#endif  /* _APEX_SOURCE */
 return(0); }

char *	strdup(const char *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The strdup() call duplicates a string.  Use malloc()
	to allocate space for the new copy, then use strcpy()
	to copy the original to the duplicate string.  See
	string(3C). */

#endif  /* _APEX_SOURCE */
 char *x; return(x); }

int	nl_strcmp(const char *a, const char *b ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strcoll(). */

#endif  /* _APEX_SOURCE */
 return (0); }

int	nl_strncmp(const char *a, const char *b, size_t n) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The nl_strncmp() call is HP-UX specific.  It has no exact open 
	systems replacement.  See string(3C).  See also strcoll(). */

#endif  /* _APEX_SOURCE */
 return (n); }

char *	strrstr(const char *c1, const char *c2 ) 	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The strrstr() call is an HP-UX specific call to find the last
	occurance of a substring.  This functionality is not portable
	to open systems.  See string(3C).  */

#endif  /* _APEX_SOURCE */
 char *x; return(x); }

char	*index(const char *s, char c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1] 
	The index() call determines the offset of the first 
	occurrence in a string of another string.  It is part
	of the libPW library.  Use strstr().  See string(3C). */

#endif  /* _APEX_SOURCE */
 return((char *) 0); }

char	*rindex(const char *s, char c) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strrchr().  See string(3C). */

#endif  /* _APEX_SOURCE */
 return((char *) 0); }


#ifdef ACLS
/* STRTOACL(3C) */
int	strtoacl (const char *s, int n, int m, struct acl_entry a[], int fu, int fg ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The strtoacl() call will have an open systems equivalent, but
	it is not fully defined at this time.  */

#endif  /* _APEX_SOURCE */
 return (n); }

int	strtoaclpatt (const char *s, int m, struct acl_entry_patt a[]	) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The strtoaclpatt() call will have an open systems equivalent,
	but it is not fully defined at this time.  See strtoacl(3C).  */

#endif  /* _APEX_SOURCE */
 return (m); }

char *	aclentrystart[];
#endif /* ACLS */

/* STRORD(3C) */
char	*strord(char *s1, char *s2, nl_mode m ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The strord() call changes string orientation from right to
	left or left to right.  This HP-UX specific functionality is
	not portable to open systems.  */

#endif  /* _APEX_SOURCE */
 return(s1); }

/* STRTOD(3C) */
double	nl_strtod(const char *s, char **t, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use strtod(). */

#endif  /* _APEX_SOURCE */
 return (0.0); }

double	nl_atof(const char *s, int l) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	Use atof().  See strtod(3C). */

#endif  /* _APEX_SOURCE */
 return (0.0); }

/* STRTOUL(3C) */
/* TTYSLOT(3C) */
int	ttyslot(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The ttyslot() call is used to find the slot in the
	utmp file of the current user.  This functionality
	is not portable to open systems.  See ttyname(3C). */

#endif  /* _APEX_SOURCE */
 return (0); }

/* VSCANF(3C) */
int	vscanf(const char *f, va_list ap) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The vscanf() call does formatted input conversion from the stdin
	stream to a varargs list.  This functionality is not portable to
	open systems.  See scanf(3C) and the varargs manual page. */

#endif  /* _APEX_SOURCE */
return 0;}

int	vfscanf(FILE *s, const char *f, va_list ap) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The vscanf() call does formatted input conversion from a stream 
	to a varargs list.  This functionality is not portable to open 
	systems.  See vscanf(3C), scanf(3C) and the varargs manual page. */

#endif  /* _APEX_SOURCE */
return 0;}

int	vsscanf(char *s, const char *f, va_list ap) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1]
	The vsscanf() call does formatted input conversion from a string
	to a varargs list.  This functionality is not portable to open
	systems.  See vscanf(3C), scanf(3C) and the varargs manual page. */

#endif  /* _APEX_SOURCE */
return 0;}


/* UNDOCUMENTED (not for general use) */
	/*VARARGS1*/
/*VARARGS1*/
int	syscall(int n, ...) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (n); }

long	tell(int f) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (0L); }

int	_filbuf(FILE *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (0); }

int	_flsbuf(unsigned char c, FILE *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (0); }

/* The namespace clean versions (used in stdio macros) */
int	__filbuf(FILE *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (0); }

int	__flsbuf(unsigned char c, FILE *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (0); }


/* NETWORKING DECLARATIONS */
#ifdef _LANLINK
#include <netdb.h>
#undef hpux
#define hpux
#include <arpa/nameser.h>

/* _getlong() and _getshort().  These are not documented, but appear
   in the <arpa/nameser.h> header file. */
u_long 		_getlong(u_char *m) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((u_long) 0); }

u_short 	_getshort(u_char *m) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return ((u_short) 0); }


/* GETHOSTENT(3C) */
struct hostent *	gethostbyname(const char *n )
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct hostent h; return(&h); }

struct hostent *	gethostbyaddr(const char *a, int l, int t ) 
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct hostent h; return(&h); }

int	sethostent(int s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

int	endhostent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

struct hostent *	gethostent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct hostent h; return(&h); }

int	sethostfile(char *n ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

/* GETNETENT(3C) */
struct netent *	getnetbyaddr(int n, int t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct netent s; return(&s);}

struct netent *	getnetbyname(const char *name ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct netent s; return(&s);}

int	setnetent(int f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(f); }

int	endnetent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

struct netent *	getnetent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct netent s; return(&s);}

/* GETSERVENT(3C) */
struct servent *	getservbyport(int p, const char *r )
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct servent s; return(&s); }

struct servent *	getservbyname(const char *n, const char *p)
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct servent s; return(&s);}

int	setservent(int f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(f); }

int	endservent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

struct servent *	getservent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct servent s; return(&s); }

/* GPROTOENT(3C) */
struct protoent *	getprotobynumber(int p ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct protoent s; return(&s); }

struct protoent *	getprotobyname(const char *n )
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct protoent s; return(&s); }

int	setprotoent(int f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(f); }

int	endprotoent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

struct protoent *	getprotoent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct protoent s; return(&s); }


struct rpcent *	getrpcbyname(const char *n ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

struct rpcent *	getrpcbynumber (int n ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

struct rpcent *	getrpcent (void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

int	setrpcent(int f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* RES_INIT(3C) */
int	res_init(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* RES_MKQUERY(3C) */
int	res_mkquery(int o, char *d, int c, int t, char *da, int dl,
            	    struct rrec *n, char *b, int bl ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(o); }

/* RES_QUERY(3C) */
int	res_query(char *n, int c, int t, u_char *a, int an ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(c); }

int	res_search(char *n, int c, int t, u_char *a, int al ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(c); }

int	res_querydomain(char *n, char *d, int c, int t, u_char *a, int al ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(c); }

char *	hostalias(char *n ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(n); }

/* RES_SEND(3C) */
int	res_send(char *b, int bl, char *a, int al ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(bl); }

int	_res_close(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }


#endif	/* _LANLINK fileset */

#ifdef _LANBLD
#include <netinet/in.h>

/* INET_ADDR(3C) */
u_long	inet_addr(char *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((u_long)0); }

/* INET_LNAOF(3C) */
u_long	inet_lnaof(struct in_addr in ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((u_long)0); }

/* INET_MAKEADDR(3C) */
struct in_addr	inet_makeaddr(int n, int h ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 struct in_addr i; return(i); }

/* INET_NETOF(3C) */
u_long	inet_netof(struct in_addr in ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return((u_long)0); }

/* INET_NETWORK(3C) */
int	inet_network(char *cp ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

/* INET_NTOA(3C) */
char *	inet_ntoa(struct in_addr in ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char c; return(&c); }


#endif  /* _LANBLD fileset */


/* RCMD(3C) */
int	rcmd(char **a, unsigned short p, const char *l,
			const char *r, const char *c, int *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(p); }

int	rexec(char **ahost, int rport, const char *name,
			const char *pass, const char *cmd, int *fd2p ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

int	rresvport(int *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

int	ruserok(const char *h, int s, const char *r, const char *l )
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* RES_COMP(3C) */
int	dn_expand(u_char *m, u_char *e, u_char *c, u_char *x, int l ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(l); }

int	dn_comp(u_char *x, u_char *c, int l, u_char **d, u_char **a ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(l); }

int	dn_skipname(u_char *c, u_char *e ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(0); }

nl_catd	_res_nls_catopen(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return((nl_catd)0); }


/* HERROR(3C) */
int	herror(char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

/* RUSERPASS(3C) */
int	ruserpass(char *h, char **n, char **p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

/* YELLOWUP(3C) */
int	yellowup(int f, char *d ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(f); }


/* NFS, YP, XDR and RPC */
#ifdef NFS

#include <sys/param.h>
#include <rpc/types.h>
#include <rpc/xdr.h>
#include <rpc/auth.h>
#include <rpc/clnt.h>
#define	CALL	NFS_CALL
#include <rpc/rpc_msg.h>
#include <rpc/svc.h>
#include <nfs/export.h>
#include <nfs/nfs.h>
#include <rpcsvc/yp_prot.h>
#include <rpcsvc/ypclnt.h>
#include <rpcsvc/ypv1_prot.h>
#include <rpcsvc/mount.h>
#include <rpc/auth_unix.h>
#include <rpc/pmap_prot.h>
typedef bool_t (*resultproc_t)();
fd_set	svc_fdset;
struct rpc_createerr	rpc_createerr;
int havedisk ( char *host ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int rstat ( char *host, struct statstime *statp ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int getrpcport( char *host, int prognum, int versnum, int proto )
    { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
return(0);}



void	endnetgrent(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	getnetgrent(char **m, char **u, char *d ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	setnetgrent(char *g ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	uselocal(char *k, char **v, int *vn ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	innetgr(char *g, char *m, char *n, char *d ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

int	endrpcent(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

bool_t	xdr_authunix_parms(register XDR *x, register struct authunix_parms *p )
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

void	_seterr_reply(register struct rpc_msg *m, register struct rpc_err *e ) 
{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

bool_t	xdr_accepted_reply(register XDR *x, register struct accepted_reply *a )
 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t xdr_callhdr(register XDR *x, register struct rpc_msg *c) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (TRUE); }

bool_t	xdr_callmsg(register XDR *x, register struct rpc_msg *c) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_deskey(register XDR *x, register union des_block *b) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_opaque_auth(register XDR *x, register struct opaque_auth *a) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_rejected_reply(register XDR *x, register struct rejected_reply *r)
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_replymsg(register XDR *x, register struct rpc_msg *r) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

void	svc_getreq(int r ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svc_getreqset(fd_set *r ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

bool_t	svc_register(SVCXPRT *x, u_long p, u_long v, void (*d)(), int pr) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

void	svc_run(SVCXPRT *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

bool_t	svc_sendreply(register SVCXPRT *x, xdrproc_t xd, caddr_t xdr) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

void	svc_unregister(u_long p, u_long v ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svcerr_auth(SVCXPRT *x, enum auth_stat w ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svcerr_decode(register SVCXPRT *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svcerr_noproc(register SVCXPRT *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svcerr_noprog(register SVCXPRT *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svcerr_progvers(register SVCXPRT *x, u_long l, u_long h ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svcerr_systemerr(register SVCXPRT *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svcerr_weakauth(SVCXPRT *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svc_run_ms(long n) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	svc_getreqset_ms(fd_set *r, long n) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	xprt_register(SVCXPRT *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	xprt_unregister(SVCXPRT *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

enum auth_stat	_authenticate(register struct svc_req *r, struct rpc_msg *m) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(AUTH_REJECTEDCRED); }

enum auth_stat	_svcauth_short(struct svc_req *r, struct rpc_msg *m) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(AUTH_REJECTEDCRED); }

enum auth_stat	_svcauth_unix(register struct svc_req *r,
             	              register struct rpc_msg *m ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(AUTH_REJECTEDCRED); }

bool_t	xdr_bool(register XDR *x, bool_t *b ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_bytes(register XDR *x, char **c, register u_int *s,
          	      register u_int m) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_char(XDR *x, char *c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_enum(XDR *x, enum_t *e ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

void	xdr_free(xdrproc_t p, char *o ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

bool_t	xdr_int(XDR *x, int *i ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_long(register XDR *x, long *l ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_netobj(XDR *x, struct netobj *n ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_opaque(register XDR *x, caddr_t c, register u_int cn) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_short(register XDR *x, short *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_string(register XDR *x, char **c, u_int m ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_u_char(XDR *x, char *c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_u_int(XDR *x, u_int *u ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_u_long(register XDR *x, u_long *u ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_u_short(register XDR *x, u_short *u ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_union(register XDR *x, enum_t *ds, caddr_t u, 
			struct xdr_discrim *c, xdrproc_t df ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_void(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_wrapstring(XDR *x, char **c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_array(register XDR *x, caddr_t *a, u_int *s, u_int m, u_int es,
          	      xdrproc_t ep ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_vector(register XDR *x, register char *b, register u_int n,
           	      register u_int e, register xdrproc_t xe) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

void	xdrmem_create(register XDR *x, caddr_t a, u_int s, enum xdr_op o ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

AUTH *	authnone_create(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

AUTH *	authunix_create(char *m, int u, int g, register int l, int *a) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

AUTH *	authunix_create_default(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

void	bindresvport(int sd, struct sockaddr_in *sn ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

CLIENT *clnt_create(char *h, unsigned pg, unsigned v, char *po) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

void	clnt_pcreateerror(char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	clnt_perrno(enum clnt_stat n ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	clnt_perror(CLIENT *r, char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

char *	clnt_spcreateerror(char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

char *	clnt_sperrno(enum clnt_stat n ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

char *	clnt_sperror(CLIENT *r, char *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

CLIENT *clntraw_create(u_long p, u_long v ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

void	callrpc(char *h, int pg, int v, int pc, xdrproc_t ip, char *i,
        	    xdrproc_t op, char *o ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

CLIENT *clnttcp_create(struct sockaddr_in *r, u_long p, u_long v, 
			register int *sk, u_int ss, u_int rs ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

CLIENT *clntudp_bufcreate(struct sockaddr_in *r, u_long p, u_long v,
                          struct timeval w, register int *sk, u_int ss,
                          u_int rs) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

CLIENT *clntudp_create(struct sockaddr_in *r, u_long p, u_long v,
                       struct timeval w, register int *s ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

void	get_myaddress(struct sockaddr_in *a ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

void	gettransient(int p, int v, int *s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

bool_t	pmap_set(u_long pg, u_long v, u_long pcl, u_long pt ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	pmap_unset(u_long pg, u_long v ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

struct pmaplist *	pmap_getmaps(struct sockaddr_in *a ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

u_short	pmap_getport(struct sockaddr_in *a, u_long pg, u_long v, u_long pcl) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

bool_t	xdr_pmap(XDR *x, struct pmap *r ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_pmaplist(register XDR *x, register struct pmaplist **r) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

enum clnt_stat	clnt_broadcast(u_long pg, u_long v, u_long pc, xdrproc_t x,
               	              caddr_t a, xdrproc_t xr, caddr_t r,
               	              resultproc_t e) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(RPC_SUCCESS); }

enum clnt_stat	pmap_rmtcall(struct sockaddr_in *ad, u_long pg, u_long v,
             	              u_long pc, xdrproc_t x, caddr_t ar, xdrproc_t xd,
             	              caddr_t r, struct timeval t, u_long *pp 	) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(RPC_SUCCESS); }

SVCXPRT *svcraw_create(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

void	registerrpc(u_long pg, u_long v, u_long pc, char *(*pn)(), xdrproc_t ip,
            	    xdrproc_t op ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

SVCXPRT *svcfd_create(int f, u_int s, u_int r ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

SVCXPRT *svctcp_create(register int sk, u_int ss, u_int rs ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

SVCXPRT *svcudp_bufcreate(register int sk, u_int s, u_int r ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

SVCXPRT *svcudp_create(int sk, u_int ss, u_int rs ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

bool_t	xdr_double(register XDR *x, double *d ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_float(register XDR *x, register float *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

void	xdrrec_create(register XDR *x, u_int ss, u_int rs, 
			caddr_t t, int (*r)(), int ((*w)())  )
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

bool_t	xdrrec_endofrecord(XDR *x, bool_t s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdrrec_eof(XDR *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdrrec_skiprecord(XDR *x ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_pointer(register XDR *x, char **op, u_int os, xdrproc_t xo ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_reference(register XDR *x, caddr_t *pp, u_int s, xdrproc_t pc ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

void	xdrstdio_create(register XDR *x, FILE *f, enum xdr_op o ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

nl_catd nfs_nls_catopen(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

void	_rpc_free(char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

char *	_rpc_malloc(int s ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

bool_t	xdr_fhandle(XDR *x, fhandle_t *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool_t	xdr_fhstatus(XDR *x, struct fhstatus *f ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
return(TRUE);}

bool_t	xdr_path(XDR *x, char **p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

int	ypprot_err(unsigned int y ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int	yp_bind(char *d ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int	_yp_dobind(char *d, struct dom_binding **b ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int	yp_get_default_domain (char **d ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int     yp_ismapthere (int d ) {
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */
#endif  /* _APEX_SOURCE */
  return(0); }

void	yp_unbind (char *d ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

char *	yperr_string(int c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(NULL); }

int	v1prot_dofirst (char *d, char *m, struct dom_binding *p,
	struct timeval t, char **k, int *kl, char **v, int *vl)
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int	v1prot_donext (char *d, char *m, char *ik, int ikl,
	struct dom_binding *p, struct timeval t, char **ok, int *okl,
	char **v, int *vl ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int	yp_first (char *d, char *m, char **k, int *kl, char **v, int *vl ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int	yp_next (char *d, char *m, char *ik, int ikl, char **ok, int *okl,
         	   char **v, int *vl ) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int	yp_match (char *d, char *m, char *k, int kl, char **v, int *vl) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

bool	xdr_datum(XDR *x, datum *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

u_int    xdrrec_readbytes(XDR *x, caddr_t c, u_int l ) {
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */
#endif  /* _APEX_SOURCE */
  return(0); }

bool	xdr_yp_binding(XDR *x, struct ypbind_binding *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_yp_inaddr(XDR *x, struct in_addr *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypall(XDR *x, struct ypall_callback *c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypbind_resp(XDR *x, struct ypbind_resp *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypbind_setdom(XDR *x, struct ypbind_setdom *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
return(TRUE);}

bool	xdr_ypdomain_wrap_string(XDR *x, char **p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypmap_parms(XDR *x, struct ypmap_parms *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypmap_wrap_string(XDR *x, char **p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypmaplist(XDR *x, struct ypmaplist **l ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypmaplist_wrap_string(XDR *x, char *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypowner_wrap_string(XDR *x, char **p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_yppushresp_xfr(XDR *x, struct yppushresp_xfr *p) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypreq_key(XDR *x, struct ypreq_key *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypreq_nokey(XDR *x, struct ypreq_nokey *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypreq_xfr(XDR *x, struct ypreq_xfr *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypresp_key_val(XDR *x, struct ypresp_key_val *p) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypresp_maplist(XDR *x, struct ypresp_maplist *p) 
	{ 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypresp_master(XDR *x, struct ypresp_master *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
return(TRUE);}

bool	xdr_ypresp_order(XDR *x, struct ypresp_order *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	xdr_ypresp_val(XDR *x, struct ypresp_val *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

int	yp_all (char *d, char *m, struct ypall_callback *c ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int	yp_master (char *d, char *mp, char **mr ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

int	yp_order (char *d, char *m, unsigned long *o ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

bool	_xdr_ypbind_oldsetdom(XDR *x, struct ypbind_setdom *p) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); 
}

bool	_xdr_yprequest (XDR * x, struct yprequest *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }

bool	_xdr_ypresponse (XDR * x, struct ypresponse *p ) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(TRUE); }


/* NFSSVC(2) */
int	nfssvc(int s) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return s; }

void	async_daemon(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 }


/* EXPORTFS(2) */
int     exportfs(const char *a, const struct export *uex) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (0); }


/* GETFH(2) */
int     getfh(int a, const fhandle_t *h) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (0); }


#endif /* NFS */

/* USED TO BE LLIB-LBSDIPC, NOW MERGED HERE */
#include <sys/socket.h>

/* Berkeley IPC System Calls */

/* ACCEPT(2) */
int 	accept(int s, void *a, int *l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* BIND(2) */
int 	bind(int s, const void *a, int l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* CONNECT(2) */
int 	connect(int s, const void *a, int l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* GETPEERNAME(2) */
int 	getpeername(int s, void *a, int *l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* GETSOCKNAME(2) */
int 	getsockname(int s, void *a, int *l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* GETSOCKOPT(2) */
int 	getsockopt(int s, int l, int o, void *v, int *n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* SETSOCKOPT(2) */
int 	setsockopt(int s, int l, int o, const void *v, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* LISTEN(2) */
int 	listen(int s, int b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* RECV(2) */
int 	recv(int s, void *b, int l, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* RECVFROM(2) */
int 	recvfrom(int s, void *b, int l, int f, void *r, int *n)
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* RECVMSG(2) */
int 	recvmsg(int s, struct msghdr *m, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* SEND(2) */
int	send(int s, const void *m, int l, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* SENDTO(2) */
int	sendto(int s, const void *m, int l, int f,
			const void *t, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* SENDMSG(2) */
int 	sendmsg(int s, const struct msghdr *m, int f) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* SHUTDOWN(2) */
int 	shutdown(int s, int h) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(s); }

/* SOCKET(2) */
int socket(int a, int t, int p) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(a); }

/* SOCKETPAIR(2) */
int socketpair(int a, int t, int p, int r[2]) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return(a); }


/* USED TO BE LLIB-LNSIPC, NOW MERGED HERE */
#include <sys/ns_ipc.h>

/* Netipc arrays */
short ns_error_mappings[256];
short ns_nerror_mappings[3];
short ns_uerror_mappings[3];
char *ipc_result_string(e) int e; { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}


/* NetIPC System Calls */

/* IPCCONNECT(2) */
void 	ipcconnect(ns_int_t c, ns_int_t d, ns_int_t *f, short int o[], 
		   ns_int_t *v, ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCCONTROL(2) */
void 	ipccontrol(ns_int_t d, ns_int_t q, const char *w, ns_int_t m, 
		   char *r, ns_int_t *n, ns_int_t *f, ns_int_t *s) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCCREATE(2) */
void 	ipccreate(ns_int_t s, ns_int_t p, ns_int_t *f, 
		  short int o[], ns_int_t *c, ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCDEST(2) */
void 	ipcdest(ns_int_t s, const char *m, ns_int_t n, ns_int_t p, short int *a,
		ns_int_t l, ns_int_t *f, short int o[], ns_int_t *d, 
		ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCGETNODENAME(2) */
void 	ipcgetnodename(char *n, ns_int_t *s, ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCLOOKUP(2) */
void 	ipclookup(const char *s, ns_int_t n, const char *m, ns_int_t l, 
		  ns_int_t *f, ns_int_t *d, ns_int_t *p, ns_int_t *k, 
		  ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCNAME(2) */
void 	ipcname(ns_int_t d, const char *s, ns_int_t n, ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCNAMERASE(2) */
void 	ipcnamerase(char *s, ns_int_t n, ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCRECV(2) */
void 	ipcrecv(ns_int_t v, void *d, ns_int_t *l, ns_int_t *f, 
		short int o[], ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCRECVCN(2) */
void 	ipcrecvcn(ns_int_t c, ns_int_t *v, ns_int_t *f, 
		  short int o[], ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCSELECT(2) */
void 	ipcselect(ns_int_t *s, int r[2], int w[2], int e[2], 
		  ns_int_t t, ns_int_t *u) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCSEND(2) */
void 	ipcsend(ns_int_t v, const void *d, ns_int_t l, ns_int_t *f, 
		short int o[], ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCSETNODENAME(2) */
void 	ipcsetnodename(const char *n, ns_int_t s, ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCSHUTDOWN(2) */
void 	ipcshutdown(ns_int_t d, ns_int_t *f, short int o[], 
		    ns_int_t *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}


/* NetIPC Library Routines */

/* ADDOPT(3) */
void	addopt(short int o[], short int a, short int c,
	       short int l, short int d[], short int *e) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* INITOPT(3) */
void	initopt(short int o[], short int n, short int *e) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* READOPT(3) */
void	readopt(short int o[], short int a, short int *c, short int *l,
		short int d[], short int *e) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* OPTOVERHEAD(3) */
int	optoverhead(short int n, short int *e) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(0); }

/* IPCERRMSG(3) */
void	ipcerrmsg(int e, char *b, int *l, int *r) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
}

/* IPCERRSTR(3) */
char *	ipcerrstr(ns_int_t e) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return((char *) 0); }


#include <netinet/in.h>   /* For <resolv.h> */
#include <arpa/nameser.h> /* For MAXDNAME define used in <resolv.h> */
#include <resolv.h>
/* RESOLVER routines and globals - See Man resolver(3N) */

struct state _res;

char *	p_cdname(char *c, char *m, FILE *f) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(c); }

char *	p_rr(char *c, char *m, FILE *f) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return(c); }

char *	p_type(int t) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return((char *) 0); }

char *  p_time(u_long t) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return((char *) 0); }

char *	p_class(int class) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return((char *) 0); }


#include <checklist.h>
/* GETFSENT(3X) */
struct checklist *	getfsent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getfsent() call is used to access information in the
	/etc/checklist file.  This file contains information about
	available file systems on the computer.  This call is not
	portable to open systems.   */

#endif  /* _APEX_SOURCE */
 return (struct checklist *) 0; }

struct checklist *	getfsspec(const char *s)
			   { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getfsspec() call is used to access information in the
	/etc/checklist file.  This file contains information about
	available file systems on the computer.  This call is not
	portable to open systems.  See getfsent(3X). */

#endif  /* _APEX_SOURCE */
 return (struct checklist *) 0; }

struct checklist *	getfsfile(const char *f)
			   { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getfsfile() call is used to access information in the
	/etc/checklist file.  This file contains information about
	available file systems on the computer.  This call is not
	portable to open systems.  See getfsent(3X). */

#endif  /* _APEX_SOURCE */
 return (struct checklist *) 0; }

struct checklist *	getfstype(const char *t)
			   { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getfstype() call is used to access information in the
	/etc/checklist file.  This file contains information about
	available file systems on the computer.  This call is not
	portable to open systems.  See getfsent(3X). */

#endif  /* _APEX_SOURCE */
 return (struct checklist *) 0; }

int	setfsent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The setfsent() call is used to access information in the
	/etc/checklist file.  This file contains information about
	available file systems on the computer.  This call is not
	portable to open systems.  See getfsent(3X). */

#endif  /* _APEX_SOURCE */
 return 0; }

int	endfsent(void) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The endfsent() call is used to access information in the
	/etc/checklist file.  This file contains information about
	available file systems on the computer.  This call is not
	portable to open systems.  See getfsent(3X). */

#endif  /* _APEX_SOURCE */
 return 0; }


/* GETRLIMIT(2) */
int	getrlimit(int r, struct rlimit *b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The getrlimit() call is used to obtain the value of a 
	current system resource limit.  Use sysconf(2). */

#endif  /* _APEX_SOURCE */
 return r; }

int	setrlimit(int r, const struct rlimit *b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The setrlimit() call is used to set the value of a 
	system resource limit.  This functionality is not
	portable to open systems.  See getrlimit(2). */

#endif  /* _APEX_SOURCE */
 return r; }


/* GETDOMAINNAME(2) */
int	getdomainname(char *n, int l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return l; }

int	setdomainname(const char *n, int l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return l; }


char *net_aton( char *dstr, const char *sstr, int size) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return dstr; }

char *net_ntoa( char *dstr, const char *sstr, int size) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return dstr; }

int quotactl( int cmd, const char *special, uid_t uid, void *addr ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,FIPS151_1]
	The quotactl() call is used to manipulate disk quotas.
	This functionality is not portable to open systems. */

#endif  /* _APEX_SOURCE */
return 0;}



/* EXPORTENT(3N) */
#include <exportent.h>
FILE *	setexportent(void) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (FILE *)0; }

struct exportent *	getexportent(FILE *fildep) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (struct exportent *)0; }

int	addexportent(FILE *filep, char *dirname, char *options) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }

int	remexportent(FILE *filep, char *dirname) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }

char *	getexportopt(struct exportent *xent, char *opt) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return (char *)0; }

void	endexportent(FILE *filep) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return; }


#include <sys/pstat.h>
/* PSTAT(2) */
int	pstat_getstatic(struct pst_static *bufp,
		size_t size, size_t entries, int offset) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }

int	pstat_getdynamic(struct pst_dynamic *bufp,
		size_t size, size_t entries, int offset) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }

int	pstat_getvminfo(struct pst_vminfo *bufp,
		size_t size, size_t entries, int offset) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }

int	pstat_getproc(struct pst_status *bufp,
		size_t size, size_t entries, int offset) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }

int	pstat_getdisk(struct pst_diskinfo *bufp,
		size_t size, size_t entries, int offset) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }

int	pstat_getprocessor(struct pst_processor *bufp,
		size_t size, size_t entries, int offset) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }

int	pstat_getlv(struct pst_lvinfo *bufp,
		size_t size, size_t entries, int offset) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }

int	pstat_getswap(struct pst_swapinfo *bufp,
		size_t size, size_t entries, int offset) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
#endif  /* _APEX_SOURCE */
 return 0; }


#ifdef __hp9000s800
#include <sys/blmodeio.h>
/* BLMODE(3C) S800-only */
int	blopen(int f) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The blopen() call is an HP-UX specific call to handle block
	mode terminals.  This functionality is not portable to open
	systems.  See blmode(3C) in the HP-UX Reference.  There is no
	replacement at this time.  */

#endif  /* _APEX_SOURCE */
 return f; }

int	blclose(int f) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The blclose() call is an HP-UX specific call to handle block
	mode terminals.  This functionality is not portable to open
	systems.  See blmode(3C) in the HP-UX Reference.  There is no
	replacement at this time.  */

#endif  /* _APEX_SOURCE */
 return f; }

int	blget(int f, struct blmodeio *a) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The blget() call is an HP-UX specific call to handle block
	mode terminals.  This functionality is not portable to open
	systems.  See blmode(3C) in the HP-UX Reference.  There is no
	replacement at this time.  */

#endif  /* _APEX_SOURCE */
 return f; }

int	blset(int f, struct blmodeio *a) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The blset() call is an HP-UX specific call to handle block
	mode terminals.  This functionality is not portable to open
	systems.  See blmode(3C) in the HP-UX Reference.  There is no
	replacement at this time.  */

#endif  /* _APEX_SOURCE */
 return f; }

int	blread(int b, char *s, int c) { 
#ifdef _APEX_SOURCE
 /* APEX STD [HPUX->HPUX] */ 
	/* APEX HINT [HPUX->ANSIC,POSIX.1,XPG3,XPG4,POSIX.2,OSF_AES,OSF1,FIPS151_1] 
	The blread() call is an HP-UX specific call to handle block
	mode terminals.  This functionality is not portable to open
	systems.  See blmode(3C) in the HP-UX Reference.  There is no
	replacement at this time.  */

#endif  /* _APEX_SOURCE */
 return b; }

#endif /* __hp9000s800 */

/* The following are implemented as macros on hpux, fn()s on osf */
#undef htonl
#undef ntohl
#undef htons
#undef ntohs
unsigned long htonl ( unsigned long i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); } 

unsigned long ntohl ( unsigned long i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return (i); }

unsigned htons ( unsigned i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }

unsigned ntohs ( unsigned i) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }


#endif /* _INCLUDE_HPUX_SOURCE */



#ifdef _APEX_SOURCE 
/* Additional functions not implemented on hpux but needed for complete
   apex libs description of some standards.  */

/*#################################################################*/
/* UX END */
/* Leave the previous line as it is with no modification.  It is recognized
   by the lib_create program as the end of functions in HP-UX. 

   This warning can be disregarded after all the _APEX_SOURCE additions 
   are made.
*/
#include <sys/types.h>
/* varargs stuff, functions called by macros */
/* va_end is a macro */
void *__va_arg () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 void *x; return (x); }

char *__va_start () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->ANSIC,OSF_AES,OSF1,HPUX] */
#endif  /* _APEX_SOURCE */
 char *x; return (x); }



/**********************************************************************
   Start XPG4 additions
   These functions are in xpg4 and not in hpux.  Therefore they do not have
   lint lib entries.  If they are added to hpux they should have HPUX 
   added to their APEX target list.
*/
ssize_t iconv ( iconv_t c, char **ib, size_t *in, char **ob, size_t *obyte ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG4,HPUX] */
#endif  /* _APEX_SOURCE */
 return 0; }





/**********************************************************************
   Start of OSF/1 additions
   These functions are in OSF/1 as listed in the OSF/1 programmer's
   reference manual.
   This list does not include functions already listed in the AES or 
   XPG4 additions section.
*/
/* The following functions are implemented as macros  */
/*  int advance () { return 0; } */

/*  int compile () { return 0; } */

/*  int step () { return 0; }    */


int asctime_r ( const struct tm *t, char *b, int l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ctime_r ( const time_t *t, char *b, int l) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


int decode_mach_o_hdr ( void *a, size_t b, unsigned long c, void *d) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int dn_find () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int encode_mach_o_hdr ( void *a, void *b, size_t c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int exec_with_loader ( int a, const char *b, const char *c, char * const d[],
	char * const e[]) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

double expacct ( unsigned short a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 double x; return (x); }

int flock ( int a, int b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

void flockfile ( FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }


#include <curses.h>
int flushok ( WINDOW *a, bool b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int forder () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

void funlockfile ( FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }


struct addressconf { int a; int b;};

int getaddressconf ( struct addressconf *a, size_t b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


int getcap () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int getdtablesize () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int getfsstat ( struct statfs *b[], long c, int f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


#ifndef _INCLUDE_POSIX_SOURCE
    typedef long gid_t;
	struct group { char *n; char *p; int g; char **cp; };

#endif
struct group *getgrgid_r ( struct group *a, gid_t b, char *c, int d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (a); }

struct group *getgrnam_r ( struct group a, const char *b, char *c, int d ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (&a); }

int gethostid () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int getlogin_r ( char *a, int b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int getpagesize () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int gmtime_r () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int isjalnum ( int c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int isjalpha ( int c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int isjdigit ( int c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int isjpunct ( int c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int isjspace ( int c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int isjxdigit ( int c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


/* The following typedefs should be verified on the HP-OSF/1 system 
   when this library is put onto that system.
*/
typedef int (*ldr_entry_pt_t)();
typedef long ldr_module_t;
typedef int ldr_process_t;
typedef struct ldr_module_info_t { 
#ifdef _APEX_SOURCE

#endif  /* _APEX_SOURCE */
int a; int b; } ldr_module_info_t;

typedef long ldr_region_t;
typedef struct ldr_region_info_t { int a; int b; } ldr_region_info_t;

typedef unsigned ldr_load_flags_t;

ldr_entry_pt_t ldr_entry ( ldr_module_t m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return ((ldr_entry_pt_t)NULL); }

int ldr_inq_module ( ldr_process_t p, ldr_module_t m, ldr_module_info_t *i, 
		size_t a, size_t b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ldr_inq_region ( ldr_process_t a, ldr_module_t b, ldr_region_t c, 
		ldr_region_info_t *d, size_t e, size_t f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ldr_install ( const char *m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

void *ldr_lookup_package ( char *a, char* b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 void *x; return (x); }

int ldr_next_module () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ldr_remove ( const char *m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ldr_xattach () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ldr_xdetach ( ldr_process_t p ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ldr_xentry ( ldr_process_t a, ldr_module_t b, ldr_entry_pt_t *c ) 
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ldr_xload ( ldr_process_t a, char *b, ldr_load_flags_t c, ldr_module_t d) 
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ldr_xlookup_package ( ldr_process_t a, char *b, char *c, void **d ) 
	{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int ldr_xunload ( ldr_process_t a, ldr_module_t b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

ldr_module_t load ( char *a, ldr_load_flags_t b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


/* the following is in loader library libld.a */
/* the unified version should include loader.h */
int unload ( ldr_module_t a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


int localeconv_r ( struct lconv *a, char *b, int c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int localtime_r ( struct tm *r, const time_t t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


/*******************************************************************/
/* mp(3) routines, on Unified these routines should be moved to llib-lmp */
typedef struct minit { int len; short *val; } MINT;

MINT madd ( MINT *a, MINT *b, MINT *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT d; return(d); }

MINT msub ( MINT *a, MINT *b, MINT *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT d; return(d); }

MINT mult ( MINT *a, MINT *b, MINT *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT d; return(d); }

MINT mdiv ( MINT *a, MINT *b, MINT *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT d; return(d); }

MINT pow ( MINT *a, MINT *b, MINT *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT d; return(d); }

MINT gcd ( MINT *a, MINT *b, MINT *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT d; return(d); }

MINT invert ( MINT *a, MINT *b, MINT *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT d; return(d); }

MINT rpow ( MINT *a, MINT *b, MINT *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT d; return(d); }

MINT msqrt ( MINT *a, MINT *b, MINT *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT d; return(d); }

MINT mcmp ( MINT *a, MINT *b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT c; return (c); }


/* move() conflicts with other move defs in other libs */

MINT min ( MINT *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT r; return (r); }

MINT omin ( MINT *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT r; return  (r); }

MINT fmin ( MINT *a, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT r; return (r); }

MINT m_in ( MINT *a, int n, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT r; return(r); }

MINT mout ( MINT *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT r; return (r); }

MINT omout ( MINT *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT r; return (r); }

MINT fmout ( MINT *a, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT r; return (r); }

MINT m_out ( MINT *a, int n, FILE *f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT r; return (r); }

MINT sdiv ( MINT *a, short n, MINT *q, short *c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT r; return (r); }

MINT *itom ( short n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 MINT *r; return (r); }

/****************************************************/


int mvalid ( caddr_t a, size_t l, int p ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (p); }

double neg ( double x ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (x); }


struct ns_addr { int a; int b; };	/* bogus type */

struct ns_addr  ns_addr ( char *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 struct ns_addr r; return (r); }

char *ns_ntoa ( struct ns_addr n ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 char *r; return (r); }


#ifndef _INCLUDE_POSIX_SOURCE
	struct dirent { int a; int b; };

	typedef struct __dirdesc { int a; int b; } DIR;

#endif	/* _INCLUDE_POSIX_SOURCE */

int opendir_r ( char *d, DIR *dir ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 int r; return (r); }


/* include pthread.h here on Unified, and remove the following typedefs  */
/* the pthread routines should be moved to the llib-lpthreads file on Unified*/
struct pthread_attr { long flags; int stacksize; }; 

typedef struct pthread_attr *pthread_attr_t;
struct pthread { int a; int b; };

typedef struct pthread *pthread_t;
struct p_queue { struct p_queue *a; struct p_queue *b; };

typedef struct p_queue  pthread_queue;
struct pthread_condition {
        pthread_queue   waiters;
        long            flags;
        int             lock;
        char            *name;
};

typedef struct pthread_condition	pthread_cond_t;
struct pthread_condattr { long flags; };

typedef struct pthread_condattr *pthread_condattr_t;
struct pthread_mutex { int a; long b; char *c; };

typedef struct pthread_mutex pthread_mutex_t;
typedef unsigned pthread_key_t;
struct pthread_mutexattr { long flags; };

typedef struct pthread_mutexattr *pthread_mutexattr_t;
struct pthread_once { int l; int f; pthread_mutex_t m; pthread_cond_t e; };

typedef struct pthread_once pthread_once_t;
int pthread_attr_create ( pthread_attr_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_attr_delete ( pthread_attr_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_attr_getstacksize ( pthread_attr_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_attr_setstacksize ( pthread_attr_t *a, long s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_cancel ( pthread_t t ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

void pthread_cleanup_pop ( int x ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }

void pthread_cleanup_push ( void (*fn)(void *a), void *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }

int pthread_cond_broadcast ( pthread_cond_t c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_cond_destroy ( pthread_cond_t *c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_cond_init ( pthread_cond_t *c, pthread_condattr_t a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_cond_signal ( pthread_cond_t c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_cond_timedwait ( pthread_cond_t a, pthread_mutex_t b, 
		struct timespec *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_cond_wait ( pthread_cond_t a, pthread_mutex_t b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_condattr_create ( pthread_condattr_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_condattr_delete ( pthread_condattr_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_create ( pthread_t *a, pthread_attr_t b, void *(*fn)(void *c), 
		void *d) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_detach ( pthread_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_equal ( pthread_t a, pthread_t b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

void pthread_exit ( void *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }

int pthread_getspecific ( pthread_key_t k, void **v ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_join ( pthread_t a, void**b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_keycreate ( pthread_key_t *a, void (*fn)(void *v) ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_mutex_destroy ( pthread_mutex_t *m ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_mutex_init ( pthread_mutex_t *a, pthread_mutexattr_t b) 
		{ 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_mutex_lock ( pthread_mutex_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_mutex_trylock ( pthread_mutex_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_mutex_unlock ( pthread_mutex_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_mutexattr_create ( pthread_mutex_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_mutexattr_delete ( pthread_mutex_t *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_once ( pthread_once_t *a, void (*fn)() ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

pthread_t  pthread_self ( void ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 pthread_t r; return (r); }

int pthread_setasynccancel ( int s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_setcancel ( int s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_setspecific ( pthread_key_t k, void *v ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int pthread_testcancel ( void ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

void pthread_yield ( void ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }



void putlong ( unsigned long a, unsigned char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }

void putshort ( unsigned short a, unsigned char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }

int rand_r ( unsigned int *a, int *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


/* random(3) */
long random ( void ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }

int srandom ( int a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

char *initstate ( unsigned a, char *b, int c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

char * setstate ( char *state ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


char *re_comp ( char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (s); }

int re_exec ( char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


int readdir_r ( DIR *a, struct dirent b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


struct qelem {
	struct 	qelem *a;
	struct 	qelem *b;
	char 	*c;
	};

int remque ( struct qelem *e ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int insque ( struct qelem *e, struct qelem *p ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


void setbuffer ( FILE *f, char *b, char *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }

void setlinebuf ( FILE *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return; }


int setegid ( long a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int setrgid ( long a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


int seteuid ( long a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int setruid ( long a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


int sethostid ( int a) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int setlocale_r ( int a, const char *b, char *c) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int setlogin () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }		/* ??? */


int setquota ( char *a, char *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int setregid ( int a, int b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int setreuid ( int a, int b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


/* in libbsd.a on unified */
int siginterrupt ( int sig, int flag ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


int sigreturn ( struct sigcontext *s ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int sigwait ( unsigned int *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

char *strtok_r ( char *a, const char *b, char **c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return(a); }


/* the t_* routines will be in llib-ltli on Unified */
/* remove the following typedefs and add #include <xti.h> */
struct t_call { int a; int b; };

struct t_bind { int a; int b; };

struct t_info { int a; int b; };

struct t_optmgmt { int a; int b; };

struct t_discon { int a; int b; };

struct t_unitdata { int a; int b; };

struct t_uderr { int a; int b; };

int t_accept ( int fd, int a, struct t_call *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

char *t_alloc ( int f, int b, int c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 char *r; return(r); }

int t_bind ( int a, struct t_bind *b, struct t_bind *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_close ( int a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_connect ( int a, struct t_call *b, struct t_call *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_error ( char *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_free ( char *a, int b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_getinfo ( int f, struct t_info *i ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_getstate ( int fd ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_listen ( int f, struct t_call *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_look ( int a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_open ( char *a, int b, struct t_info *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_optmgmt ( int a, struct t_optmgmt *b, struct t_optmgmt *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_rcv ( int a, char *b, unsigned c, int *d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_rcvconnect ( int a, struct t_call *b) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_rcvdis ( int f, struct t_discon *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_rcvrel ( int a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_rcvudata ( int a, struct t_unitdata *b, int *c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_rcvuderr ( int a, struct t_uderr *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_snd ( int a, char *b, unsigned c, int d ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_snddis ( int a, struct t_call *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_sndrel ( int f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_sndudata ( int f, struct t_unitdata *b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_sync ( int f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int t_unbind ( int f ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->XPG3,XPG4,OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


int touchline () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }		/* ??? */

int touchoverlap () { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }		/* ??? */


unsigned int ualarm ( unsigned int a, unsigned int b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int unlocked_getc ( FILE *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int unlocked_getchar ( void ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int unlocked_putc ( char c, FILE *a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int unlocked_putchar ( char c ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

unsigned  usleep ( unsigned a ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int utimes ( const char *a, struct timeval x[2] ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


struct vtimes { int a; int b; };

int vtimes ( struct vtimes *a, struct vtimes b ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }


int wsprintf ( wchar_t *s, char *f, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

int wsscanf ( wchar_t *s, char *f, ...) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

wchar_t *wstrcat ( wchar_t *w1, wchar_t *w2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (w1); }

wchar_t *wstrchr ( wchar_t *p, int x ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (p); }

int wstrcmp ( wchar_t *w1, wchar_t *w2, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

wchar_t *wstrcpy ( wchar_t *w1, wchar_t *w2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (w1); }


size_t wstrcspn ( wchar_t *w1, wchar_t w2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

wchar_t *wstrdup ( wchar_t *w1 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (w1); }

size_t wstrlen ( wchar_t *w ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

wchar_t *wstrncat ( wchar_t *w1, wchar_t *w2, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (w1); }

int wstrncmp ( wchar_t *w1, wchar_t *w2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

wchar_t *wstrncpy ( wchar_t *w1, wchar_t *w2, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (w1); }

wchar_t *wstrpbrk (wchar_t *w1, wchar_t *w2 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (w1); }

wchar_t *wstrrchr ( wchar_t *w, int n) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

size_t wstrspn ( wchar_t *w1, wchar_t w2) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return 0; }

wchar_t *wstrtok ( wchar_t *w2, wchar_t w3 ) { 
#ifdef _APEX_SOURCE
/* APEX STD [HPUX->OSF1] */
#endif  /* _APEX_SOURCE */
 return (w2); }


#endif /* _APEX_SOURCE */
